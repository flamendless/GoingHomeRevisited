local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")

local Systems = Concord.system()

local classes = {"dialogues", "inventory", "notes"}
local system_classes = {}

function Systems:init(world)
	self.world = world
	local ECS = require("ecs")
	for _, class in ipairs(classes) do
		system_classes[class] = ECS.get_system_class(class)
	end
end

function Systems:set_system_to(id, bool)
	@@assert(type(id) == "string")
	@@assert(type(bool) == "boolean")
	@@assert(system_classes[id] ~= nil)
	local sys = self.world:getSystem(system_classes[id])
	sys:setEnabled(bool)
end

function Systems:dialogue_to_inventory()
	self:set_system_to("dialogues", false)
	self:set_system_to("inventory", true)
	Log.trace("dialogue_to_inventory")
end

function Systems:inventory_to_notes(reversed)
	@@sassert(reversed, type(reversed) == "boolean")
	if not reversed then
		self:set_system_to("inventory", false)
		self:set_system_to("notes", true)
	else
		self:set_system_to("inventory", true)
		self:set_system_to("notes", false)
	end
	Log.trace("inventory_to_notes")
end

return Systems
