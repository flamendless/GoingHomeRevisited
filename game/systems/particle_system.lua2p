local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")

local ParticleSystem = Concord.system()

function ParticleSystem:init(world)
	self.world = world
	self.ps = {}
end

function ParticleSystem:setup_particle_system(t)
	@@assert(type(t) == "table")
	local t_names = functional.map(t, function(v) return v:type() end)
	Log.info("Setup particle system effects:", table.concat(t_names, ","))
	self.ps = t
end

function ParticleSystem:set_particle_system(id_or_ids, mode, ...)
	local is_str = type(id_or_ids) == "string"
	local is_tbl = type(id_or_ids) == "table"
	@@assert(is_str or is_tbl)
	@@assert(type(mode) == "string" and (
		mode == "stop" or mode == "pause" or mode == "start" or mode == "reset"
		or mode == "setEmissionRate"
	))
	for _, ps in ipairs(self.ps) do
		local ps_id = ps:type()
		local valid = false
		if is_str then
			valid = ps_id == id_or_ids
		elseif is_tbl then
			for _, id in ipairs(id_or_ids) do
				if ps_id == id then
					valid = true
					break
				end
			end
		end
		if valid then
			ps.system[mode](ps.system, ...)
		end
	end
	local id = is_str and id_or_ids or table.concat(id_or_ids, ", ")
	@@assert(false, string.format("particle system id '%s' not found", id))
end

function ParticleSystem:update_particle_system(dt)
	@@profb("update_particle_system")
	for _, ps in ipairs(self.ps) do
		if ps.system:isActive() then
			if ps.update_ex then
				ps:update_ex(dt)
			else
				ps.system:update(dt)
			end
		end
	end
	@@profe("update_particle_system")
end

function ParticleSystem:draw_particle_system(...)
	@@profb("draw_particle_system")
	for _, ps in ipairs(self.ps) do
		if ps.system:isActive() then
			ps:draw(...)
		end
	end
	@@profe("draw_particle_system")
end

return ParticleSystem
