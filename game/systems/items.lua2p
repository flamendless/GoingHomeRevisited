local Concord = require("modules.concord.concord")

local Dialogues = require("dialogues")
local ItemsList = require("items")
local Resources = require("resources")

local Items = Concord.system({
	pool = {$_C_ITEM},
})

local AItems = require("assemblages.items")

local list = {
	flashlight = {
		car = {
			--TODO
			-- "_play_sound_item_unusable",
			"I got this flashlight from the car",
		},
	}
}

function Items:init(world)
	self.world = world
	self:initialize_entities()
end

function Items:create_items()
	local t = ItemsList.get_acquired()
	for _, v in ipairs(t) do
		Concord.entity(self.world):assemble(AItems[v.id])
	end
end

function Items:destroy_items()
	for _, e in ipairs(self.pool) do
		e:destroy()
	end
end

function Items:initialize_entities()
	if self.e_bg and self.e_prev then return end
	self.e_bg = Concord.entity(self.world)
		:give($_C_ID, "item_preview_bg")
		:give($_C_SPRITE, "bg_inventory")
		:give($_C_TRANSFORM, 0, 1, 1, 1, 0.5)
		:give($_C_COLOR, {1, 1, 1, 1})
		:give($_C_ITEM_PREVIEW)

	self.e_prev = Concord.entity(self.world)
		:give($_C_ID, "item_preview")
		:give($_C_COLOR, {1, 1, 1, 1})
		:give($_C_ITEM_PREVIEW)
end

function Items:create_item_preview(bg_e, item_e)
	@@assert(bg_e.__isEntity and bg_e.cell_bg)
	@@assert(item_e.__isEntity and item_e.item)
	local scale = 4
	local pad = 32
	local pad_p = pad * 2
	local bg_pos = bg_e.pos
	local bg_sprite = bg_e.sprite
	local bg_t = bg_e.transform

	local res_id = item_e.sprite.resource_id
	local img = Resources.data.images[res_id]
	local tw = (img:getWidth() + 16) * scale
	local th = (img:getHeight() + 16) * scale

	self.e_bg:give($_C_POS, bg_pos.x - bg_sprite.iw * bg_t.sx - pad, bg_pos.y)
		:give($_C_AUTO_SCALE, tw, th)
		:remove($_C_HIDDEN)

	self.e_prev:give($_C_SPRITE, res_id)
		:give($_C_POS, bg_pos.x - bg_sprite.iw * bg_t.sx - pad_p, bg_pos.y)
		:give($_C_TRANSFORM, 0, scale, scale, 1, 0.5)
		:remove($_C_HIDDEN)
end

function Items:item_response(dialogue_t, main, sub)
	@@assert(type(dialogue_t) == "table")
	@@assert(type(main) == "string")
	@@assert(type(sub) == "string")
	self.world:emit("close_inventory", true)
	self.world:emit("on_interact_or_inventory")
	self.world:emit("spawn_dialogue", dialogue_t, main, sub)
end

function Items:on_item_use_with(item, other)
	@@assert(item.__isEntity and item.item)
	@@sassert(other, other.__isEntity and other.interactive)
	self.world:emit("set_system_to", "dialogues", true)
	self.world:emit("set_system_to", "inventory", false)
	local item_id = item.item.id
	if not other then
		local dialogue_t = Dialogues.get("common", "item_without")
		self:item_response(dialogue_t, "common", "item_without")
	else
		local other_id = other.id.value
		local t = list[item_id] and list[item_id][other_id]
		@@assert(not(other.usable_with_item == nil and t ~= nil), "add usable_with_item component?")
		@@assert(not(other.usable_with_item ~= nil and t == nil), "add to list?")
		if other.usable_with_item and t ~= nil then
			self:item_response(t, "_none", "_none")
		else
			local t2 = {string.format("%s can not be used here", item_id)}
			self:item_response(t2, "_none", "_none")
		end
	end
end

function Items:on_item_equip(item_e)
	@@assert(item_e.__isEntity and item_e.item)
	local item = item_e.item
	if item.id == "flashlight" then
		self.world:emit("set_system_to", "dialogues", true)
		self.world:emit("set_system_to", "inventory", false)
		if not item.has_batteries then
			local dialogue_t = Dialogues.get("items", "no_batteries")
			self.world:emit("spawn_dialogue_ex", dialogue_t, "dialogue_to_inventory")
		else
			ItemsList.toggle_equip(item.id)
			self.world:emit("on_toggle_equip_flashlight")
		end
	end
end

return Items
