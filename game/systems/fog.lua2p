local Concord = require("modules.concord.concord")

local Fog = Concord.system({
	pool = {$_C_ID, $_C_FOG, $_C_NOISE_TEXTURE, $_C_POS, $_C_COLOR, $_C_TRANSFORM},
})

function Fog:init(world)
	self.world = world
	self.pool.onAdded = function(pool, e)
		e.sprite.image = e.noise_texture.texture
	end
end

function Fog:update()
	for _, e in ipairs(self.pool) do
		if not e.hidden then
			local fog = e.fog
			fog.shader:send("u_fog_speed", fog.speed)
			fog.shader:send("u_time", love.timer.getTime())
		end
	end
end

function Fog:draw_fog(e)
	@@assert(e.__isEntity, e.fog)
	local fog = e.fog
	local color = e.color.value
	love.graphics.setColor(color)
	love.graphics.setShader(fog.shader)
	e.renderer.render(e)
	love.graphics.setShader()
end

function Fog:fade_in_fog(target_id, dur)
	@@assert(type(target_id) == "string")
	@@assert(type(dur) == "number")
	for _, e in ipairs(self.pool) do
		local id = e.id.value
		if id == target_id then
			e:remove($_C_HIDDEN)
			:give($_C_COLOR_FADE_IN, dur)
			break
		end
	end
end

function Fog:fade_out_fog(target_id, dur)
	@@assert(type(target_id) == "string")
	@@assert(type(dur) == "number")
	for _, e in ipairs(self.pool) do
		local id = e.id.value
		if id == target_id then
			e:give($_C_COLOR_FADE_OUT, dur)
			:give($_C_COLOR_FADE_OUT_FINISH, "hide_entity", 0, e)
			break
		end
	end
end

return Fog
