local Concord = require("modules.concord.concord")

local Collision = Concord.system({
	pool = {$_C_POS, $_C_COLLIDER},
	pool_circle = {$_C_POS, $_C_COLLIDER_CIRCLE},
})

local function circle_rect(cx, cy, cr, rx, ry, rw, rh)
	local dx = cx - math.max(rx, math.min(cx, rx + rw))
	local dy = cy - math.max(ry, math.min(cy, ry + rh))
	return (dx * dx + dy * dy) < (cr * cr)
end

function Collision:check_circle_to_rect(cx, cy, cr)
	for _, er in ipairs(self.pool) do
		local pos = er.pos.pos
		local col = er.collider
		local rx = pos.x
		local ry = pos.y
		local rw = col.size.x
		local rh = col.size.y

		if col.offset then
			rx = rx + col.offset.x
			ry = ry + col.offset.y
		end

		local res = circle_rect(cx, cy, cr, rx, ry, rw, rh)
		col.is_hit = res

		if res then
			return true
		end
	end
	return false
end

function Collision:check_rect_to_circle(rx, ry, rw, rh)
	for _, ec in ipairs(self.pool_circle) do
		local pos = ec.pos.pos
		local col = ec.collider_circle
		local cx = pos.x
		local cy = pos.y
		local cr = col.size

		if col.offset then
			cx = cx + col.offset.x
			cy = cy + col.offset.y
		end

		local res = circle_rect(cx, cy, cr, rx, ry, rw, rh)
		col.is_hit = res

		if res then
			return true
		end
	end
	return false
end

function Collision:check_collision(e)
	local pos = e.pos.pos
	local col = e.collider
	local col_c = e.collider_circle

	if col then
		local rx = pos.x
		local ry = pos.y
		local rw = col.size.x
		local rh = col.size.y

		if col.offset then
			rx = rx + col.offset.x
			ry = ry + col.offset.y
		end

		local res1 = self:check_rect_to_circle(rx, ry, rw, rh)
		-- local res2 = self:check_rect_to_rect(e)
		col.is_hit = res1
	elseif col_c then
		local cx = pos.x
		local cy = pos.y
		local r = col_c.size

		if col_c.offset then
			cx = cx + col_c.offset.x
			cy = cy + col_c.offset.y
		end

		-- local res1 = self:check_circle_to_cicle(e)
		local res2 = self:check_circle_to_rect(cx, cy, r)
		col_c.is_hit = res2
	end
end

return Collision
