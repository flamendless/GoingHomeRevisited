local Concord = require("modules.concord.concord")

local function ctor_single(c, signal, delay, ...)
	@@assert(type(signal) == "string")
	@@sassert(delay, type(delay) == "number")
	c.signal = signal
	c.delay = delay or 0
	c.args = {...}
end

local function ctor_multi(c, ...)
	c.values = {...}
	!if _DEV then
	for _, v in ipairs(c.values) do
		@@assert(type(v.signal) == "string")
		@@sassert(v.delay, type(v.delay) == "number")
	end
	!end
end

local function callback(name, ctor)
	return Concord.component(name, ctor)
end

local names = {
	$_C_ANIMATION_ON_LOOP,
	$_C_ANIMATION_ON_UPDATE,
	$_C_ANIMATION_ON_FINISH,
	$_C_LERP_ON_FINISH,
	$_C_TYPEWRITER_ON_FINISH,
	$_C_ON_ENTER_MENU,
	$_C_COLOR_FADE_OUT_FINISH,
	$_C_COLOR_FADE_IN_FINISH,
	$_C_ON_DIALOGUE_END,
	$_C_ON_BLINK_END,
	$_C_ON_DLIGHT_FLICKER_DURING,
	$_C_ON_DLIGHT_FLICKER_AFTER,
	$_C_ON_PATH_UPDATE,
	$_C_ON_PATH_REACHED_END,
}

local names_multi = {
	$_C_LERP_ON_FINISH_MULTI
}

for _, v in ipairs(names) do
	local c = callback(v, ctor_single)
end

for _, v in ipairs(names_multi) do
	local c = callback(v, ctor_multi)
end
