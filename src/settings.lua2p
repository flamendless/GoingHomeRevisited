local Enum = require("modules.enum.enum")
local JSON = require("modules.json.json")
local Log = require("modules.log.log")

local WindowMode = require("window_mode")
local Utils = require("utils")

local insert = table.insert
local format = string.format
local sub = string.sub

local Settings = {
	current = {}
}

local filename = !(_SETTINGS_FILENAME)
local graphics_quality = Enum("Low", "High")
local cached_gq = {}

function Settings.initialize()
	local content, exists = Utils.read_file(filename)

	if exists then
		Settings.current = JSON.decode(content)
	else
		Settings.create_new()
	end
end

function Settings.create_new()
	local ren_name, ren_version, ren_vendor, ren_device = love.graphics.getRendererInfo()
	local gl_version = sub(ren_version, 1, 3)

	if gl_version == !(_MIN_GL_VERSION) then
		Settings.current.graphics_quality = graphics_quality.Low
	else
		Settings.current.graphics_quality = graphics_quality.High
	end

	Settings.current.current_wm = 1
	Settings.current.game_sounds = true
	Settings.current.game_music = true
	Settings.overwrite()
end

function Settings.overwrite()
	Utils.write_to_file_json(filename, Settings.current)
end

function Settings.update_graphics_quality(str, should_overwrite)
	!if _ASSERT then
	Assert.should_string(str)
	Assert.safe_should_boolean(should_overwrite)
	!end

	Settings.current.graphics_quality = graphics_quality[str]
	if should_overwrite then
		Settings.overwrite()
	end
end

function Settings.update_window_mode(i, should_overwrite)
	!if _ASSERT then
	Assert.should_number(i)
	Assert.safe_should_boolean(should_overwrite)
	!end

	Settings.current.current_wm = i
	if should_overwrite then
		Settings.overwrite()
	end
end

function Settings.set_game_sounds(flag, should_overwrite)
	!if _ASSERT then
	Assert.should_boolean(flag)
	Assert.safe_should_boolean(should_overwrite)
	!end

	local prev = Settings.current_game_sounds

	if prev ~= flag then
		Settings.current.game_sounds = flag
		if should_overwrite then
			Settings.overwrite()
		end
	end
end

function Settings.set_game_music(flag, should_overwrite)
	!if _ASSERT then
	Assert.should_boolean(flag)
	Assert.safe_should_boolean(should_overwrite)
	!end

	local prev = Settings.current_game_musoc

	if prev ~= flag then
		Settings.current.game_music = flag
		if should_overwrite then
			Settings.overwrite()
		end
	end
end

function Settings.get_gq_list()
	if #cached_gq == 0 then
		for k, v in pairs(graphics_quality) do
			if type(v) == "string" then
				insert(cached_gq, v)
			end
		end
	end

	return cached_gq
end

return Settings
