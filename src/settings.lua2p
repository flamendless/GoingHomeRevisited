local Log = require("modules.log.log")

local Info = require("info")
local Utils = require("utils")

local format = string.format

local defaults = {
	key_map = 1,
	window_mode = 1,
	muted = false,
	volume = 100,
	graphics_quality = !(_GFX_QUALITY),
	show_keys = true,
}

local Settings = {
	current = tablex.copy(defaults, {}),
	available_graphics_quality = {"low", "high"},
}

local filename = !(_SETTINGS_FILENAME)

function Settings.init()
	local content, exists = Utils.serial.read(filename)
	if exists then
		Settings.current = content
		pretty.print(Settings.current)
	else
		Settings.create_new()
	end
end

function Settings.create_new()
	Settings.current = tablex.copy(defaults, {})
	local gl_version = string.sub(Info.data.renderer.version, 1, 3)
	if gl_version == !(_MIN_GL_VERSION) then
		Settings.current.graphics_quality = "low"
	else
		Settings.current.graphics_quality = "high"
	end
	Settings.overwrite()
end

function Settings.overwrite()
	Utils.serial.write(filename, Settings.current)
end

function Settings.set(id, value, should_overwrite)
	should_overwrite = should_overwrite or false
	@@assert(type(id) == "string")
	@@assert(type(value) == "boolean" or type(value) == "number")
	@@assert(type(should_overwrite) == "boolean")

	local prev = Settings.current[id]
	if not (prev == value) then
		Settings.current[id] = value
		Log.info(format("set %s to %s", id, value))
		if should_overwrite then
			Settings.overwrite()
		end
	end
end

function Settings.set_from_table(t, should_overwrite)
	@@assert(type(t) == "table")
	@@assert(type(should_overwrite) == "boolean")
	for k, v in pairs(t) do
		@@assert(Settings.current[k] ~= nil, "invalid " .. k .. " key")
		Settings.current[k] = v
		Log.info(format("set %s to %s", k, v))
	end

	if should_overwrite then
		Settings.overwrite()
	end
end

return Settings
