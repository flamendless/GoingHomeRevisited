local Log = require("modules.log.log")
local WindowMode = require("window_mode")

local Info = {}

local min = math.min
local sort = table.sort
local concat = table.concat
local insert = table.insert
local remove = table.remove
local format = string.format
local file = !(_LOG_INFO)
local game_version = ("%i.%i.%i"):format(unpack(!(_GAME_VERSION)))

Info.data = {}

function Info.initialize()
	Log.info("System information checking...")

	Info.data.info_os = love.system.getOS()
	Info.data.state, percent, seconds = love.system.getPowerInfo()
	Info.data.processor_count = love.system.getProcessorCount()
	Info.data.has_bgm = love.system.hasBackgroundMusic()
	Info.data.limits = love.graphics.getSystemLimits()
	Info.data.name, version, vendor, device = love.graphics.getRendererInfo()
	Info.data.supported_modes = WindowMode.modes

	local w = love.graphics.getWidth()
	local h = love.graphics.getHeight()
	sort(Info.data.supported_modes, function(a, b) return a.width * a.height < b.width * b.height end)
	Info.data.current_mode = w .. "x" .. h

	local str = {
		format("Game Version: %s", Info.data.game_version),
		format("OS: %s", Info.data.info_os),
		"Power Info:",
		format("\tState: %s", Info.data.state),
		format("\tPercent: %s", Info.data.percent),
		format("\tSeconds: %s", Info.data.seconds or "not available"),
		format("Processor Count: %s", Info.data.processor_count),
		format("Has BGM: %s", tostring(Info.data.has_bgm)),
		"Renderer Info:",
		format("\tName: %s", Info.data.name),
		format("\tVersion: %s", Info.data.version),
		format("\tVendor: %s", Info.data.vendor),
		format("\tDevice: %s", Info.data.device),
		"Supported Modes:",
	}
	Info.data.supported_modes_str = {}
	for i, mode in ipairs(Info.data.supported_modes) do
		local scale = min(love.graphics.getWidth()/mode.width, love.graphics.getHeight()/mode.height)
		str[#str + 1] = format("\t[%i] - %ix%i - scale: %f", i, mode.width, mode.height, scale)
		Info.data.supported_modes_str[i] = mode.width .. "x" .. mode.height
	end

	local to_write = concat(str, "\n")
	local exists = love.filesystem.getInfo(file)
	Log.info(format("'%s' exists: %s", file, exists or false))
	if exists then
		local content = love.filesystem.read(file)
		if (content ~= to_write) then
			love.filesystem.write(file, to_write)
			Log.info(format("'%s' overwritten", file))
		else
			Log.info(format("'%s' untouched", file))
		end
	else
		love.filesystem.write(file, to_write)
		Log.info(format("'%s' written", file))
	end
end

return Info
