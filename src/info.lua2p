local Log = require("modules.log.log")

local WindowMode = require("window_mode")
local Utils = require("utils")

local Info = {
	data = {},
	options = {},
}

local min = math.min
local concat = table.concat
local insert = table.insert
local format = string.format
local filename = !(_LOG_INFO)

function Info.initialize()
	Log.info("System information checking...")

	Info.data.info_os = love.system.getOS()
	Info.data.processor_count = love.system.getProcessorCount()
	Info.data.name, Info.data.version, Info.data.vendor, Info.data.device = love.graphics.getRendererInfo()
	Info.data.game_version = format("%i.%i.%i", unpack(!(_GAME_VERSION)))

	Info.data.limits = love.graphics.getSystemLimits()
	Info.data.canvasformats = love.graphics.getCanvasFormats()
	Info.data.imageformats = love.graphics.getImageFormats()
	Info.data.texturetypes = love.graphics.getTextureTypes()
	Info.data.supported = love.graphics.getSupported()

	local system_limits = {}
	for k, v in pairs(Info.data.limits) do
		local str = format("\t%s: %s\n", k, v)
		insert(system_limits, str)
	end

	local canvas_formats = {}
	for k, v in pairs(Info.data.canvasformats) do
		local str = format("\t%s: %s\n", k, v)
		insert(canvas_formats, str)
	end

	local image_formats = {}
	for k, v in pairs(Info.data.imageformats) do
		local str = format("\t%s: %s\n", k, v)
		insert(image_formats, str)
	end

	local texture_types = {}
	for k, v in pairs(Info.data.texturetypes) do
		local str = format("\t%s: %s\n", k, v)
		insert(texture_types, str)
	end

	local supported = {}
	for k, v in pairs(Info.data.supported) do
		local str = format("\t%s: %s\n", k, v)
		insert(supported, str)
	end

	local str = {
		format("Game Version: %s", Info.data.game_version),
		format("OS: %s", Info.data.info_os),

		format("Processor Count: %s", Info.data.processor_count),

		"Renderer Info:",
		format("\tName: %s", Info.data.name),
		format("\tVersion: %s", Info.data.version),
		format("\tVendor: %s", Info.data.vendor),
		format("\tDevice: %s", Info.data.device),

		"System Limits:",
		concat(system_limits),

		"Canvas Formats:",
		concat(canvas_formats),

		"Image Formats:",
		concat(image_formats),

		"Texture Types:",
		concat(texture_types),

		"Supported:",
		concat(supported),

		"Other Info:",
		format("Release Mode: %s", !(_RELEASE)),
		format("Assert Mode: %s", !(_ASSERT)),
	}

	local to_write = concat(str, "\n")
	local content, exists = Utils.read_file(filename)

	if exists then
		Info.validate_file(content, to_write)
	else
		Utils.write_to_file(filename, to_write)
		love.filesystem.write("PLEASE_DO_NOT_EDIT_ANY_FILES", "Editing any files in this directory will invalidate all your progress")
	end

	!if not _RELEASE then
	print(to_write)
	!end
end

function Info.validate_file(content, to_write)
	if content ~= to_write then
		love.filesystem.write(filename, to_write)
		Log.info(format("'%s' overwritten", filename))
	else
		Log.info(format("'%s' untouched", filename))
	end
end

function Info.is_texturesize_compatible(size)
	local max_size = Info.data.limits.texturesize
	return size <= max_size
end

return Info
