local Lily = require("modules.lily.lily")
local Log = require("modules.log.log")

local format = string.format
local Preloader = {
	percent = 0
}

local keys = {
	image = "newImage",
	image_data = "newImageData",
	source = "newSource",
	font = "newFont",
}

function Preloader.start(resources, container, oncomplete)
	!if _ASSERT then
	Assert.should_table(resources)
	Assert.should_table(container)
	Assert.should_function(oncomplete)
	!end

	local i = 1
	local data = {}
	local userdata = {}
	local cache = {}

	Preloader.percent = 0

	for kind, t in pairs(resources) do
		for j = 1, #t do
			local id = t[j][1]
			local path = t[j][2]

			if kind == "image" then
				data[i] = {keys[kind], path}
			elseif kind == "image_data" then
				data[i] = {keys[kind], path}
			elseif kind == "source" then
				local source_type = t[j][3]

				data[i] = {keys[kind], path, source_type}
			elseif kind == "font" then
				local font_size = t[j][3]
				local font_sub = t[j][4]

				if not font_sub then
					id = id .. "_" .. (font_sub or font_size)
				end

				data[i] = {keys[kind], path, font_size}
			end

			userdata[i] = id

			!if _ASSERT then
			Assert.should_nil(cache[id])
			!end

			cache[id] = true
			i = i + 1
		end
	end

	local preloader = Lily.loadMulti(data)

	preloader:setUserData(userdata)
	preloader:onLoaded(function(id, i, data)
			local to_load = preloader:getCount()
			local completed = preloader:getLoadedCount()

			Preloader.percent = (completed/to_load) * 100
		end)

	preloader:onComplete(function(id, tbl_data)
		for i, tbl in ipairs(tbl_data) do
			local id = id[i]
			local data = tbl[1]
			local data_type = data:type()

			if data_type == "Image" then
				!if _ASSERT then
				Assert.should_exists(container.images)
				Assert.should_table(container.images)
				!end

				data:setFilter(!(_IMAGE_FILTER), !(_IMAGE_FILTER))
				container.images[id] = data
			elseif data_type == "ImageData" then
				!if _ASSERT then
				Assert.should_exists(container.image_data)
				Assert.should_table(container.image_data)
				!end

				container.image_data[id] = data
			elseif data_type == "Source" then
				!if _ASSERT then
				Assert.should_exists(container.sources)
				Assert.should_table(container.sources)
				!end

				container.sources[id] = data
			elseif data_type == "Font" then
				!if _ASSERT then
				Assert.should_exists(container.fonts)
				Assert.should_table(container.fonts)
				!end

				data:setFilter(!(_FONT_FILTER), !(_FONT_FILTER))
				container.fonts[id] = data
			end

			local str = format("Loaded: #%i - %s : %s", i, data_type, id)
			Log.trace(str)
		end

		oncomplete()
	end)
end

return Preloader
