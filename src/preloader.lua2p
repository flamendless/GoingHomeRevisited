local Lily = require("modules.lily.lily")
local Log = require("modules.log.log")

local format = string.format

local Preloader = {
	percent = 0
}

local keys = {
	images = "newImage",
	image_data = "newImageData",
	array_images = "newArrayImage",
	sources = "newSource",
	fonts = "newFont",
}

function Preloader.start(resources, container, on_complete)
	@@assert(type(resources) == "table")
	@@assert(type(container) == "table")
	@@assert(type(on_complete) == "function")
	Preloader.percent = 0
	local i = 1
	local data = {}
	local userdata = {}
	for kind, t in pairs(resources) do
		for j = 1, #t do
			local id = t[j][1]
			local path = t[j][2]

			if kind == "images" or kind == "image_data" then
				data[i] = {keys[kind], path}
			elseif kind == "array_images" then
				data[i] = {keys[kind], {path}}
			elseif kind == "sources" then
				local source_type = t[j][3]
				data[i] = {keys[kind], path, source_type}
			elseif kind == "fonts" then
				local font_size = t[j][3]
				local font_sub = t[j][4]
				if not font_sub then
					id = id .. "_" .. (font_sub or font_size)
				end
				data[i] = {keys[kind], path, font_size}
			end
			userdata[i] = id
			i = i + 1
		end
	end

	Preloader.load(data, userdata, container, on_complete)
end

function Preloader.load(data, userdata, container, on_complete)
	@@assert(type(data) == "table")
	local preloader = Lily.loadMulti(data)
	preloader:setUserData(userdata)
	preloader:onLoaded(function(id, i, data)
		local to_load = preloader:getCount()
		local completed = preloader:getLoadedCount()
		Preloader.percent = (completed/to_load) * 100
	end)

	preloader:onComplete(function(id, tbl_data)
		for i, tbl in ipairs(tbl_data) do
			local id = id[i]
			local data = tbl[1]
			local dt = data:type()
			if dt == "Image" then
				local tt = data:getTextureType()
				data:setFilter(!(_IMAGE_FILTER), !(_IMAGE_FILTER))
				if tt == "array" then
					@@assert(container.array_images)
					@@assert(type(container.array_images) == "table")
					container.array_images[id] = data
				else
					@@assert(container.images)
					@@assert(type(container.images) == "table")
					container.images[id] = data
				end
			elseif dt == "ImageData" then
				@@assert(container.image_data)
				@@assert(type(container.image_data) == "table")
				container.image_data[id] = data
			elseif dt == "Source" then
				@@assert(container.sources)
				@@assert(type(container.sources) == "table")
				container.sources[id] = data
			elseif dt == "Font" then
				@@assert(container.fonts)
				@@assert(type(container.fonts) == "table")
				data:setFilter(!(_FONT_FILTER), !(_FONT_FILTER))
				container.fonts[id] = data
			end

			local str = format("Loaded: #%i - %s : %s", i, dt, id)
			Log.trace(str)
		end

		on_complete()
	end)
end

return Preloader
