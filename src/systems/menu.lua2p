local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")

local Menu = Concord.system({
	pool = {"option_key", "color", "position", "text", "on_enter"}
})

local offset_x = 64
local dur_in = 0.75
local dur_out = 0.5
local color_red = { 1, 0, 0, 1 }

local color_to_red = function(color)
	Flux.to(color.color, dur_in, {
		[1] = color_red[1],
		[2] = color_red[2],
		[3] = color_red[3],
		[4] = color_red[4]
	})
end

local color_to_white = function(color)
	Flux.to(color.color, dur_out, {
		[1] = color.original_color[1],
		[2] = color.original_color[2],
		[3] = color.original_color[3],
		[4] = color.original_color[4],
	})
end

function Menu:init()
	self.cursor = 0
	self.length_options = 0
	self.flags = {
		allow_cursor = true
	}

	self.pool.onEntityAdded = function(pool, e)
		self.length_options = self.length_options + 1
	end
end

function Menu:allow_cursor(flag)
	self.flags.allow_cursor = flag
end

function Menu:update_cursor(dt)
	if dt == 0 then return end
	if not self.flags.allow_cursor then return end
	self.cursor = self.cursor + dt
	if self.cursor > self.length_options then
		self.cursor = 1
	elseif self.cursor < 1 then
		self.cursor = self.length_options
	end

	for _, e in ipairs(self.pool) do
		local option_key = e:get("option_key")
		local position = e:get("position")
		local color = e:get("color")

		if self.cursor == option_key.id then
			color_to_red(color)
			Flux.to(position.pos, dur_in, {
				x = position.original_pos.x - offset_x
			})
		else
			color_to_white(color)
			Flux.to(position.pos, dur_out, {
				x = position.original_pos.x
			})
		end
	end
end

function Menu:enter_option()
	if self.cursor == 0 then return end
	if not self.flags.allow_cursor then return end
	for _, e in ipairs(self.pool) do
		local option_key = e:get("option_key")
		local text = e:get("text")
		local callback = e:get("on_enter")

		if option_key.id == self.cursor then
			callback.callback()
			break
		end
	end
end

return Menu
