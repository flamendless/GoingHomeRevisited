local Concord = require("modules.concord.concord")

local lerp = mathx.lerp

local HoverEffect = Concord.system({
	pool_change_color = {"bounding_box", "hoverable", "color", "hover_change_color"},
	pool_change_scale = {"bounding_box", "hoverable", "transform", "hover_change_scale"},
})

!if _ASSERT then
local MouseHover = require("systems.mouse_hover")
!end

function HoverEffect:init(world)
	self.world = world

	!if _ASSERT then
	if not world:hasSystem(MouseHover) then
		error("HoverEffect system needs MouseHover system")
	end
	!end

	self.pool_change_scale.onEntityRemoved = function(pool, e)
		local transform = e.transform

		transform.sx = transform.orig_sx
		transform.sy = transform.orig_sy
	end
end

function HoverEffect:hover_effects()
	self:hover_change_color()
	self:hover_change_scale()
end

function HoverEffect:hover_change_color()
	for _, e in ipairs(self.pool_change_color) do
		local color = e.color
		local hcc = e.hover_change_color
		local hoverable = e.hoverable

		if hoverable.is_hovered then
			color.color[1] = lerp(color.color[1], hcc.target[1], hcc.step)
			color.color[2] = lerp(color.color[2], hcc.target[2], hcc.step)
			color.color[3] = lerp(color.color[3], hcc.target[3], hcc.step)
			color.color[4] = lerp(color.color[4], hcc.target[4], hcc.step)
		else
			color.color[1] = lerp(color.color[1], color.orig_color[1], hcc.step)
			color.color[2] = lerp(color.color[2], color.orig_color[2], hcc.step)
			color.color[3] = lerp(color.color[3], color.orig_color[3], hcc.step)
			color.color[4] = lerp(color.color[4], color.orig_color[4], hcc.step)
		end
	end
end

function HoverEffect:hover_change_scale(mx, my)
	for _, e in ipairs(self.pool_change_scale) do
		local hoverable = e.hoverable
		local transform = e.transform
		local hcs = e.hover_change_scale

		if hoverable.is_hovered then
			transform.sx = lerp(transform.sx, hcs.target, hcs.step)
			transform.sy = lerp(transform.sy, hcs.target, hcs.step)
		else
			transform.sx = lerp(transform.sx, transform.orig_sx, hcs.step)
			transform.sy = lerp(transform.sy, transform.orig_sy, hcs.step)
		end
	end
end

return HoverEffect
