local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")

local Canvas = require("canvas")

!if _DEV then
local DevTools
!end

local PostProcessing = Concord.system()

local buffer1 = Canvas.create_main()
local buffer2 = Canvas.create_main()

function PostProcessing:init(world)
	!if _DEV then
	DevTools = require("devtools")
	!end
	self.world = world
	self.effects = {}
end

function PostProcessing:setup_post_process(t)
	@@assert(type(t) == "table" and #t > 0)
	local t_names = functional.map(t, function(v) return v:type() end)
	Log.info("Setup post processing effects:", table.concat(t_names, ","))
	self.effects = t

	!if _DEV then
	DevTools.pp_effects = self.effects
	functional.foreach(DevTools.pp_effects,
		function(effect)
			effect.debug_show = effect.is_active
		end)
	!end
end

function PostProcessing:set_post_process_effect(id, bool)
	@@assert(type(id) == "string")
	@@assert(type(bool) == "boolean")
	for _, effect in ipairs(self.effects) do
		if effect:type() == id then
			effect.is_active = bool
			return
		end
	end
	@@assert(false, id .. " not found in registered pp effects")
end

function PostProcessing:ev_pp_invoke(id, str_fn, ...)
	@@assert(type(id) == "string")
	@@assert(type(str_fn) == "string")
	for _, effect in ipairs(self.effects) do
		if effect:type() == id then
			effect[str_fn](effect, ...)
			return
		end
	end
	@@assert(false, id .. " was not registered")
end

function PostProcessing:update(dt)
	for _, effect in ipairs(self.effects) do
		!if _DEV then
		effect.debug_show = effect.is_active
		!end
		if effect.update then
			effect:update(dt)
		end
	end
end

function PostProcessing:apply_post_process(canvas)
	@@profb("pp")
	@@assert(canvas:type() == "CustomCanvas")
	love.graphics.setCanvas(buffer1.canvas)
		love.graphics.clear()
		canvas:render_n()
	love.graphics.setCanvas()

	for _, effect in ipairs(self.effects) do
		if effect.is_active then
			@@profb(effect:type())
			love.graphics.setCanvas(buffer2.canvas)
				love.graphics.clear()
				love.graphics.setShader(effect.shader)
					buffer1:render_n()
				love.graphics.setShader()
			love.graphics.setCanvas()
			buffer1, buffer2 = buffer2, buffer1
			@@profe(effect:type())
		end
	end

	buffer1:render_n()
	@@profe("pp")
end

!if _DEV then
local Slab = require("modules.slab")

function PostProcessing:debug_update(dt)
	if not self.debug_show then return end

	self.debug_show = Slab.BeginWindow("pp", {
		Title = "PostProcessing",
		IsOpen = self.debug_show,
	})

	for i, effect in ipairs(self.effects) do
		local b
		local str = effect:type()

		if Slab.CheckBox(effect.debug_show, str) then
			effect.is_active = not effect.is_active
		end
		Slab.SameLine()

		if Slab.Button("up") then
			b = mathx.wrap_index(i - 1, self.effects)
		end

		Slab.SameLine()
		if Slab.Button("down") then
			b = mathx.wrap_index(i + 1, self.effects)
		end

		if b then
			self.effects[i], self.effects[b] = self.effects[b], self.effects[i]
		end
	end
	Slab.EndWindow()
end
!end

return PostProcessing
