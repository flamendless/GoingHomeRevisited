local Concord = require("modules.concord.concord")

local Palette = require("palette")
local UI = require("assemblages.ui")

local ActionControls = Concord.system({
	pool_empty = {"empty_action"},
	pool_actions = {"id", "tween_dur", "on_click", "color", "bounding_box"},
})

!(
local dist = 32
local gap = 60
local start = -30
local _offsets = {}

for i = 0, 3 do
	local n = (start) + gap * i
	local x = math.sin(math.rad(n)) * dist
	local y = -math.cos(math.rad(n)) * dist

	local t = {x, y}
	table.insert(_offsets, t)
end
)
!!local offsets = _offsets

local function get_offset(i)
	local off = offsets[i]

	return vec2:new(off[1], off[2])
end

function ActionControls:init(world)
	self.world = world
	self.sheets = nil
	self.dur = 0.75
	self.actions_map = {"eye", "hand", "bag", "cancel"}

	self.max_pool = 10
	self.current = 1

	for i = 1, self.max_pool do
		local e = Concord.entity(self.world):give("empty_action")
	end

	self.pool_actions.onEntityRemoved = function(pool, e)
		self.current = self.current - 1
		e:give("empty_action")
		:remove("id")
	end
end

function ActionControls:set_action_controls_resources(sheets)
	!if _ASSERT then
	Assert.must(sheets, Types.T_TABLE)
	Assert.exists(sheets.eye)
	Assert.exists(sheets.hand)
	Assert.exists(sheets.bag)
	Assert.exists(sheets.cancel)
	Assert.exists(sheets.use)
	Assert.exists(sheets.combine)
	!end

	self.sheets = sheets
end

function ActionControls:displayed_inventory(player, e, dur)
	local base = e.position.pos
	local sprite = e.sprite.sprite
	local transform = e.transform
	local x = base.x
	local y = base.y - (transform.oy * 2 * sprite:getHeight() * transform.sy)
	local pos = vec2:new(x, y)
	local scale = 0.75

	self.btn_close = Concord.entity(self.world)
		:assemble(UI.inventory_button, "close", self.sheets.cancel, scale)
		:give("position", pos)
		:give("color_fade_in", dur, nil, function()
			self.btn_close:give("hoverable"):give("clickable")
		end)
		:give("on_click", 1, function()
			self.world:emit("keypressed_back", player)
			self.btn_close:remove("hoverable"):remove("clickable")
				:give("color_fade_out", dur, nil, function()
					self.btn_close:destroy()
				end)
		end)
end

function ActionControls:item_clicked(e, dur)
	self.btn_use = Concord.entity(self.world)
		:assemble(UI.inventory_button, "use", self.sheets.use, scale)
		:give("position", pos_use)
		:give("color_fade_in", dur, nil, function()
			self.btn_close:give("hoverable"):give("clickable")
		end)

	self.btn_combine = Concord.entity(self.world)
		:assemble(UI.inventory_button, "combine", self.sheets.combine, scale)
		:give("position", pos_combine)
		:give("color_fade_in", dur, nil, function()
			self.btn_close:give("hoverable"):give("clickable")
		end)
end

function ActionControls:keypressed_back()
	self.btn_use:remove("hoverable"):remove("clickable")
		:give("color_fade_out", dur, nil, function()
			self.btn_use:destroy()
		end)

	self.btn_combine:remove("hoverable"):remove("clickable")
		:give("color_fade_out", dur, nil, function()
			self.btn_combine:destroy()
		end)
end

function ActionControls:show_action_controls(player, target_interactive)
	local i = 1
	local actions = {
		eye = target_interactive.action_eye,
		hand = target_interactive.action_hand,
		bag = target_interactive.action_bag,
		cancel = target_interactive.action_cancel,
	}

	for _, id in ipairs(self.actions_map) do
		if actions[id] then
			local off = get_offset(i)
			local dir = -player.body.dir
			local pspawn = player.spawn_point_action_controls.pos
			local x = pspawn.x + (off.x * dir)
			local y = pspawn.y + off.y
			local e = self.pool_empty[self.current]

			if e then
				e:remove("empty_action")
				:assemble(UI.action, self.sheets[id])
				:give("id", "action_" .. id)
				:give("position", vec2:new(x, y))
				:give("color", Palette.get("ui_not_hovered", 0), Palette.get("ui_not_hovered"))
				:give("animation", true)
				:give("target_interactive", target_interactive)
				:give("tween_dur", self.dur)
				:give("on_click", 1, function()
					if id == "cancel" then
						self.world:emit("interact_cancelled", player, target_interactive)
					else
						self.world:emit("action_interacted_" .. id, target_interactive, player)
					end
				end)
				:give("color_fade_in", self.dur, nil, function()
					e:give("hoverable")
					:give("clickable")
				end)

				i = i + 1
				self.current = self.current + 1
			end
		end
	end

	self.world:emit("sort_z")
end

function ActionControls:hide_action_controls()
	for _, e in ipairs(self.pool_actions) do
		e:remove("animation")
		:remove("target_interactive")
		:remove("hoverable")
		:remove("clickable")
		:give("color_fade_out", e.tween_dur.dur, nil, function()
			e:remove("tween_dur")
			:remove("on_click")
			:remove("color")
			:remove("bounding_box")
			:remove("animation")
			:remove("sprite")
			:remove("position")
		end)
	end
end

function ActionControls:toggle_action_controls(bool)
	for _, e in ipairs(self.pool_actions) do
		if bool then
			e:remove("hidden")
			:give("color_fade_in", e.tween_dur.dur, nil, function()
				e:give("hoverable")
				:give("clickable")
			end)
		else
			e:remove("hoverable")
			:remove("clickable")
			:give("color_fade_out", e.tween_dur.dur, nil, function()
				e:give("hidden")
			end)
		end
	end
end

function ActionControls:interactive_interacted(player, target_interactive)
	self:show_action_controls(player, target_interactive)
end

function ActionControls:action_interacted_eye(target_interactive, player)
	!if _ASSERT then
	Assert.is(target_interactive, Types.T_ENTITY)
	!end

	local id = target_interactive.id.id
	print("eye", id)

	self:toggle_action_controls(false)
end

function ActionControls:action_interacted_hand(target_interactive, player)
	!if _ASSERT then
	Assert.is(target_interactive, Types.T_ENTITY)
	!end

	local id = target_interactive.id.id
	print("hand", id)

	self:toggle_action_controls(false)
end

function ActionControls:action_interacted_bag(target_interactive, player)
	!if _ASSERT then
	Assert.is(target_interactive, Types.T_ENTITY)
	!end

	local id = target_interactive.id.id
	print("bag", id)

	self:toggle_action_controls(false)
end

function ActionControls:interact_cancelled()
	self:hide_action_controls()
end

function ActionControls:closed_inventory()
	self:toggle_action_controls(true)
end

function ActionControls:destroyed_dialogue(id)
	self:toggle_action_controls(true)
end

return ActionControls
