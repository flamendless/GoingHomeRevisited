local Concord = require("modules.concord.concord")

local ActionControls = Concord.system({
	pool_actions = {"id", "tween_dur", "on_click", "color", "bounding_box"},
})

!(
local dist = 32
local gap = 60
local start = -30
local _offsets = {}

for i = 0, 3 do
	local n = (start) + gap * i
	local x = math.sin(math.rad(n)) * dist
	local y = -math.cos(math.rad(n)) * dist

	local t = {x, y}
	table.insert(_offsets, t)
end
)

!!local offsets = _offsets

local function get_offset(i)
	local off = offsets[i]

	return vec2:new(off[1], off[2])
end

function ActionControls:init(world)
	self.world = world
end

function ActionControls:show_action_controls(player, target_item)
	local i = 1
	local item_pos = target_item.position.pos

	for _, e in ipairs(self.pool_actions) do
		local id = e.id.id
		local valid = target_item[id]

		if valid and not e.color_fade_out then
			local off = get_offset(i)
			local pos = e.position.pos
			local dir = -player.body.dir
			local pspawn = player.spawn_point_action_controls.pos

			pos.x = pspawn.x + (off.x * dir)
			pos.y = pspawn.y + off.y

			e:remove("hidden")
			:give("animation", true)
			:give("color_fade_in", e.tween_dur.dur, nil, function()
				e:give("hoverable")
				:give("clickable")
			end)
			:give("target_item", target_item)

			i = i + 1
		end
	end

	self.world:emit("sort_z")
end

function ActionControls:hide_action_controls()
	for _, e in ipairs(self.pool_actions) do
		e:remove("animation")
		:remove("target_item")
		:remove("hoverable")
		:remove("clickable")
		:give("color_fade_out", e.tween_dur.dur, nil, function()
			e:give("hidden")
		end)
	end
end

function ActionControls:item_interacted(player, target_item)
	self:show_action_controls(player, target_item)
end

function ActionControls:action_interacted_eye(target_item)
	!if _ASSERT then
	Assert.is(target_item, Types.T_ENTITY)
	!end

	local id = target_item.id.id
	print("eye", id)
end

function ActionControls:action_interacted_hand(target_item)
	!if _ASSERT then
	Assert.is(target_item, Types.T_ENTITY)
	!end

	local id = target_item.id.id
	print("hand", id)
end

function ActionControls:action_interacted_bag(target_item)
	!if _ASSERT then
	Assert.is(target_item, Types.T_ENTITY)
	!end

	local id = target_item.id.id
	print("bag", id)
end

function ActionControls:interact_cancelled()
	self:hide_action_controls()
end

function ActionControls:displayed_dialogue()
	for _, e in ipairs(self.pool_actions) do
		e:give("color_fade_out", e.tween_dur.dur)
		:remove("hoverable")
		:remove("clickable")
	end
end

function ActionControls:destroyed_dialogue()
	for _, e in ipairs(self.pool_actions) do
		e:give("hoverable")
		:give("clickable")
	end
end

function ActionControls:fading_out_dialogue()
	for _, e in ipairs(self.pool_actions) do
		e:give("color_fade_in", e.tween_dur.dur)
	end
end

return ActionControls
