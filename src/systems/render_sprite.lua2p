local Concord = require("modules.concord.concord")

local insert = table.insert
local remove = table.remove

local RenderSprite = Concord.system({
	pool = {"position", "sprite"},
	pool_z = {"position", "sprite", "z_index"},
	pool_ui = {"position", "sprite", "ui_element"},
})

function RenderSprite:init()
	self.custom_pool_z = {}

	self.pool_z.onEntityAdded = function(pool, e)
		insert(self.custom_pool_z, e)
		table.insertion_sort(self.custom_pool_z, function(a, b)
			local a_z = a.z_index.z
			local b_z = b.z_index.z

			return a_z < b_z
		end)
	end

	self.pool_z.onEntityRemoved = function(pool, e)
		for i = #self.custom_pool_z, 1, -1 do
			if e == self.custom_pool_z[i] then
				remove(self.custom_pool_z, i)
				break
			end
		end
	end
end

function RenderSprite:sort_z()
	table.stable_sort(self.custom_pool_z, function(a, b)
		local a_pos = a.position.pos.y
		local b_pos = b.position.pos.y

		return a_pos < b_pos
	end)
end

function RenderSprite:internal_draw(e)
	local hidden = e.hidden
	if not hidden then
		local pos = e.position
		local quad = e.quad
		local color = e.color
		local sprite = e.sprite
		local transform = e.transform
		local quad_transform = e.quad_transform
		local animation_data = e.animation_data

		love.graphics.setColor(1, 1, 1, 1)
		if color then
			love.graphics.setColor(e.color.color)
		end

		local rotation, sx, sy, ox, oy
		if transform then
			rotation = transform.rotation
			sx = transform.sx
			sy = transform.sy

			if animation_data then
				if transform.ox == 0.5 then
					ox = animation_data.frame_width/2
				elseif transform.ox == 1 then
					ox = animation_data.frame_width
				else
					ox = transform.ox
				end

				if transform.oy == 0.5 then
					oy = animation_data.frame_height/2
				elseif transform.oy == 1 then
					oy = animation_data.frame_height
				else
					oy = transform.oy
				end
			else
				if transform.ox == 0.5 then
					ox = sprite.sprite:getWidth()/2
				else
					ox = transform.ox
				end

				if transform.oy == 0.5 then
					oy = sprite.sprite:getHeight()/2
				else
					oy = transform.oy
				end
			end
		end

		if quad then
			if quad_transform then
				rotation = quad_transform.rotation
				sx = quad_transform.sx
				sy = quad_transform.sy
				ox = quad_transform.ox
				oy = quad_transform.oy
			end
			--TODO implement camera_bounds drawing
			love.graphics.draw(sprite.sprite, quad.quad, pos.pos.x, pos.pos.y, rotation, sx, sy, ox, oy)
		else
			love.graphics.draw(sprite.sprite, pos.pos.x, pos.pos.y, rotation, sx, sy, ox, oy)
		end
	end
end

function RenderSprite:draw()
	for _, e in ipairs(self.pool) do
		if not e:has("z_index") and not e:has("ui_element") then
			self:internal_draw(e)
		end
	end
end

function RenderSprite:draw_z()
	for _, e in ipairs(self.custom_pool_z) do
		self:internal_draw(e)
	end
end

function RenderSprite:draw_ui()
	for _, e in ipairs(self.pool_ui) do
		self:internal_draw(e)
	end
end

function RenderSprite:check_camera_bounds(camera_bounds, pos)
	local l = camera_bounds.l
	local t = camera_bounds.t
	local w = camera_bounds.w
	local h = camera_bounds.h
	local x = pos.x
	local y = pos.y

	local out_of_bounds = (x < l) or (x > w) or (y < t) or (y > h)
	return out_of_bounds
end

!if not _RELEASE then
function RenderSprite:draw_debug()
	Slab.BeginWindow("ZIndex", {Title = "Z Index"})
	for _, e in ipairs(self.custom_pool_z) do
		if e.bump3d and e.bump3d.id then
			Slab.Text(e.bump3d.id)
			Slab.SameLine()
			Slab.Text("z: " .. e.z_index.z)
		end
	end
	Slab.EndWindow()
end
!end

return RenderSprite
