local Concord = require("modules.concord.concord")

local insert = table.insert
local remove = table.remove

local Helper = require("helper")

local RenderSprite = Concord.system({
	pool = {"position", "sprite"},
	pool_quad = {"position", "sprite", "quad"},
	pool_z = {"position", "sprite", "z_index"},
	pool_ui = {"position", "sprite", "ui_element"},
})

local function draw(sprite, ...)
	-- TODO implement camera_bounds drawing
	love.graphics.draw(sprite, ...)
end

function RenderSprite:init()
	self.custom_pool_z = {}

	self.pool_z.onEntityAdded = function(pool, e)
		insert(self.custom_pool_z, e)
		tablex.insertion_sort(self.custom_pool_z, function(a, b)
			local a_z = a.z_index.z
			local b_z = b.z_index.z

			return a_z < b_z
		end)
	end

	self.pool_z.onEntityRemoved = function(pool, e)
		for i = #self.custom_pool_z, 1, -1 do
			if e == self.custom_pool_z[i] then
				remove(self.custom_pool_z, i)
				break
			end
		end
	end
end

function RenderSprite:sort_z()
	tablex.stable_sort(self.custom_pool_z, function(a, b)
		local a_pos = a.position.pos.y
		local b_pos = b.position.pos.y

		return a_pos < b_pos
	end)
end

function RenderSprite:internal_draw(e)
	local hidden = e.hidden
	if not hidden then
		local pos = e.position.pos
		local quad = e.quad
		local color = e.color
		local sprite = e.sprite
		local transform = e.transform
		local quad_transform = e.quad_transform
		local animation_data = e.animation_data

		love.graphics.setColor(1, 1, 1, 1)

		if color then
			love.graphics.setColor(color.color)
		end

		local rot, sx, sy, ox, oy, kx, ky

		if transform then
			rot = transform.rotation
			ox, oy = Helper.get_offset(e)
			sx = transform.sx
			sy = transform.sy
			kx = transform.kx
			ky = transform.ky
		end

		if quad then
			if quad_transform then
				rot = quad_transform.rotation
				sx = quad_transform.sx
				sy = quad_transform.sy
				ox = quad_transform.ox
				oy = quad_transform.oy
				kx = quad_transform.kx
				ky = quad_transform.ky
			end

			draw(sprite.sprite, quad.quad, pos.x, pos.y, rot, sx, sy, ox, oy, kx, ky)
		else
			draw(sprite.sprite, pos.x, pos.y, rot, sx, sy, ox, oy, kx, ky)
		end
	end
end

function RenderSprite:draw()
	for _, e in ipairs(self.pool) do
		if not e.z_index and not e.ui_element then
			self:internal_draw(e)
		end
	end
end

function RenderSprite:draw_z()
	for _, e in ipairs(self.custom_pool_z) do
		self:internal_draw(e)
	end
end

function RenderSprite:draw_ui()
	for _, e in ipairs(self.pool_ui) do
		self:internal_draw(e)
	end
end

!if not _RELEASE then
local Slab = require("modules.slab")
local DebugFlags = require("debug_flags")
local views = DebugFlags.views

function RenderSprite:draw_debug(l, t, w, h)
	views.z_index = Slab.BeginWindow("ZIndex", {
		Title = "Z Index", IsOpen = views.z_index})

	for _, e in ipairs(self.custom_pool_z) do
		if e.bump3d and e.bump3d.id then
			Slab.Text(e.bump3d.id)
			Slab.SameLine()
			Slab.Text("z: " .. e.z_index.z)
		end
	end

	Slab.EndWindow()
end

function RenderSprite:debug_draw_ui()
	if views.quad_bounds then
		for _, e in ipairs(self.pool_quad) do
			local qx, qy, qw, qh = e.quad.quad:getViewport()
			local pos = e.position.pos
			local qt = e.quad_transform

			local x = pos.x
			local y = pos.y
			local w = qw
			local h = qh

			if qt then
				x = x - qt.ox * qt.sx
				y = y - qt.oy * qt.sy
				w = w * qt.sx
				h = h * qt.sy
			end

			love.graphics.setColor(1, 0, 0, 1)
			love.graphics.rectangle("line", x, y, w, h)
		end
	end
end

!end

return RenderSprite
