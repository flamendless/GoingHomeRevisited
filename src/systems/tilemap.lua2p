local Cartographer = require("modules.cartographer.cartographer")
local Concord = require("modules.concord.concord")

local Tilemap = Concord.system({
	pool = {"id", "tilemap"}
})

function Tilemap:init(world)
	self.world = world
	self.maps = {}

	self.pool.onEntityAdded = function(pool, e)
		local id = e.id.id
		local tilemap = e.tilemap
		local map = Cartographer.load(tilemap.path)
		local tile_size = {map.tilewidth, map.tileheight}
		local map_size = {map.width, map.height}

		tilemap.map = map
		self.maps[id] = map

		e:give("tilemap_data", tile_size, map_size)
	end
end

function Tilemap:setup_colliders(e)
	local map = e.tilemap.map
end

function Tilemap:draw_map()
	for _, e in ipairs(self.pool) do
		local map = e.tilemap.map

		map:draw()

		!if not _RELEASE then
		local data = e.tilemap_data.map_size_px

		love.graphics.setColor(1, 0, 0, 1)
		love.graphics.rectangle("line", 0, 0, data[1], data[2])
		!end
	end
end

!if not _RELEASE then
local Slab = require("modules.slab")
local DebugFlags = require("debug_flags")
local views = DebugFlags.views
local is_open = false
local selected

function Tilemap:draw_debug()
	views.tilemap = Slab.BeginWindow("Tilemap", {
		Title = "Tilemap", IsOpen = views.tilemap})

	for k, v in pairs(self.maps) do
		Slab.Text(k)
		Slab.SameLine()

		if Slab.Button("grid") then
			is_open = not is_open
			selected = v
		end

		Slab.Indent()
		for _, t in ipairs(v.layers) do
			if Slab.CheckBox(t.visible, t.name) then
				t.visible = not t.visible
			end
		end
		Slab.Unindent()
	end

	Slab.EndWindow()

	if not is_open then return end

	love.graphics.push()
	love.graphics.setColor(1, 0, 0, 0.5)
	local size = selected.tilewidth

	for y = 0, selected.height do
		for x = 0, selected.width do
			love.graphics.rectangle("line", x * size, y * size, size, size)
		end
	end
	love.graphics.pop()
end
!end

return Tilemap
