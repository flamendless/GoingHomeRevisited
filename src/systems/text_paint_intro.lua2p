local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Lume = require("modules.lume.lume")

local TextPaintIntro = Concord.system()

function TextPaintIntro:init(world)
	self.world = world
end

function TextPaintIntro:fade_text(e, dur, on_finish)
	@@assert(e.__isEntity)
	@@assert(type(dur) == "number")
	@@assert(type(on_finish) == "function")
	self:generate_paint(e, dur)
	e:remove($_C_HIDDEN)

	local color = e.color
	Flux.to(color.value, dur, {[4] = 1})
		:oncomplete(function()
			Flux.to(color.value, dur, {[4] = 0})
				:oncomplete(on_finish)
		end)
end

function TextPaintIntro:generate_paint(e, dur_in, dur_out)
	@@assert(e.__isEntity)
	@@assert(type(dur_in) == "number")
	@@sassert(dur_out, type(dur_out) == "number")
	local transform = e.transform
	local text = e.static_text.value
	local font = e.font.value
	local str_w = font:getWidth(text)
	local str_h = font:getHeight(text)
	local offset = 96
	local text_pos = e.pos
	local x = text_pos.x + str_w * 0.5
	local y = text_pos.y + str_h * 0.5
	local chance = Lume.randomchoice({true, false})
	local sx = chance == true and -1 or 1

	if transform then
		x = text_pos.x
		y = text_pos.y
	end

	local paint = Concord.entity(self.world)
		:give($_C_ID, "text_paint_intro")
		:give($_C_ANIMATION_DATA, e.animation_data.data)
		:give($_C_UI_ELEMENT)
		:give($_C_POS, x, y)
		:give($_C_ANIMATION, true)
		:give($_C_AUTO_SCALE, str_w + offset, str_h + offset, false)
		:give($_C_TRANSFORM, 0, sx, nil, 0.5, 0.5)
		:give($_C_COLOR, {1, 1, 1, 0})
		:give($_C_LAYER, "text", 1)

	local color = paint.color

	Flux.to(color.value, dur_in, {[4] = 1})
		:oncomplete(function()
			Flux.to(color.value, dur_out or dur_in, {[4] = 0})
				:delay(1)
				:oncomplete(function()
					paint:destroy()
				end)
		end)
end

return TextPaintIntro
