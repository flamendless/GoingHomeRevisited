local Concord = require("modules.concord")

!if _DEV then
local Log = require("modules.log.log")
!end

local Flies = Concord.system({
	pool = {$_C_ID, $_C_BUG, $_C_FLY}
})

function Flies:init(world)
	self.world = world
end

function Flies:generate_flies(n, start_p, min_dist)
	@@assert(type(n) == "number" and n > 0)
	@@assert(start_p:type() == "vec2")
	@@assert(type(min_dist) == "number" and min_dist > 0)
	local sx, sy = start_p:unpack()

	for i = 1, n do
		local angle = love.math.random(-2 * math.pi, 2 * math.pi)
		local p = vec2(sx, sy)
		p:sadd(love.math.random(-min_dist, min_dist), 0)
		p:rotate_around_inplace(angle, start_p)
		local dist = love.math.random(min_dist, min_dist * 1.5)
		local speed = love.math.random(24, 32)
		Concord.entity(self.world)
			:give($_C_ID, "fly" .. i)
			:give($_C_FLY)
			:give($_C_BUG)
			:give($_C_COLOR, {0, 0, 0, 1})
			:give($_C_POINT, 4)
			:give($_C_POS, p:unpack())
			:give($_C_POS_VEC2)
			:give($_C_REF_POS_VEC2, sx, sy)
			:give($_C_ANGLE, dist, angle)
			:give($_C_ANGULAR_SPEED, speed, love.math.random(0, 1) * 2 - 1)
			:give($_C_NO_SHADER)
	end
end

function Flies:update(dt)
	for _, e in ipairs(self.pool) do
		local pos = e.pos
		local pv = e.pos_vec2.value
		local ref = e.ref_pos_vec2.value
		local dist = pv:distance(ref)
		local angle = e.angle
		local a_speed = e.angular_speed
		local radius = angle.radius
		local r = angle.orig_radius/dist
		local dir = r < love.math.random() and -1 or 1

		pos.x = ref.x + radius * a_speed.dir * math.cos(angle.angle)
		pos.y = ref.y + radius * a_speed.dir * math.sin(angle.angle)
		angle.angle = angle.angle + dt * a_speed.dir
		angle.radius = angle.radius + a_speed.speed * dir * dt

		if love.math.random() < 0.15 then
			a_speed.dir = a_speed.dir * -1
		end
	end
end

function Flies:set_flies_visibility(bool)
	@@assert(type(bool) == "boolean")
	!if _DEV then
	if #self.pool == 0 then
		Log.warn("pool is 0")
	end
	!end
	for _, e in ipairs(self.pool) do
		if bool then
			e:remove($_C_HIDDEN)
		else
			e:give($_C_HIDDEN)
		end
	end
end

return Flies
