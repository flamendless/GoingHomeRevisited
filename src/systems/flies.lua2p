local Concord = require("modules.concord")

!if _DEV then
local Log = require("modules.log.log")
!end

local random = love.math.random
local cos = math.cos
local sin = math.sin
local pi = math.pi

local Flies = Concord.system({
	pool = {"id", "bug", "fly"}
})

function Flies:init(world)
	self.world = world
end

function Flies:generate_flies(n, start_p, min_dist)
	@@assert(type(n) == "number" and n > 0)
	@@assert(start_p:type() == "vec2")
	@@assert(type(min_dist) == "number" and min_dist > 0)
	local sx, sy = start_p:unpack()

	for i = 1, n do
		local angle = random(-2 * pi, 2 * pi)
		local p = vec2(sx, sy)
		p:sadd(random(-min_dist, min_dist), 0)
		p:rotate_around_inplace(angle, start_p)
		local dist = random(min_dist, min_dist * 1.5)
		local speed = random(24, 32)
		Concord.entity(self.world)
			:give("id", "fly" .. i)
			:give("fly")
			:give("bug")
			:give("color", {0, 0, 0, 1})
			:give("point", 4)
			:give("pos", p:unpack())
			:give("pos_vec2")
			:give("ref_pos_vec2", sx, sy)
			:give("angle", dist, angle)
			:give("angular_speed", speed, random(0, 1) * 2 - 1)
			:give("no_shader")
	end
end

function Flies:update(dt)
	for _, e in ipairs(self.pool) do
		local pos = e.pos
		local pv = e.pos_vec2.value
		local ref = e.ref_pos_vec2.value
		local dist = pv:distance(ref)
		local angle = e.angle
		local a_speed = e.angular_speed
		local radius = angle.radius
		local r = angle.orig_radius/dist
		local dir = r < random() and -1 or 1

		pos.x = ref.x + radius * a_speed.dir * cos(angle.angle)
		pos.y = ref.y + radius * a_speed.dir * sin(angle.angle)
		angle.angle = angle.angle + dt * a_speed.dir
		angle.radius = angle.radius + a_speed.speed * dir * dt

		if random() < 0.15 then
			a_speed.dir = a_speed.dir * -1
		end
	end
end

function Flies:set_flies_visibility(bool)
	@@assert(type(bool) == "boolean")
	!if _DEV then
	if #self.pool == 0 then
		Log.warn("pool is 0")
	end
	!end
	for _, e in ipairs(self.pool) do
		if bool then
			e:remove("hidden")
		else
			e:give("hidden")
		end
	end
end

return Flies
