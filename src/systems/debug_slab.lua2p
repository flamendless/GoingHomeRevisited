local Concord = require("modules.concord.concord")
local Slab = require("modules.slab")
local Timer = require("modules.hump.timer")

local format = string.format

local DebugSlab = Concord.system({
	pool = {"debug_slab"},
})

local world
local ent_count = 0
local ent_id = {}
local all_animation = {}
local show_inspector = false
local inspect_e = nil

function DebugSlab:init()
	!if RELEASE then
	assert("You are in Release build")
	!end

	world = self:getWorld()
	self.pool.onEntityAdded = function(pool, e)
		local id = e:get("debug_slab").id
		local multi = e:get("multiple_animation_data")
		local pos = e:get("position")
		local collider = e:get("collider")
		local sprite = e:get("sprite")

		assert(ent_id[id] == nil, format("'%s' id was already added", id))
		ent_id[id] = e

		if pos and (collider or sprite) then
			local w, h
			if collider then
				w = collider.size.x
				h = collider.size.y
			elseif sprite then
				w = sprite.sprite:getWidth()
				h = sprite.sprite:getHeight()
			end

			e:give("bounding_box", pos.pos.x, pos.pos.y, w, h)
			e:give("bounding_box_color", {1, 0, 0, 0})
		end

		if multi then
			if all_animation[id] == nil then
				all_animation[id] = {}
			end
			for k, v in pairs(multi.data) do
				all_animation[id][k] = k
			end
		end

		ent_count = ent_count + 1
	end

	self.pool.onEntityRemoved = function(pool, e)
		local id = e:get("debug_slab").id
		ent_id[id] = nil
		ent_count = ent_count - 1
	end
end

function DebugSlab:deinit()
	world = nil
	ent_count = 0
	for k, v in pairs(ent_id) do
		ent_id[k] = nil
	end
	for k, v in pairs(all_animation) do
		all_animation[k] = nil
	end
end

local hg_on = 0.25
local hg_off = 0.35
local hg_count = 5

function DebugSlab:draw_slab()
	if ent_count == 0 then return end
	Slab.BeginWindow("EntityDebug", { Title = "Entity List" })
	Slab.Text("Entity Count (debuggable): " .. ent_count)
	for id, e in pairs(ent_id) do
		local bounding_box_color = e:get("bounding_box_color")
		if Slab.Button("Highlight", { Disabled = not bounding_box_color }) then
			if bounding_box_color then
				Timer.every(hg_on, function()
					bounding_box_color.color = { 1, 0, 1, 1 }
				end, hg_count)
				Timer.every(hg_off, function()
					bounding_box_color.color = { 1, 0, 0, 0 }
				end, hg_count)
			end
		end

		Slab.SameLine()
		if Slab.Button("View") then
			show_inspector = true
			inspect_e = e
		end

		Slab.SameLine()
		Slab.Text(id)
	end
	Slab.EndWindow()

	if show_inspector then
		self:draw_inspector()
	end
end

function DebugSlab:draw_inspector()
	local e = inspect_e
	local id = inspect_e:get("debug_slab").id
	local sprite = inspect_e:get("sprite")
	local pos = inspect_e:get("position")
	local z_index = inspect_e:get("z_index")
	local animation = inspect_e:get("animation")
	local collider = inspect_e:get("collider")
	local speed = inspect_e:get("speed")
	local gravity = inspect_e:get("gravity")
	local body = inspect_e:get("body")

	Slab.BeginWindow("Inspector", { Title = "Inspector" })
	Slab.Text(id)

	if sprite then
		Slab.Image("sprite_" .. id, { Image = sprite.sprite })
	end

	if pos then
		local str_pos = format("Position: (%i, %i)", pos.pos.x, pos.pos.y)
		Slab.Text(str_pos)
	end

	if z_index then
		Slab.Text("z-index: " .. z_index.z)
	end

	if animation then
		Slab.Text("Current Animation: " .. animation.current_tag)
		if all_animation[id] then
			if Slab.BeginComboBox("Player Animation", { Selected = animation.current_tag }) then
				for k, v in pairs(all_animation[id]) do
					if Slab.TextSelectable(k) then
						e:give("override_animation")
						world:emit("switch_animation_tag", k)
					end
				end
				Slab.EndComboBox()
			end
		end
		if e:has("override_animation") then
			Slab.SameLine()
			if Slab.Button("stop") then
				e:remove("override_animation")
			end
		end
	end

	if collider then
		local size = collider.size
		local str_size = format("(%i, %i)", size.x, size.y)
		Slab.Text("Size: " .. str_size)
	end

	if speed then
		speed = speed.speed
		Slab.Text("Speed: "  .. speed)
	end

	if gravity then
		gravity = gravity.gravity
		Slab.Text("Gravity: "  .. gravity)
	end

	if body then
		if body.kind == "dynamic" then
			if not e:has("override_animation") then
				Slab.Text("Moving: " .. tostring(body.dx ~= 0))
				Slab.Text("Direction: " .. body.dir)
			else
				Slab.Text("Moving: (overriden)")
				Slab.Text("Direction: (overriden)")
			end
		end
	end

	if Slab.Button("Close") then
		show_inspector = false
		inspect_e = nil
	end

	Slab.EndWindow()
end

return DebugSlab
