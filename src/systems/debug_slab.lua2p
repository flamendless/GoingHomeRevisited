local Concord = require("modules.concord.concord")
local Slab = require("modules.slab")
local Timer = require("modules.hump.timer")

local format = string.format

local DebugSlab = Concord.system({
	pool = {"debug_slab"},
})

local world
local ent_count = 0
local ent_id = {}
local all_animation = {}

function DebugSlab:init()
	!if RELEASE then
	assert("You are in Release build")
	!end

	world = self:getWorld()
	self.pool.onEntityAdded = function(pool, e)
		local id = e:get("debug_slab").id
		local multi = e:get("multiple_animation_data")
		local pos = e:get("position")
		local collider = e:get("collider")
		local sprite = e:get("sprite")

		assert(ent_id[id] == nil, format("'%s' id was already added", id))
		ent_id[id] = e

		local w, h
		if collider then
			w = collider.size.x
			h = collider.size.y
		elseif sprite then
			w = sprite.sprite:getWidth()
			h = sprite.sprite:getHeight()
		end

		e:give("bounding_box", pos.pos.x, pos.pos.y, w, h)
		e:give("bounding_box_color", {1, 0, 0, 0})

		if multi then
			if all_animation[id] == nil then
				all_animation[id] = {}
			end
			for k, v in pairs(multi.data) do
				all_animation[id][k] = k
			end
		end

		ent_count = ent_count + 1
	end

	self.pool.onEntityRemoved = function(pool, e)
		local id = e:get("debug_slab").id
		ent_id[id] = nil
		ent_count = ent_count - 1
	end
end

function DebugSlab:deinit()
	world = nil
	ent_count = 0
	for k, v in pairs(ent_id) do
		ent_id[k] = nil
	end
	for k, v in pairs(all_animation) do
		all_animation[k] = nil
	end
end

local hg_on = 0.25
local hg_off = 0.35
local hg_count = 5

function DebugSlab:draw_slab()
	Slab.BeginWindow("EntityDebug", { Title = "Entity List" })
	Slab.Text("Entity Count (debuggable): " .. ent_count)
	for id, e in pairs(ent_id) do
		if Slab.Button(id) then
			local pos = e:get("position")
			local collider = e:get("collider")
			Timer.every(hg_on, function()
				local color = e:get("bounding_box_color")
				color.color = { 1, 0, 1, 1 }
			end, hg_count)
			Timer.every(hg_off, function()
				local color = e:get("bounding_box_color")
				color.color = { 1, 0, 0, 0 }
			end, hg_count)
		end
	end
	Slab.EndWindow()

	for _, e in ipairs(self.pool) do
		local d = e:get("debug_slab")
		if d.flag_full == false then return end

		local id = d.id
		Slab.BeginWindow(id, { Title = id })

		local animation = e:get("animation")
		if animation then
			Slab.Text("Current Animation: " .. animation.current_tag)
			if Slab.BeginComboBox("Player Animation", { Selected = animation.current_tag }) then
				for k, v in pairs(all_animation[id]) do
					if Slab.TextSelectable(k) then
						e:give("override_animation")
						world:emit("switch_animation_tag", k)
					end
				end
				Slab.EndComboBox()
			end
			if e:has("override_animation") then
				Slab.SameLine()
				if Slab.Button("stop") then
					e:remove("override_animation")
				end
			end
		end

		local pos = e:get("position")
		if pos then
			local pos = pos.pos
			local str_pos = format("(%i, %i)", pos.x, pos.y)
			Slab.Text("Position: " .. str_pos)
		end

		local collider = e:get("collider")
		if collider then
			local size = collider.size
			local str_size = format("(%i, %i)", size.x, size.y)
			Slab.Text("Size: " .. str_size)
		end

		local speed = e:get("speed")
		if speed then
			speed = speed.speed
			Slab.Text("Speed: "  .. speed)
		end

		local gravity = e:get("gravity")
		if gravity then
			gravity = gravity.gravity
			Slab.Text("Gravity: "  .. gravity)
		end

		local body = e:get("body")
		if body then
			if body.kind == "dynamic" then
				if not e:has("override_animation") then
					Slab.Text("Moving: " .. tostring(body.dx ~= 0))
					Slab.Text("Direction: " .. body.dir)
				else
					Slab.Text("Moving: (overriden)")
					Slab.Text("Direction: (overriden)")
				end
			end
		end

		Slab.EndWindow()
	end
end

return DebugSlab
