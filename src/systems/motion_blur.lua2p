local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")

local Canvas = require("canvas")

local MotionBlur = Concord.system({
	pool = {"position", "motion_blur"}
})

function MotionBlur:init()
	self.canvas = nil
	self.shader_code = love.graphics.newShader("shaders/motion_blur.glsl")
	-- self.shader_code = love.graphics.newShader("shaders/test.glsl")
	self.flag_process = false
end

function MotionBlur:set_target_canvas(target_canvas)
	!if _ASSERT then
	assert(target_canvas:type() == "Canvas", "Passed argument must be of type 'Canvas'")
	!end
	self.canvas = target_canvas
	self.shader_code:send("samplesF", 4.0)
	self.shader_code:send("radius", 8.0)

	-- self.shader_code:send("canvas_size", {
	-- 	target_canvas.width, target_canvas.height
	-- })
	-- self.shader_code:send("quality", 8)
end

function MotionBlur:set_shader_process(flag)
	self.flag_process = flag
end

function MotionBlur:shader_send_update(dt)
	if not self.canvas or not self.flag_process then return end
	for _, e in ipairs(self.pool) do
		local pos = e:get("position")
		self.shader_code:send("dir", {
			-pos.pos.x,
			pos.pos.y
		})

		-- self.shader_code:send("mv", {
		-- 	-pos.pos.x,
		-- 	pos.pos.y
		-- })
	end
end

function MotionBlur:post_process_draw()
	if not self.canvas or not self.flag_process then return end
	love.graphics.setShader(self.shader_code)
	self.canvas:render()
	love.graphics.setShader()
end

return MotionBlur
