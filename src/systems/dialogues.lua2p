local Concord = require("modules.concord.concord")
local TLE = require("modules.tle.timeline")

local DialoguesSrc = require("dialogues")
local Enums = require("enums")
local Inputs = require("inputs")
local ListByID = require("ctor.list_by_id")
local Resources = require("resources")
local Palette = require("palette")

local Dialogues = Concord.system({
	pool = {$_C_DIALOGUE_ITEM, $_C_TEXT_T},
	pool_choice = {
		constructor = ListByID,
		id = $_LIST_DIALOGUE_CHOICES,
	},
})

local UI = require("assemblages.ui")
local c_hc = Palette.colors.hovered_choice
local PAD = 32

function Dialogues:init(world)
	self.world = world
	self.is_waiting = false
	self.world:emit("create_dialogue_key")
	self.pool_choice.onAdded = function(pool, e)
		if e.item_id.value ~= Enums.item.choice then
			self.pool_choice:remove(e)
		end
	end
end

function Dialogues:create_tle()
	self.timeline = TLE.Do(function()
		while true do
			local text_t = self.e_dialogue.text_t
			local dialogues = text_t and text_t.value
			local current_line = dialogues and dialogues[text_t.current_index]

			if current_line then
				text_t.current_index = text_t.current_index + 1
				local should_pause = true
				local bool, signal, handle_self = DialoguesSrc.check_signal(current_line)

				if bool then
					self.world:emit(signal, self.e_dialogue, dialogues)
					current_line = ""
					text_t.max_n = text_t.max_n - 1

					if text_t.current_index > text_t.max_n then
						should_pause = false
					end
				end

				if handle_self then
					self.world:emit("show_key", "dialogue", true)
					self.e_dialogue:remove($_C_TEXT_CAN_PROCEED)
						:remove($_C_HIDDEN)
						:give($_C_TEXT, current_line)
				end

				if should_pause then
					self.timeline:Pause()
				end
			elseif text_t and (text_t.current_index > text_t.max_n) then
				self:on_dialogue_reached_end()
			else
				self.timeline:Pause()
			end
		end
	end)
end

function Dialogues:create_e_dialogue()
	local camera = self.world:getResource("camera")
	@@assert(camera, "camera resource should be set by now")
	local l, _, w, h = camera:getWindow()
	local x = l + PAD
	local y = h - h * 0.15 * 0.5
	self.e_dialogue = Concord.entity(self.world)
		:give($_C_ID, "dialogue_holder")
		:give($_C_FONT, "ui")
		:give($_C_COLOR, Palette.get("ui_dialogue"))
		:give($_C_TEXT, "")
		:give($_C_DIALOGUE_ITEM)
		:give($_C_UI_ELEMENT)
		:give($_C_TRANSFORM, 0, 1, 1, 0, 0.5)
		:give($_C_LAYER, "dialogue", 3)
		:give($_C_REFLOWPRINT, w - PAD * 2, "left")
		:give($_C_POS, x, y)
	self:create_tle()
end

function Dialogues:update(dt)
	if self.is_waiting then return end
	if not self.e_dialogue then
		self:create_e_dialogue()
	end
	if Inputs.released("interact") and #self.pool_choice == 0 then
		self:proceed_dialogue()
	end
end

function Dialogues:wait_dialogue(bool)
	@@assert(type(bool) == "boolean")
	self.is_waiting = bool
end

function Dialogues:spawn_dialogue(dialogues_t, main, sub)
	@@assert(type(dialogues_t) == "table")
	@@assert(type(main) == "string")
	@@assert(type(sub) == "string")
	self.e_dialogue:give($_C_DIALOGUE_META, main, sub)
		:give($_C_TEXT_T, dialogues_t)
	self:populate_choices(dialogues_t)
	if DialoguesSrc.validate(dialogues_t) then
		self.world:emit("on_interact_or_inventory")
	end
	self.timeline:Unpause()
end

function Dialogues:spawn_dialogue_ex(dialogue_t, signal_after, ...)
	@@assert(type(dialogue_t) == "table")
	@@assert(#dialogue_t ~= 0)
	@@sassert(signal_after, type(signal_after) == "string")
	self:spawn_dialogue(dialogue_t, "_none", "_none")
	if signal_after then
		self.e_dialogue:give($_C_ON_DIALOGUE_END, signal_after, 0, ...)
	end
end

function Dialogues:on_dialogue_reached_end(e)
	if self.is_waiting then
		self.timeline:Pause()
		return
	end

	e = e or self.e_dialogue
	if e.item_id then
		self.world:emit("destroy_list", "dialogue_choice")
	end

	if e.has_choices then
		e:give($_C_HIDDEN)
		self:show_choices()
	else
		local on_d_end = e.on_dialogue_end
		if on_d_end then
			self.world:emit(on_d_end.signal, unpack(on_d_end.args))
		else
			self.world:emit("on_leave_interact_or_inventory")
			self.world:emit("set_system_to", "inventory", true)
			e:remove($_C_DIALOGUE_META)
				:remove($_C_TEXT_T)
				:remove($_C_TEXT)
				:remove($_C_ITEM_ID)
				:remove($_C_HAS_CHOICES)
			self.e_dialogue:remove($_C_DIALOGUE_META)
				:remove($_C_TEXT_T)
				:remove($_C_TEXT)
				:remove($_C_ITEM_ID)
				:remove($_C_HAS_CHOICES)
		end
		self.world:emit("show_key", "dialogue", false)
	end
	self.timeline:Pause()
end

function Dialogues:update_dialogues(new_dialogues_t)
	@@assert(type(new_dialogues_t) == "table")
	if not self.e_dialogue.item_id then
		self.e_dialogue:give($_C_TEXT_T, new_dialogues_t)
		self.timeline:Unpause()
	else
		local d = self.e_dialogue.dialogue_meta
		self:spawn_dialogue(new_dialogues_t, d.main, d.sub)
	end
end

function Dialogues:proceed_dialogue()
	for _, e in ipairs(self.pool) do
		if e.text_skipped then
			e:remove($_C_TEXT_SKIPPED)
		elseif e.text_can_proceed then
			local rfp = e.reflowprint
			rfp.dt = 0
			rfp.current = 1
			self.timeline:Unpause()
		end
	end
end

function Dialogues:show_choices()
	local d = self.e_dialogue.dialogue_meta
	local l, _, _, h = self.world:getResource("camera"):getWindow()
	local c = self.e_dialogue.has_choices
	local font = Resources.data.fonts.ui
	local y = h - h * 0.15 * 0.5
	local p2 = PAD * 2
	local prev_x = l + p2
	local choice_t = self.e_dialogue.text_t.value.choices
	self.world:emit("create_list_group", $_LIST_DIALOGUE_CHOICES, false, #choice_t)

	for _, str in ipairs(c.value) do
		local id = "choice_" .. str
		local fw = font:getWidth(str)
		local x = prev_x
		prev_x = x + fw + p2
		for _, v in ipairs(choice_t) do
			if v[1] == str then
				choice_t = tablex.copy(v)
				table.remove(choice_t, 1)
				break
			end
		end

		Concord.entity(self.world):assemble(UI.choice,
				id, str, choice_t, x, y)
			:give($_C_REFLOWPRINT, fw + PAD * 2, "left")
			:give($_C_DIALOGUE_META, d.main, d.sub)
			:give($_C_LIST_ITEM)
			:give($_C_LIST_GROUP, $_LIST_DIALOGUE_CHOICES)
		self:populate_choices(choice_t)
	end

	self.world:emit("set_focus_list", $_LIST_DIALOGUE_CHOICES)
end

function Dialogues:populate_choices(t)
	@@assert(type(t) == "table")
	local choices = {}
	if t.choices then
		for _, v in ipairs(t.choices) do
			table.insert(choices, v[1])
		end
	end
	if #choices ~= 0 then
		self.e_dialogue:give($_C_HAS_CHOICES, unpack(choices))
	end
end

function Dialogues:cleanup()
	self.e_dialogue:destroy()
	for _, e in ipairs(self.pool) do
		e:destroy()
	end
end

Dialogues[$_SIGNAL_LIST_UPDATE .. $_LIST_DIALOGUE_CHOICES] = function(self, e_hovered)
	if not self.pool_choice:has(e_hovered) then return end
	self.world:emit("lerp_color", e_hovered, c_hc, 0.25, "circin")
end

Dialogues[$_SIGNAL_LIST_REMOVE .. $_LIST_DIALOGUE_CHOICES] = function(self, e_hovered)
	if not self.pool_choice:has(e_hovered) then return end
	self.world:emit("lerp_color", e_hovered, Palette.get("ui_dialogue"), 0.25, "circin")
end

Dialogues[$_SIGNAL_LIST_INTERACT .. $_LIST_DIALOGUE_CHOICES] = function(self, e_hovered)
	local t = e_hovered.text_t
	local text_t = t.value
	if #text_t == 0 and not text_t.choices then
		self:on_dialogue_reached_end(e_hovered)
	else
		local str = text_t[1]
		local proceed = true
		if str then
			local bool, signal, handle_self = DialoguesSrc.check_signal(str)

			if bool then
				proceed = false
				--entity, table of next dialogues, chosen text
				self.world:emit(signal, e_hovered, text_t, e_hovered.text.value)
				if handle_self then
					t.current_index = t.current_index + 1
					local next_str = text_t[t.current_index]
					if not next_str then
						self:on_dialogue_reached_end(e_hovered)
					end
				end
			end
		end

		self.world:emit("destroy_list", "dialogue_choice")
		self.world:emit("destroy_list", $_LIST_DIALOGUE_CHOICES)
		if proceed then
			local d = e_hovered.dialogue_meta
			self:spawn_dialogue(text_t, d.main, d.sub)
		end
		if not text_t.choices then
			self.e_dialogue:remove($_C_HAS_CHOICES)
		end
	end
end

return Dialogues
