local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Lume = require("modules.lume.lume")

local TextPaint = Concord.system({
	pool = {"text_paint_data"}
})

function TextPaint:init(world)
	self.world = world

	self.pool.onEntityAdded = function(pool, e)
		self.paint_data = e.text_paint_data.data
	end
end

function TextPaint:show_text_paint(e, dur)
	!if _ASSERT then
	Assert.should_entity(e)
	Assert.should_exists(e.text_with_paint)
	Assert.should_number(dur)
	!end

	self:show_paint(e, dur)
	e:remove("hidden")

	Flux.to(e.color.color, dur, { [4] = 1 })
end

function TextPaint:fade_text_paint(e, dur, on_complete)
	!if _ASSERT then
	Assert.should_entity(e)
	Assert.should_exists(e.text_with_paint)
	Assert.should_entity(e.text_with_paint.paint)
	Assert.should_exists(e.text_with_paint.paint.paint)
	Assert.should_number(dur)
	Assert.safe_should_function(on_complete)
	!end

	local f = Flux.to(e.color.color, dur, { [4] = 0 })
	f:oncomplete(function()
			if on_complete then
				on_complete()
			end
			e:give("hidden")
			e:destroy()
		end)
	self:fade_paint(e.text_with_paint.paint, dur)
end

function TextPaint:show_paint(e, dur_in)
	!if _ASSERT then
	Assert.should_entity(e)
	Assert.should_number(dur_in)
	!end

	local transform = e.transform
	local text = e.static_text.text
	local font = e.font.font
	local str_w = font:getWidth(text)
	local str_h = font:getHeight(text)
	local offset = 96
	local text_pos = e.position.pos
	local pos = vec2:new(text_pos.x + str_w/2, text_pos.y + str_h/2)

	if transform then
		pos.x = text_pos.x
		pos.y = text_pos.y
	end

	local chance = Lume.randomchoice({true, false})
	local sx = chance == true and -1 or 1

	local paint = Concord.entity(self.world)
		:give("animation_data", self.paint_data)
		:give("ui_element")
		:give("position", pos)
		:give("animation", true)
		:give("auto_scale", str_w + offset, str_h + offset, false)
		:give("transform", 0, sx, nil, 0.5, 0.5)
		:give("color", {1, 1, 1, 0})
		:give("paint")

	e.text_with_paint.paint = paint

	Flux.to(paint.color.color, dur_in, { [4] = 1 })
end

function TextPaint:fade_paint(paint, dur)
	!if _ASSERT then
	Assert.should_entity(paint)
	Assert.should_exists(paint.paint)
	Assert.should_number(dur)
	!end

	Flux.to(paint.color.color, dur, { [4] = 0 })
		:oncomplete(function()
			paint:destroy()
		end)
		:delay(1)
end

return TextPaint
