local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Lume = require("modules.lume.lume")

local TextPaint = Concord.system({
	pool_data = {"text_paint_data"},
	pool_text = {"text_with_paint"},
	pool_paint = {"paint"},
})

local def_delay_paint = 1
local def_delay_task = 1
local dur_flash = 0.15

local function flash_to_color(source, target_a, target_b, dur, count, current)
	local n = current or 0

	Flux.to(source, dur, {
			[1] = target_a[1],
			[2] = target_a[2],
			[3] = target_a[3],
		})
		:oncomplete(function()
			if n <= count then
				n = n + 1
				flash_to_color(source, target_b, target_a, dur, count, n)
			end
		end)
end

function TextPaint:init(world)
	self.world = world
	self.paint_data = {}

	self.pool_data.onAdded = function(pool, e)
		local tpd = e.text_paint_data
		local id = tpd.id
		local data = tpd.data
		@@assert(type(data) == "table")
		@@assert(data.spritesheet:type() == "Image")
		@@assert(type(data.frames) == "table")
		@@assert(type(data.rows_count) == "number")
		@@assert(type(data.columns_count) == "number")
		@@sassert(data.n_frames, type(data.n_frames) == "number")
		@@sassert(data.start_frame, data.start_frame >= 1 and data.start_frame <= data.n_frames)
		@@assert(type(data.delay) == "number" or type(data.delay) == "table")
		self.paint_data[id] = data
	end
end

function TextPaint:show_text_paint(e, dur, widest)
	@@assert(e.__isEntity)
	@@assert(e.text_with_paint)
	@@assert(type(dur) == "number")
	@@sassert(widest, type(widest) == "string")
	self:show_paint(e, dur, widest)
	e:remove("hidden")
	Flux.to(e.color.color, dur, {[4] = 1})
end

function TextPaint:fade_text_paint(e, dur, on_complete)
	@@assert(e.__isEntity)
	@@assert(e.text_with_paint)
	@@assert(e.text_with_paint.paint.paint)
	@@assert(type(dur) == "number")
	@@sassert(on_complete, type(on_complete) == "function")
	local delay = 0

	if e.task then
		local target = e.task.color
		local original = {unpack(e.color.color)}

		flash_to_color(e.color.color, target, original, dur_flash, 2)
		delay = def_delay_task
	end

	Flux.to(e.color.color, dur, {[4] = 0})
		:delay(delay)
		:oncomplete(function()
			if on_complete then
				on_complete()
			end

			e:give("hidden")
			e:destroy()
		end)
	self:fade_paint(e.text_with_paint.paint, dur, delay)
end

function TextPaint:show_paint(e, dur_in, widest)
	@@assert(e.__isEntity)
	@@assert(type(dur_in) == "number")
	@@sassert(widest, type(widest) == "string")
	@@sassert(e.static_text, e.static_text ~= nil)
	@@sassert(e.text, e.text ~= nil)
	local str
	local text = e.text
	local static_text = e.static_text

	if static_text then str = static_text.text
	else str = text.text
	end

	local font = e.font.value
	local transform = e.transform
	local str_w = font:getWidth(widest or str)
	local str_h = font:getHeight(str)
	local offset = 96
	local x, y
	local text_pos = e.pos.pos
	local chance = Lume.randomchoice({true, false})
	local sx = chance == true and -1 or 1
	local sy = 0.75

	if transform then
		x = text_pos.x
		y = text_pos.y
	else
		x = text_pos.x + str_w/2
		y = text_pos.y + str_h/2
	end

	local pos = vec2:new(x, y)
	local paint_id = e.text_with_paint.id
	local paint = Concord.entity(self.world)
		:give("id", "text_paint")
		:give("animation_data", self.paint_data[paint_id])
		:give("pos", pos)
		:give("animation", true)
		:give("auto_scale", str_w + offset, str_h + offset, false)
		:give("transform", 0, sx, sy, 0.5, 0.5)
		:give("color", {1, 1, 1, 0})
		:give("paint")
		:give("ui_element")

	e.text_with_paint.paint = paint
	Flux.to(paint.color.color, dur_in, {[4] = 1})
end

function TextPaint:fade_paint(paint, dur, delay)
	@@assert(paint.__isEntity)
	@@assert(type(dur) == "number")
	@@assert(paint.paint)
	@@sassert(delay, type(delay) == "number")
	Flux.to(paint.color.color, dur, {[4] = 0})
		:delay(delay or def_delay_paint)
		:oncomplete(function()
			paint:destroy()
		end)
end

function TextPaint:toggle_paint(bool)
	for _, e in ipairs(self.pool_text) do
		if bool then
			e:give("hidden")
		else
			e:remove("hidden")
		end
	end

	for _, e in ipairs(self.pool_paint) do
		if bool then
			e:give("hidden")
		else
			e:remove("hidden")
		end
	end
end

function TextPaint:interactive_interacted()
	self:toggle_paint(true)
end

function TextPaint:interact_cancelled()
	self:toggle_paint(false)
end

return TextPaint
