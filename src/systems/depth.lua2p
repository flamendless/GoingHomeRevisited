local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")

local Depth = Concord.system({
	pool = {"depth_zoom", "z_index"}
})

function Depth:init(world)
	self.world = world
	!if _DEV then
	self.pool.onAdded = function(pool, e)
		if not e.transform and not e.quad_transform then
			error(e.id.value .. " must have a transform or quad_transform component")
		end
	end
	!end
end

function Depth:tween_depth_zoom(dur, factor, ease)
	@@assert(type(dur) == "number")
	@@assert(type(factor) == "number")
	@@sassert(ease, type(ease) == "string")
	for _, e in ipairs(self.pool) do
		local zf = e.depth_zoom.value
		local t = e.transform or e.quad_transform
		Flux.to(t, dur, {
			sx = math.max(t.orig_sx, t.orig_sx + zf * factor),
			sy = math.max(t.orig_sy, t.orig_sy + zf * factor),
		}):ease(ease or "linear")
	end
end

!if _DEV then
function Depth:debug_wheelmoved(wx, wy)
	for _, e in ipairs(self.pool) do
		local zf = e.depth_zoom.value
		local t = e.transform or e.quad_transform
		t.sx = math.max(t.orig_sx, t.orig_sx + zf * wy)
		t.sy = math.max(t.orig_sy, t.orig_sy + zf * wy)
	end
end
!end

return Depth
