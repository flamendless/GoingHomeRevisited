local Concord = require("modules.concord.concord")

local RenderText = Concord.system({
	pool = {"position", "text"},
	pool_static = {"position", "static_text", "font"},
	pool_ui = {"position", "text", "ui_text"},
})

function RenderText:init()
	self.pool_static.onEntityAdded = function(pool, e)
		!if _ASSERT then
		if e:has("sdf") then
			error("static_font can't use sdf font")
		end
		!end

		local static_text = e.static_text
		local font = e.font
		static_text.text_obj = love.graphics.newText(font.font, static_text.text)
	end
end

function RenderText:internal_draw(e)
	if not e.hidden then
		local pos = e.position
		local color = e.color
		local text = e.text
		local static_text = e.static_text
		local font = e.font
		local transform = e.transform
		local sdf = e.sdf

		love.graphics.setColor(1, 1, 1, 1)
		if color then
			love.graphics.setColor(color.color)
		end

		if font then
			love.graphics.setFont(font.font)
		end

		local font = love.graphics.getFont()
		local rotation, sx, sy, ox, oy

		if transform then
			rotation = transform.rotation
			sx = transform.sx
			sy = transform.sy
			ox = transform.ox
			oy = transform.oy

			if transform.ox == 0.5 then
				if static_text then
					ox = static_text.text_obj:getWidth()/2
				else
					ox = font:getWidth(text.text)/2
				end
			end
			if transform.oy == 0.5 then
				if static_text then
					oy = static_text.text_obj:getHeight()/2
				else
					oy = font:getHeight(text.text)/2
				end
			elseif transform.oy == 1 then
				if static_text then
					oy = static_text.text_obj:getHeight()
				else
					oy = font:getHeight(text.text)
				end
			end
		end

		if sdf then
			sx = sdf.scale_x
			sy = sdf.scale_y
		end

		local x = pos.pos.x
		local y = pos.pos.y

		if static_text then
			love.graphics.draw(static_text.text_obj, x, y, rotation, sx, sy, ox, oy)
		else
			love.graphics.print(text.text, x, y, rotation, sx, sy, ox, oy)
		end
	end
end

function RenderText:draw()
	for _, e in ipairs(self.pool) do
		if not e.ui_text then
			self:internal_draw(e)
		end
	end
	for _, e in ipairs(self.pool_static) do
		if not e.ui_text then
			self:internal_draw(e)
		end
	end
end

function RenderText:draw_ui()
	for _, e in ipairs(self.pool_ui) do
		self:internal_draw(e)
	end
	for _, e in ipairs(self.pool_static) do
		self:internal_draw(e)
	end
end

return RenderText
