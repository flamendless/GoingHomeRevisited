local Concord = require("modules.concord.concord")
local ReflowPrint = require("modules.reflowprint.reflowprint")

local ceil = math.ceil

local RenderText = Concord.system({
	pool = {"pos", "text"},
	pool_static = {"pos", "static_text", "font"},
})

function RenderText:init(world)
	self.world = world

	self.pool_static.onAdded = function(pool, e)
		!if _DEV then
		if e.sdf then
			error("static_font can't use sdf font")
		end
		!end

		e.static_text.obj = love.graphics.newText(e.font.value, e.static_text.value)
	end
end

function RenderText:draw_text_ex(e)
	if not e.hidden then
		local color = e.color
		local text = e.text
		local textf = e.textf
		local static_text = e.static_text
		local font = e.font
		local transform = e.transform
		local sdf = e.sdf
		local rfp = e.reflowprint

		love.graphics.setColor(1, 1, 1, 1)

		if color then
			love.graphics.setColor(color.value)
		end

		if font then
			love.graphics.setFont(font.value)
		end

		local str = text and text.value
		local current_font = love.graphics.getFont()
		local r, sx, sy, ox, oy

		if transform then
			r = transform.rotation
			sx = transform.sx
			sy = transform.sy
			ox = transform.ox
			oy = transform.oy

			if transform.ox == 0.5 then
				if static_text then
					ox = static_text.obj:getWidth()/2
				elseif textf then
					ox = textf.limit/2
				else
					ox = current_font:getWidth(str)/2
				end
			end

			if transform.oy == 0.5 then
				if static_text then
					oy = static_text.obj:getHeight()/2
				elseif textf then
					local lines = current_font:getWidth(str)/textf.limit
					lines = ceil(lines)
					oy = current_font:getHeight(str)/2 * lines
				else
					oy = current_font:getHeight(str)/2
				end
			elseif transform.oy == 1 then
				if static_text then
					oy = static_text.obj:getHeight()
				else
					oy = current_font:getHeight(str)
				end
			end
		end

		if sdf then
			sx = sdf.sx
			sy = sdf.sy
		end

		local x = e.pos.x
		local y = e.pos.y

		if rfp then
			x = x - ox
			y = y - oy
			ReflowPrint(rfp.dt/rfp.current, str, x, y, rfp.width, rfp.alignment, sx, sy)
		else
			if static_text then
				love.graphics.draw(static_text.obj, x, y, r, sx, sy, ox, oy)
			else
				if textf then
					love.graphics.printf(str, x, y, textf.limit, textf.align,
						r, sx, sy, ox, oy)
				else
					love.graphics.print(str, x, y, r, sx, sy, ox, oy)
				end
			end
		end
	end
end

function RenderText:draw()
	for _, e in ipairs(self.pool) do
		if not e.ui_element then
			self:draw_text_ex(e)
		end
	end

	for _, e in ipairs(self.pool_static) do
		if not e.ui_element then
			self:draw_text_ex(e)
		end
	end
end

return RenderText
