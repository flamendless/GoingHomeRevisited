local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")
local Lume = require("modules.lume.lume")

local Inputs = require("inputs")

local Pause = Concord.system({
	pool = {"pause"},
})

local glitch_chance = {glitch = 0.05, reset = 0.2, none = 0.7}

function Pause:init(world)
	self.world = world
	self.is_paused = false
	self.prev = {}
	self:create_pause_e()
end

function Pause:create_pause_e()
	local ww, wh = love.graphics.getDimensions()
	local ww2, wh2 = ww * 0.5, wh * 0.5
	Concord.entity(self.world)
		:give("id", "pause_bg")
		:give("pos", ww2, wh2)
		:give("transform", 0, 3, 2, 0.5, 0.5)
		:give("color", {1, 1, 1, 1})
		:give("ui_element")
		:give("sprite", "pause_bg")
		:give("hidden")
		:give("pause")
		:give("nf_render_sprite")

	local e_text = Concord.entity(self.world)
		:give("id", "pause")
		:give("font", "ui")
		:give("static_text", "PAUSED")
		:give("pos", ww2, wh2)
		:give("transform", 0, 2, 2, 0.5, 0.5)
		:give("color", {1, 1, 1, 1})
		:give("ui_element")
		:give("hidden")
		:give("nf_render_text")
		:give("displacement_texture", "tex_displacement")
		:give("glitch_shader")
		:give("pause")
	self.world:emit("reset_glitch", e_text)
	self.canvas = love.graphics.newCanvas(ww, wh)
end

function Pause:update(dt)
	if self.is_paused then
		local res = Lume.weightedchoice(glitch_chance)
		if res == "glitch" then
			self.world:emit("do_random_glitch", self.pool[2])
		elseif res == "reset" then
			self.world:emit("reset_glitch", self.pool[2])
		end
	end

	if Inputs.pressed("pause") then
		if not self.is_paused then
			for i, v in ipairs(self.world:getSystems()) do
				self.prev[i] = v:isEnabled()
				if not v.__unpausable then
					v:setEnabled(false)
				end
				for _, e in ipairs(self.pool) do
					e:remove("hidden")
				end
			end
		else
			for i, v in ipairs(self.world:getSystems()) do
				v:setEnabled(self.prev[i])
			end
			tablex.clear(self.prev)
			for _, e in ipairs(self.pool) do
				e:give("hidden")
			end
		end
		self.is_paused = not self.is_paused
		Log.info("Paused: " .. tostring(self.is_paused))
	end
end

function Pause:draw_paused()
	love.graphics.setCanvas(self.canvas)
	love.graphics.clear()
	for _, e in ipairs(self.pool) do
		if e.sprite then
			self.world:emit("draw_sprite_ex", e)
		elseif e.static_text then
			self.world:emit("draw_text_ex", e)
		end
	end
	love.graphics.setCanvas()
	self.world:emit("draw_glitch_effect", self.canvas)
end

return Pause
