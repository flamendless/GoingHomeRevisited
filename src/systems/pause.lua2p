local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")
local Lume = require("modules.lume.lume")

local Fade = require("fade")
local Inputs = require("inputs")
local Resources = require("resources")

local lower = string.lower

local Pause = Concord.system({
	pool = {"pause"},
	pool_choice = {"pause_choice"},
})

local glitch_chance = {glitch = 0.15, reset = 0.85}
local glitch_chance_h = {glitch = 1, reset = 0}
local opt = {"Resume", "Settings", "Quit"}

function Pause:init(world)
	self.world = world
	self.is_paused = false
	self.prev = {}
	local ECS = require("ecs")
	local sc_glitch = ECS.get_system_class("glitch_shader_effect")
	self.has_glitch = self.world:hasSystem(sc_glitch)
	self:create_pause_e()
end

function Pause:create_pause_e()
	local ww, wh = love.graphics.getDimensions()
	local ww2, wh2 = ww * 0.5, wh * 0.5
	Concord.entity(self.world)
		:give("id", "pause_bg")
		:give("pos", ww2, wh2)
		:give("transform", 0, 4, 3, 0.5, 0.5)
		:give("color", {1, 1, 1, 1})
		:give("ui_element")
		:give("sprite", "pause_bg")
		:give("hidden")
		:give("pause")
		:give("nf_render_sprite")

	local e_text = Concord.entity(self.world)
		:give("id", "pause")
		:give("font", "ui")
		:give("static_text", "PAUSED")
		:give("pos", ww2, wh2 - 64)
		:give("transform", 0, 1.5, 1.5, 0.5, 0.5)
		:give("color", {1, 1, 1, 1})
		:give("ui_element")
		:give("hidden")
		:give("pause")
		:give("nf_render_text")

	if self.has_glitch then
		e_text:give("displacement_texture", "tex_displacement")
		:give("glitch_shader")

		self.world:emit("reset_glitch", e_text)
		self.timer = timer(6, nil, function()
			self:do_pause_glitch(glitch_chance_h)
			self.timer:reset()
		end)
	end

	self.canvas = love.graphics.newCanvas(ww, wh)
end

function Pause:create_pause_choices()
	local ww, wh = love.graphics.getDimensions()
	local ww2, wh2 = ww * 0.5, wh * 0.5
	local by = wh2 + 16
	local scale = 0.75
	local fnt = Resources.data.fonts.ui
	local fh = fnt:getHeight("") * scale + 8

	for i, str in ipairs(opt) do
		local e = Concord.entity(self.world)
			:give("id", "c_" .. lower(str))
			:give("font", "ui")
			:give("static_text", str)
			:give("pos", ww2, by + (i - 1) * fh)
			:give("transform", 0, scale, scale, 0.5, 0.5)
			:give("color", {1, 1, 1, 1})
			:give("ui_element")
			:give("nf_render_text")
			:give("pause_choice")
		if i == 1 then
			e:give("pause_hovered")
		end
	end
end

function Pause:do_pause_glitch(chance)
	if not self.has_glitch then return end
	@@assert(type(chance) == "table")
	local res = Lume.weightedchoice(chance)
	if res == "glitch" then
		self.world:emit("do_random_glitch", self.pool[2])
	elseif res == "reset" then
		self.world:emit("reset_glitch", self.pool[2])
	end
	self.timer2 = timer(0.25, nil, function()
		self.world:emit("reset_glitch", self.pool[2])
	end)
end

function Pause:update(dt)
	if self.has_glitch and self.is_paused then
		self.timer:update(dt)
		if self.timer2 then
			self.timer2:update(dt)
		end
	end
	if Inputs.pressed("pause") then
		self:on_pause()
	end
	self:update_pause_choices()
end

function Pause:on_pause()
	if not self.is_paused then
		for i, v in ipairs(self.world:getSystems()) do
			self.prev[i] = v:isEnabled()
			if not v.__unpausable then
				v:setEnabled(false)
			end
			for _, e in ipairs(self.pool) do
				e:remove("hidden")
			end
		end
		self:create_pause_choices()
		self:do_pause_glitch(glitch_chance_h)
	else
		for i, v in ipairs(self.world:getSystems()) do
			v:setEnabled(self.prev[i])
		end
		tablex.clear(self.prev)
		for _, e in ipairs(self.pool) do
			e:give("hidden")
		end
		for _, e in ipairs(self.pool_choice) do
			e:destroy()
		end
	end
	self.is_paused = not self.is_paused
	Log.info("Paused: " .. tostring(self.is_paused))
end

function Pause:update_pause_choices()
	if not self.is_paused then return end
	local dy = 0
	if Inputs.pressed("up") then
		dy = -1
	elseif Inputs.pressed("down") then
		dy = 1
	elseif Inputs.pressed("interact") then
		for _, e in ipairs(self.pool_choice) do
			if e.pause_hovered then
				local signal = "on_pause_" .. lower(e.static_text.value)
				e:give("pause_interacted")
				:give("blink", 0.1, 1)
				:give("on_blink_end", signal)
				:give("remove_blink_on_end")
				break
			end
		end
	end

	if dy ~= 0 then
		self:do_pause_glitch(glitch_chance)
		local index
		for i, e in ipairs(self.pool_choice) do
			if e.pause_hovered then
				index = i
				e:remove("pause_hovered")
				break
			end
		end
		index = mathx.wrap(index + dy, 1, #self.pool_choice + 1)
		self.pool_choice[index]:give("pause_hovered")
	end

	for _, e in ipairs(self.pool_choice) do
		if not e.pause_interacted then
			local color = e.color.value
			if e.pause_hovered then
				color[1] = 1
				color[2] = 0
				color[3] = 0
			else
				color[1] = 1
				color[2] = 1
				color[3] = 1
			end
		end
	end
end

function Pause:draw_paused()
	if not self.is_paused then return end
	love.graphics.setCanvas(self.canvas)
	love.graphics.clear()
	for _, e in ipairs(self.pool) do
		if e.sprite then
			self.world:emit("draw_sprite_ex", e)
		elseif e.static_text then
			self.world:emit("draw_text_ex", e)
		end
	end
	for _, e in ipairs(self.pool_choice) do
		self.world:emit("draw_text_ex", e)
	end
	love.graphics.setCanvas()
	if self.has_glitch then
		self.world:emit("draw_glitch_effect", self.canvas)
	else
		love.graphics.draw(self.canvas)
	end
	Fade.draw()
end

function Pause:on_pause_resume(e)
	@@assert(e.__isEntity and e.pause_interacted)
	e:remove("pause_interacted")
	self:on_pause()
end

function Pause:on_pause_settings(e)
	@@assert(e.__isEntity and e.pause_interacted)
	e:remove("pause_interacted")
end

function Pause:on_pause_quit(e)
	@@assert(e.__isEntity and e.pause_interacted)
	e:remove("pause_interacted")
	!if _PLATFORM == "desktop" then
	local btn = love.window.showMessageBox("Alert",
		"Are you sure you want to exit the game?",
		{"Return to Main Menu", "Exit Game", "Cancel", escapebutton = 3})
	if btn == 1 then
		self.world:emit("switch_state", "Menu")
	elseif btn == 2 then
		love.event.quit()
	end
	!end
end

return Pause
