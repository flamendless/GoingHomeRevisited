local Concord = require("modules.concord.concord")

local RenderCircle = Concord.system({
	pool = {"pos", "circle", "draw_mode", "!ui_element"},
	-- pool_arc = {"pos", "arc", "draw_mode", "!ui_element"},
	pool_point = {"pos", "point", "!ui_element"},

	pool_ui = {"pos", "circle", "draw_mode"},
	-- pool_arc_ui = {"pos", "arc", "draw_mode"},
})

function RenderCircle:internal_draw(e)
	if e.nf_renderer then return end
	local pos = e.pos
	local circle = e.circle
	local color = e.color
	local line_width = e.line_width
	local mode = e.draw_mode.value
	local no_shader = e.no_shader

	if color then
		love.graphics.setColor(color.value)
	end

	if line_width then
		love.graphics.setLineWidth(line_width.value)
	end

	local temp_shader = love.graphics.getShader()
	if no_shader then
		love.graphics.setShader()
	end

	love.graphics.circle(mode, pos.x, pos.y, circle.radius, circle.segments)

	if no_shader then
		love.graphics.setShader(temp_shader)
	end
end

function RenderCircle:internal_draw_arc(e)
	if e.nf_renderer then return end
	local pos = e.pos
	local arc = e.arc
	local arc_type = e.arc_type
	local color = e.color
	local line_width = e.line_width
	local mode = e.draw_mode.value
	local temp_line_width = love.graphics.getLineWidth()

	if color then
		love.graphics.setColor(color.value)
	end

	if line_width then
		love.graphics.setLineWidth(line_width.value)
	end

	local a = arc.start_angle
	local b = arc.end_angle

	if arc_type then
		love.graphics.arc(mode, arc_type.arc_type,
			pos.x, pos.y, arc.radius, a, b, arc.segments)
	else
		love.graphics.arc(mode, pos.x, pos.y, arc.radius, a, b, arc.segments)
	end

	love.graphics.setLineWidth(temp_line_width)
end

function RenderCircle:internal_draw_point(e)
	local pos = e.pos
	local point = e.point.value
	local color = e.color
	local no_shader = e.no_shader

	if color then
		love.graphics.setColor(color.value)
	end

	local temp_shader = love.graphics.getShader()
	if no_shader then
		love.graphics.setShader()
	end

	love.graphics.setPointSize(point)
	love.graphics.points(pos.x, pos.y)

	if no_shader then
		love.graphics.setShader(temp_shader)
	end
end

function RenderCircle:draw_circle_ex(e)
	if e.hidden or e.nf_renderer then return end

	if self.pool:has(e) then
		self:internal_draw(e)
	elseif self.pool_arc:has(e) then
		self:internal_draw_arc(e)
	elseif self.pool_point:has(e) then
		self:internal_draw_point(e)
	end
end

function RenderCircle:draw_circle_ex_ui(e)
	for _, e in ipairs(self.pool_ui) do
		if not e.hidden then
			self:internal_draw(e)
		end
	end

	for _, e in ipairs(self.pool_arc_ui) do
		if not e.hidden then
			self:internal_draw_arc(e)
		end
	end
end

return RenderCircle
