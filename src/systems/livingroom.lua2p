local Concord = require("modules.concord.concord")
local Gamera = require("modules.gamera.gamera")
local TLE = require("modules.tle.timeline")

local Canvas = require("canvas")
local Fade = require("fade")
local Palette = require("palette")
local Resources = require("resources")
local Shaders = require("shaders")

local Assemblages = {
	Common = require("assemblages.common"),
	Inventory = require("assemblages.inventory"),
	LivingRoom = require("assemblages.living_room"),
	Player = require("assemblages.player"),
	UI = require("assemblages.ui"),
}

local LivingRoom = Concord.system()

function LivingRoom:init(world)
	self.world = world
end

function LivingRoom:state_setup()
	local w, h = Resources.data.images.living_room:getDimensions()
	local ww, hh = love.graphics.getDimensions()

	self.canvas = Canvas.create_main()
	self.scale = math.min(ww/w, hh/h)
	self.camera = Gamera.new(0, 0, w, h)
	self.camera:setWindow(0, 0, ww, hh)
	Concord.entity(self.world):assemble(Assemblages.Common.camera,
		self.camera, self.scale, w, h)
	Concord.entity(self.world):assemble(Assemblages.LivingRoom.bg)

	self.world:emit("create_room_bounds", w, h)
	self.world:emit("parse_room_items", "living_room")
	self.world:emit("setup_post_process", {
		Shaders.NGrading($_LUT_DUSK),
		Shaders.FilmGrain(),
		Shaders.Blur(),
		Shaders.DitherGradient(),
	})

	for _, v in pairs(Assemblages.LivingRoom.lights) do
		Concord.entity(self.world):assemble(v)
	end

	self.world:emit("set_ambiance", Palette.get_diffuse("ambiance_living_room"))
end

function LivingRoom:state_init()
	self.world:emit("spawn_player", function(e_player)
		self.world:emit("camera_follow", e_player, 0.25)
		self.world:emit("player_can_move", true, e_player)
		self.world:emit("player_can_interact", true, e_player)
		self.world:emit("player_can_run", true, e_player)
	end)

	self.timeline = TLE.Do(function()
		Fade.fade_in(nil, 1)
		self.camera:setScale(4)
		!if _DEV then
		self.timeline:Pause()
		!end
	end)
end

function LivingRoom:state_update(dt)
	self.world:emit("preupdate", dt)
	self.world:emit("update", dt)
end

function LivingRoom:state_draw()
	self.world:emit("begin_deferred_lighting", self.camera, self.canvas)
	self.world:emit("end_deferred_lighting")
	self.world:emit("apply_post_process", self.canvas)
	self.world:emit("draw_inventory")
	self.world:emit("draw_dialogues")
	self.world:emit("draw_ui")
	Fade.draw()
end

return LivingRoom
