local Concord = require("modules.concord.concord")

local insert = table.insert

local Path = Concord.system({
	pool = {"path", "pos"},
	pool_move = {"path", "pos", "path_move", "path_speed"},
	pool_camera = {"camera"},
})

function Path:init(world)
	self.world = world

	self.pool_camera.onAdded = function(pool, e)
		self.camera = e.camera.camera
	end
end

function Path:get_points(e)
	local path = e.path
	local bezier_curve = e.apply_bezier_curve
	local low = path.current_point
	local high = low + path.max

	if high > path.n_points then
		high = path.n_points
	end

	local points = {}
	for i = low, high do
		local p = path.points[i]
		if bezier_curve then
			insert(points, p.x)
			insert(points, p.y)
		else
			insert(points, {x = p.x, y = p.y})
		end
	end

	if bezier_curve then
		points = love.math.newBezierCurve(unpack(points))
	end

	return points, high
end

function Path:update(dt)
	for _, e in ipairs(self.pool_move) do
		local path = e.path
		local pos = e.pos
		local bezier_curve = e.apply_bezier_curve
		local points, high = self:get_points(e)
		local speed = e.path_speed.value
		local epsilon = 1/15 * speed * 1.01
		local on_update = e.on_path_update
		local on_end = false

		if bezier_curve then
			local t = bezier_curve.dt/speed
			local dx, dy = points:evaluate(t)
			pos.x, pos.y = dx, dy
			bezier_curve.dt = bezier_curve.dt + dt
			if bezier_curve.dt >= speed then
				bezier_curve.dt = 0
				on_end = true
			end
		else
			local target = points[#points]
			local p = vec2(pos.x, pos.y)
			local t = vec2(target.x, target.y)
			local dir = t:vsub(p):normalise_inplace()
			local np = p:vadd(dir:smul(dt * speed))
			pos.x, pos.y = np:unpack()
			p.x, p.y = pos.x, pos.y
			on_end = p:distance(t) < epsilon
		end

		if on_update then
			self.world:emit(on_update.signal, unpack(on_update.args))
		end

		if on_end then
			path.current_point = high

			if path.current_point >= path.n_points then
				path.current_point = 1

				if e.path_loop then
					tablex.reverse(path.points)
				end

				if e.path_repeat then
					local sp = path.points[1]
					pos.x, pos.y = sp.x, sp.y
				end

				local on_end_signal = e.on_path_reached_end
				if on_end_signal then
					self.world:emit(on_end_signal.signal, unpack(on_end_signal.args))
				end
			end
		end
	end
end

!if _DEV then
local Slab = require("modules.slab")
local flags = {
	path = true,
	bezier = false,
}
local component_filter = "path"
local alpha = 0.3

function Path:debug_toggle_path(bool, filter)
	@@assert(type(bool) == "boolean")
	@@sassert(filter, type(filter) == "string")
	self.debug_show = bool
	flags.path = bool
	component_filter = filter
end

function Path:debug_update(dt)
	if not self.debug_show then return end
	self.debug_show = Slab.BeginWindow("Path", {Title = "Path", IsOpen = self.debug_show})

	if Slab.CheckBox(flags.path, "Path") then
		flags.path = not flags.path
	end

	if Slab.CheckBox(flags.bezier, "Bezier") then
		flags.bezier = not flags.bezier
	end

	Slab.EndWindow()
end

function Path:debug_draw()
	if not self.debug_show then return end
	if flags.path then
		local scale = 1
		if self.camera then
			scale = 1/self.camera:getScale()
		end
		love.graphics.setLineWidth(scale)
		for _, e in ipairs(self.pool) do
			if component_filter and e[component_filter] then
				local path = e.path
				if not flags.bezier then
					for i = 1, path.n_points - 1 do
						local a = path.points[i]
						local b = path.points[i + 1]
						if i < path.current_point then
							love.graphics.setColor(1, 0, 0, alpha)
						else
							love.graphics.setColor(1, 1, 0, alpha)
						end
						love.graphics.line(a.x, a.y, b.x, b.y)
					end
				else
					for i = 1, path.n_points - 2, 2 do
						local a = path.points[i]
						local b = path.points[i + 1]
						local c = path.points[i + 2]
						local bc = love.math.newBezierCurve({
								a.x, a.y,
								b.x, b.y,
								c.x, c.y,
							})
						if i < path.current_point then
							love.graphics.setColor(1, 0, 0, alpha)
						else
							love.graphics.setColor(1, 1, 0, alpha)
						end
						love.graphics.line(bc:render())
					end
				end
			end
		end
	end
end
!end

return Path
