local Concord = require("modules.concord.concord")

local Parallax = Concord.system({
	pool = {"parallax", "quad", "sprite", "quad_transform"},
})

function Parallax:init(world)
	self.world = world

	self.pool.onAdded = function(pool, e)
		e.sprite.image:setWrap("repeat")
	end
end

function Parallax:start_parallax()
	for _, e in ipairs(self.pool) do
		e:remove("parallax_stop")
	end
end

function Parallax:stop_parallax()
	for _, e in ipairs(self.pool) do
		e:give("parallax_stop")
	end
end

function Parallax:slow_parallax(amount)
	for _, e in ipairs(self.pool) do
		local parallax = e.parallax
		local dx = parallax.vx * amount
		parallax.vx = dx
	end
end

function Parallax:parallax_move_x(dt, dir)
	for _, e in ipairs(self.pool) do
		if not e.parallax_stop then
			local parallax = e.parallax
			local quad = e.quad
			local x, y, w, h = quad.quad:getViewport()

			x = x + parallax.vx * dir * dt
			quad.quad:setViewport(x, y, w, h)
		end
	end
end

!if _DEV then
local Slab = require("modules.slab")
local is_running = true

function Parallax:debug_update(dt)
	if not self.debug_show then return end
	self.debug_show = Slab.BeginWindow("parallax", {
		Title = "Parallax",
		IsOpen = self.debug_show,
	})
	if Slab.CheckBox(is_running, "run") then
		is_running = not is_running
		if is_running then
			self:start_parallax()
		else
			self:stop_parallax()
		end
	end
	Slab.EndWindow()
end
!end

return Parallax
