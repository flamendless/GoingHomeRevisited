local Concord = require("modules.concord.concord")
local Bump = require("modules.bump.bump-niji")

local BumpCollision = Concord.system({
	pool = {"collider", "position", "bump"},
})

local filter = function(item, other)
	local other_col = other.collider

	return other_col.filter or "slide"
end

function BumpCollision:init(world)
	self.world = world
	self.bump_world = Bump.newWorld()

	self.pool.onEntityAdded = function(pool, e)
		local x = e.position.pos.x + e.collider.offset.x
		local y = e.position.pos.y + e.collider.offset.y

		self.bump_world:add(e, x, y, e.collider.size.x, e.collider.size.y)
	end
end

function BumpCollision:preupdate(dt)
	for _, e in ipairs(self.pool) do
		e.collider.is_hit = false
	end
end

function BumpCollision:update(dt)
	for _, e in ipairs(self.pool) do
		local body = e.body

		if body then
			if body.vel_x ~= 0 or body.vel_y ~= 0 then
				local collider = e.collider
				local pos = e.position.pos
				local cols, len

				pos.x, pos.y, cols, len = self.bump_world:move(e,
					pos.x + body.vel_x, pos.y + body.vel_y, filter)

				for i = 1, len do
					local c = cols[i]

					local other = c.other
					local other_col = other.collider
					local other_id = other.bump.id

					other_col.is_hit = true
					other_col.normal.x = c.normalX
					other_col.normal.y = c.normalY

					local item = c.item
					local item_col = item.collider

					item_col.is_hit = true
					item_col.normal.x = c.normalX
					item_col.normal.y = c.normalY

					if other_id then
						--TODO wall collision animation
						if other_id == "wall" then
							self.world:emit("collision_wall", e, other)

							return
						end
					end
				end

				self.bump_world.freeCollisions(cols)
			end
		end
	end
end

!if not _RELEASE then
function BumpCollision:draw_debug()
	local items, len = self.bump_world:getItems()
	for i = 1, len do
		local e = items[i]
		local x, y, w, h = self.bump_world:getRect(e)

		if e.collider.is_hit then
			love.graphics.setColor(1, 0, 0, 0.5)
		else
			love.graphics.setColor(0, 1, 0, 0.5)
		end

		love.graphics.rectangle("line", x, y, w, h)
	end
end
!end

return BumpCollision
