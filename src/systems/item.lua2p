local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")

local Inputs = require("inputs")

local format = string.format

local Item = Concord.system({
	pool = {"id", "item", "collider3d"},
})

!if _ASSERT then
local ActionControls = require("systems.action_controls")
local actions = {"action_eye", "action_hand", "action_bag", "action_cancel"}
!end

function Item:init(world)
	self.world = world

	!if _ASSERT then
	self.pool.onEntityAdded = function(pool, e)
		for _, action in ipairs(actions) do
			if not e[action] then
				Log.warn(format("'%s' does not have '%s' component", e.id.id, action))
			end
		end
	end
	!end

	!if _ASSERT then
	if not self.world:hasSystem(ActionControls) then
		error("Item system needs ActionControls system")
	end
	!end
end

function Item:check_within_item(player)
	!if _ASSERT then
	Assert.exists(player.player)
	!end

	player.player.within_item = nil

	for _, e in ipairs(self.pool) do
		local col = e.collider3d

		if col.is_hit then
			player.player.within_item = e.id.id
			break
		end
	end
end

function Item:keypressed(key)
	if Inputs.is_pressed("player_interact", key) then
		for _, e in ipairs(self.pool) do
			local col = e.collider3d

			if col.is_hit then
				if col.normal.x == 0 then
					self.world:emit("show_ui_interactive", e)
					break
				end
			end
		end
	end
end

return Item
