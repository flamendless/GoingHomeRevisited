local Concord = require("modules.concord.concord")

local Enemy = require("assemblages.enemy")
local Enums = require("enums")
local bt_enemy = Enums.bt.enemy

local EnemyController = Concord.system({
	pool = {$_C_ID, $_C_ENEMY_CONTROLLER, $_C_BEHAVIOR_TREE},
})

function EnemyController:init(world)
	self.world = world

	self.pool.onAdded = function(_, e)
		local e_player = self.world:getResource("e_player")
		if e_player then
			e:give($_C_REF_ENTITY_KEY, e_player)
		end
		self.world:setResource("e_enemy", e)
	end
end

function EnemyController:spawn_enemy(enemy_type, x, y)
	@@assert(type(enemy_type) == "string")
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	Concord.entity(self.world):assemble(Enemy.base, enemy_type, x, y)
end

function EnemyController:update(dt)
	for _, e in ipairs(self.pool) do
		local body = e.body
		local anim_name = "idle"
		local current_node = e.behavior_tree.current_node

		body.dx = 0

		if current_node == bt_enemy.walk then
			anim_name = "walk"
		elseif current_node == bt_enemy.chase then
			local other_e = self.world:getEntityByKey(e.ref_e_key.value)
			local collide_with = e.collide_with
			if (not collide_with) or (collide_with.value ~= other_e.key.value) then
				local dir = (e.pos.x <= other_e.pos.x) and 1 or -1
				body.dx = dir
			end
			anim_name = "walk"
		elseif current_node == bt_enemy.lean_back then
			anim_name = "lean_back"
		elseif current_node == bt_enemy.lean_return_back then
			anim_name = "lean_return_back"
		end

		self.world:emit("switch_animation_tag", e, anim_name)
		self.world:emit("update_speed_data", e, anim_name)
	end
end

!if _DEV then
local Slab = require("modules.slab")

local cb_line_of_sight = true

function EnemyController:debug_update(dt)
	if not self.debug_show then return end
	self.debug_show = Slab.BeginWindow("enemy_controller", {
		Title = "EnemyController",
		IsOpen = self.debug_show
	})
	if Slab.CheckBox(cb_line_of_sight, "Line of Sight") then
		cb_line_of_sight = not cb_line_of_sight
	end
	if Slab.Button("flip") then
		for _, e in ipairs(self.pool) do
			local body = e.body
			body.dir = body.dir * -1
		end
	end
	Slab.EndWindow()
end

function EnemyController:debug_draw()
	if not self.debug_show then return end

	if cb_line_of_sight then
		local r, g, b, a = love.graphics.getColor()
		love.graphics.setColor(1, 0, 0, 1)

		for _, e in ipairs(self.pool) do
			local line_of_sight = e.line_of_sight.value
			local dir = e.body.dir
			local controller_origin = e.controller_origin
			local x = controller_origin.x
			local y = controller_origin.y
			love.graphics.line(x, y, x + line_of_sight * dir, y)
		end

		love.graphics.setColor(r, g, b, a)
	end
end
!end

return EnemyController
