local Concord = require("modules.concord.concord")

local Palette = require("palette")
local ScreenInfo = require("screen_info")

local floor = math.floor

local Inventory = Concord.system({
	pool = {"id", "item"},
	pool_cell = {"id", "sprite", "inventory_cell"},
	pool_desc = {"id", "sprite", "inventory_desc"},
})

local Items = require("assemblages.items")
local UI = require("assemblages.ui")

local scale = 1
local img_w, img_h = 64, 64
local item_size = vec2:new(img_w * scale, img_h * scale)

local line_width = 3
local color_outline = Palette.get("item_outline")
local color_outline_hovered = Palette.get("item_outline_hovered")

function Inventory:init(world)
	self.world = world
	self.dur_show = 0.5
	self.dur_hide = 0.5
	self.offset = 108
	self.cols = 3
	self.rows = 3
	self.current_n = 0
	self.actions_active = false
	self.sheets = nil

	self.pool.onEntityAdded = function(pool, e)
		local pos = self.pool_cell[#pool].position.pos:copy()
		self.current_n = self.current_n + 1

		e:give("position", pos)
		:give("bounding_box", pos:copy(), item_size:copy())
		:give("layer", "inventory", 3)
		:give("transform", 0, scale, scale, 0.5, 0.5)
		:give("on_click", 1, function()
			if not self.actions_active then
				self.world:emit("item_clicked", e, self.dur_show)
				self.actions_active = true
			end
		end)
		:give("inventory_slot_number", self.current_n)
	end

	self.pool.onEntityRemoved = function(pool, e)
		self.current_n = self.current_n - 1
	end

	!if not _RELEASE and _ASSERT then
	self.pool_desc.onEntityAdded = function(pool, e)
		if #pool > 1 then error("There should only be one inventory_desc") end
	end
	!end
end

function Inventory:set_action_controls_resources(sheets)
	!if _ASSERT then
	Assert.must(sheets, Types.T_TABLE)
	Assert.exists(sheets.eye)
	Assert.exists(sheets.hand)
	Assert.exists(sheets.bag)
	Assert.exists(sheets.cancel)
	Assert.exists(sheets.use)
	Assert.exists(sheets.combine)
	Assert.exists(sheets.back)
	!end

	self.sheets = sheets
end

function Inventory:create_inventory_cell(spr_item, spr_desc, font)
	local limit = self.rows + self.cols
	local last_pos

	for n = 1, limit do
		local base_x = ScreenInfo.ww * 0.7
		local base_y = ScreenInfo.hh * 0.25
		local p = n - 1
		local i = p % self.cols
		local j = floor(p/self.rows)
		local x = base_x + (self.offset * scale * i)
		local y = base_y + (self.offset * scale * j)
		local pos = vec2:new(x, y)
		local bg_scale = scale + 0.25
		local ox, oy = 0.5, 0.5
		local e_cell = Concord.entity(self.world)
			:assemble(Items.inventory_cell, spr_item)
			:give("position", pos:copy())
			:give("transform", 0, bg_scale, bg_scale, ox, oy)
			:give("layer", "inventory", 1)

		if n == limit - 1 then
			local sprite = spr_item
			local lx = pos.x
			local ly = pos.y + (oy * 2 * sprite:getHeight() * bg_scale) + 32

			last_pos = vec2:new(lx, ly)
		end
	end

	local e_desc_bg = Concord.entity(self.world)
		:assemble(Items.inventory_desc, spr_desc)
		:give("position", last_pos)
		:give("transform", 0, 1, 1, 0.5, 0.5)
		:give("text", "")
		:give("textf", spr_desc:getWidth(), "center")
		:give("font", font)
end

function Inventory:item_clicked(e)
	for _, e2 in ipairs(self.pool) do
		if e == e2 then
			e:give("clicked")
			break
		else
			e2:remove("clicked")
		end
	end

	local scale = 0.75
	local transform = e.transform
	local spr_w, spr_h = e.sprite.sprite:getDimensions()
	local slot = e.inventory_slot_number.slot
	local dir = (slot == 3 or slot == 6) and -1 or 1
	local ox = (slot == 3 or slot == 6) and 1 or 0
	local oy = 0.5
	local ix, iy = e.position.pos:unpack()
	local x = ix + (spr_w * dir) * transform.sx * transform.oy
	local pos_use = vec2:new(x, iy)

	if self.btn_use then self.btn_use:destroy() end
	if self.btn_combine then self.btn_combine:destroy() end
	if self.btn_back then self.btn_back:destroy() end

	self.btn_use = Concord.entity(self.world)
		:assemble(UI.inventory_button, "use", self.sheets.use, scale)
		:remove("hover_change_scale")
		:give("position", pos_use)
		:give("transform", 0, scale, scale, ox, oy)
		:give("color_fade_in", self.dur_show, nil, function()
			self.btn_use:give("hoverable"):give("clickable")
		end)
		:give("on_click", 1, function()
			self.world:emit("clicked_inventory_use", e)
		end)

	local frame_height = self.btn_use.animation_data.frame_height * scale
	local pos_combine = vec2:new(x, iy + frame_height)

	self.btn_combine = Concord.entity(self.world)
		:assemble(UI.inventory_button, "combine", self.sheets.combine, scale)
		:remove("hover_change_scale")
		:give("position", pos_combine)
		:give("transform", 0, scale, scale, ox, oy)
		:give("color_fade_in", self.dur_show, nil, function()
			self.btn_combine:give("hoverable"):give("clickable")
		end)
		:give("on_click", 1, function()
			self.world:emit("clicked_inventory_combine", e)
		end)

	local pos_back = vec2:new(x, iy + frame_height * 2)

	self.btn_back = Concord.entity(self.world)
		:assemble(UI.inventory_button, "back", self.sheets.back, scale)
		:remove("hover_change_scale")
		:give("position", pos_back)
		:give("transform", 0, scale, scale, ox, oy)
		:give("color_fade_in", self.dur_show, nil, function()
			self.btn_back:give("hoverable"):give("clickable")
		end)
		:give("on_click", 1, function()
			self.world:emit("clicked_inventory_back", e)
			self:close_inventory_buttons()
		end)
end

function Inventory:clicked_inventory_back(e)
	local id = e.id.id

	self.actions_active = false
	self.pool_desc[1].text.text = ""
	for _, e in ipairs(self.pool) do e:remove("clicked") end
end

function Inventory:mouse_hovered_item(e)
	local desc = e.item.desc
	local e_desc_text = self.pool_desc[1].text

	e_desc_text.text = desc
end

function Inventory:mouse_unhovered_item(e)
	local e_desc_text = self.pool_desc[1].text

	if not self.actions_active then
		e_desc_text.text = ""
	end
end

function Inventory:action_interacted_bag(target_interactive, player)
	player:give("inventory_open")

	for _, e in ipairs(self.pool) do
		e:remove("hidden")
		:give("color_fade_in", self.dur_show)
	end

	for _, e in ipairs(self.pool_cell) do
		e:remove("hidden")
		:give("color_fade_in", self.dur_show)
	end

	local e_desc = self.pool_desc[1]
		:remove("hidden")
		:give("color_fade_in", self.dur_show)
	e_desc.text.text = ""

	self.inventory_open = true
	self:displayed_inventory()
end

function Inventory:displayed_inventory()
	local e = self.pool_cell[2]
	local base = e.position.pos
	local sprite = e.sprite.sprite
	local transform = e.transform
	local x = base.x
	local y = base.y - (transform.oy * 2 * sprite:getHeight() * transform.sy)
	local pos = vec2:new(x, y)
	local scale = 0.75

	self.btn_close = Concord.entity(self.world)
		:assemble(UI.inventory_button, "close", self.sheets.cancel, scale)
		:give("position", pos)
		:give("color_fade_in", self.dur_show, nil, function()
			self.btn_close:give("hoverable"):give("clickable")
		end)
		:give("on_click", 1, function()
			self.world:emit("keypressed_back")
			self.btn_close:remove("hoverable"):remove("clickable")
				:give("color_fade_out", self.dur_show, nil, function()
					self.btn_close:destroy()
				end)
		end)
end

function Inventory:finished_item_dialogue()
	local has_discard = false

	for _, e in ipairs(self.pool) do
		if e.item_discard then
			e:destroy()
			has_discard = true
		end
	end

	if has_discard then
		self.pool_desc[1].text.text = ""
		self.world:emit("close_inventory_buttons")
	end
end

function Inventory:keypressed_back()
	for i, e in ipairs(self.pool) do
		e:give("color_fade_out", self.dur_show, nil, function()
			e:give("hidden")
			:remove("clicked")

			if i == #self.pool then
				self.world:emit("closed_inventory")
			end
		end)
	end

	for _, e in ipairs(self.pool_cell) do
		e:give("color_fade_out", self.dur_show, nil, function()
			e:give("hidden")
		end)
	end

	local e_desc = self.pool_desc[1]
	e_desc:give("color_fade_out", self.dur_show, nil, function()
		e_desc:give("hidden")
	end)

	self:close_inventory_buttons()
end

function Inventory:close_inventory_buttons()
	if not (self.btn_use and self.btn_combine and self.btn_back) then return end

	self.btn_use:remove("hoverable"):remove("clickable")
		:give("color_fade_out", self.dur_hide, nil, function()
			self.btn_use:destroy()
		end)

	self.btn_combine:remove("hoverable"):remove("clickable")
		:give("color_fade_out", self.dur_hide, nil, function()
			self.btn_combine:destroy()
		end)

	self.btn_back:remove("hoverable"):remove("clickable")
		:give("color_fade_out", self.dur_hide, nil, function()
			self.btn_back:destroy()
		end)
end

function Inventory:showed_dialogue_item()
	self.btn_use:remove("hoverable"):remove("clickable")
	self.btn_combine:remove("hoverable"):remove("clickable")
	self.btn_back:remove("hoverable"):remove("clickable")
	self.btn_close:remove("hoverable"):remove("clickable")
	self.is_inventory = true
end

function Inventory:closed_inventory()
	self.actions_active = false
	self.inventory_open = false
end

function Inventory:destroyed_dialogue(id)
	if not self.inventory_open then
		self.world:emit("toggle_action_controls", true)
	end

	if self.is_inventory then
		self.btn_use:give("hoverable"):give("clickable")
		self.btn_combine:give("hoverable"):give("clickable")
		self.btn_back:give("hoverable"):give("clickable")
		self.btn_close:give("hoverable"):give("clickable")
		self.is_inventory = false

		self.world:emit("finished_item_dialogue")
	end
end

function Inventory:draw_ui_layer_ex(layer_n)
	if not (layer_n == 2) then return end

	for _, e in ipairs(self.pool) do
		if not e.hidden then
			local hoverable = e.hoverable
			local clicked = e.clicked
			local transform = e.transform
			local bbox = e.bounding_box
			local a = e.color.color[4]
			local x, y = bbox.screen_pos:unpack()
			local w, h = bbox.size:unpack()

			if transform then
				x = x - transform.ox * transform.sx
				y = y - transform.oy * transform.sy
			end

			if clicked or hoverable.is_hovered then
				love.graphics.setColor(
					color_outline_hovered[1],
					color_outline_hovered[2],
					color_outline_hovered[3], a)
			else
				love.graphics.setColor(
					color_outline[1],
					color_outline[2],
					color_outline[3], a)
			end

			love.graphics.setLineWidth(line_width)
			love.graphics.rectangle("line", x, y, w, h)
		end
	end
end

return Inventory
