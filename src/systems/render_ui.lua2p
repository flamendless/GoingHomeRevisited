local Concord = require("modules.concord.concord")
local SortedTable = require("ctor.sorted_table")

local RenderUI = Concord.system({
	pool_intro = {
		constructor = SortedTable,
		layer = "intro",
		"ui_element",
	},
	pool_hold_key = {
		constructor = SortedTable,
		layer = "hold_key",
		"ui_element",
	},
	pool_inventory = {
		constructor = SortedTable,
		layer = "inventory",
		"ui_element",
	},
	pool_inventory_buttons = {
		constructor = SortedTable,
		layer = "inventory_buttons",
		"ui_element",
	},
	pool_dialogue = {
		constructor = SortedTable,
		layer = "dialogue",
		"ui_element",
	},
	pool_ui = {"ui_element", "pos", "!layer"},
});

function RenderUI:init(world)
	self.world = world
	self.layers = {
		self.pool_intro, self.pool_hold_key, self.pool_inventory,
		self.pool_inventory_buttons, self.pool_dialogue,
	}
end

function RenderUI:draw_ui()
	for _, e in ipairs(self.pool_ui) do
		local text = e.text
		local stext = e.static_text
		local sprite = e.sprite

		if text or stext then
			self.world:emit("draw_text_ex", e)
		end

		if sprite then
			self.world:emit("draw_sprite_ex", e)
		end
	end

	for i, pool in ipairs(self.layers) do
		for _, e in ipairs(pool) do
			local text = e.text
			local stext = e.static_text
			local sprite = e.sprite

			self.world:emit("draw_ui_layer_ex", pool.layer_id)

			if text or stext then
				self.world:emit("draw_text_ex", e)
			end

			if sprite then
				self.world:emit("draw_sprite_ex", e)
			end
		end
	end
end

function RenderUI:cleanup()
	for _, pool in ipairs(self.layers) do
		pool:clear()
	end
end

return RenderUI
