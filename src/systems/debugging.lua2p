!if not _RELEASE then
local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")
local Slab = require("modules.slab")

local DebugFlags = require("debug_flags")

local insert = table.insert
local getFPS = love.timer.getFPS

local Debugging = Concord.system({
	pool = {},
	pool_id = {"id"},
	pool_log = {"log"}
})

local is_open = true

function Debugging:init(world)
	self.world = world
	self.ent_count = 0
	self.ent_id_count = 0
	self.ps = {}
	self.ps_count = 0
	self.ref_id = {}

	DebugFlags.t_stats = love.graphics.getStats(DebugFlags.t_stats)

	self.pool.onEntityAdded = function(pool, e)
		self.ent_count = self.ent_count + 1
	end

	self.pool.onEntityRemoved = function(pool, e)
		self.ent_count = self.ent_count - 1
	end

	self.pool_id.onEntityAdded = function(pool, e)
		local id = e.id
		local ref_id = self.ref_id[id.id]

		if ref_id then
			self.ref_id[id.id] = self.ref_id[id.id] + 1
			id.id = id.id .. self.ref_id[id.id]
		else
			self.ref_id[id.id] = 1
		end

		self.ent_id_count = self.ent_id_count + 1
		Log.info("Added entity: " .. id.id)
	end

	self.pool_id.onEntityRemoved = function(pool, e)
		self.ent_id_count = self.ent_id_count - 1
		Log.info("Removed entity: " .. e.id.id)
	end
end

function Debugging:debug_particle_system(ps)
	!if _ASSERT then
	Assert.should_particle_system(ps)
	!end

	insert(self.ps, ps)
end

function Debugging:update(dt)
	local c = 0

	for i, ps in ipairs(self.ps) do
		c = c + ps:getCount()
	end

	self.ps_count = c
end

function Debugging:draw_slab()
	is_open = Slab.BeginWindow("debugging", {Title = "Debugging", IsOpen = is_open})

	if Slab.CheckBox(DebugFlags.b3d_bounds, "B3D Bounds") then
		DebugFlags.b3d_bounds = not DebugFlags.b3d_bounds
	end

	if Slab.CheckBox(DebugFlags.b3d_list, "B3D List") then
		DebugFlags.b3d_list = not DebugFlags.b3d_list
	end

	if Slab.CheckBox(DebugFlags.camera, "Camera") then
		DebugFlags.camera = not DebugFlags.camera
	end

	if Slab.CheckBox(DebugFlags.colliders, "Colliders") then
		DebugFlags.colliders = not DebugFlags.colliders
	end

	if Slab.CheckBox(DebugFlags.cross, "Cross") then
		DebugFlags.cross = not DebugFlags.cross
	end

	if Slab.CheckBox(DebugFlags.ent_count, "ECS") then
		DebugFlags.ent_count = not DebugFlags.ent_count
	end

	if Slab.CheckBox(DebugFlags.logs, "Logs") then
		DebugFlags.logs = not DebugFlags.logs
	end

	if Slab.CheckBox(DebugFlags.quad_bounds, "Quad") then
		DebugFlags.quad_bounds = not DebugFlags.quad_bounds
	end

	if Slab.CheckBox(DebugFlags.stats, "Stats") then
		DebugFlags.stats = not DebugFlags.stats
	end

	if Slab.CheckBox(DebugFlags.z_index, "ZIndex") then
		DebugFlags.z_index = not DebugFlags.z_index
	end

	Slab.EndWindow()

	DebugFlags.ent_count = Slab.BeginWindow("ecs",
		{Title = "ECS", IsOpen = DebugFlags.ent_count})
	Slab.Text("# of entities: " .. self.ent_count)
	Slab.Text("# of entities with id: " .. self.ent_id_count)
	Slab.EndWindow()

	DebugFlags.logs = Slab.BeginWindow("log",
		{Title = "log", IsOpen = DebugFlags.logs, AutoSizeWindow = false})
	for _, e in ipairs(self.pool_log) do
		Slab.Text(e.log.log)
	end

	Slab.EndWindow()

	DebugFlags.stats = Slab.BeginWindow("stats",
		{Title = "stats", IsOpen = DebugFlags.stats})
	Slab.Text("FPS: " .. getFPS())
	Slab.Text("Particle Count: " .. self.ps_count)
	for k, v in pairs(DebugFlags.t_stats) do
		Slab.Text(k .. ": " .. v)
	end

	Slab.EndWindow()
end

function Debugging:draw_debug(l, t, w, h)
	if not DebugFlags.cross then return end

	local hw, hh = w/2, h/2

	love.graphics.setColor(0, 1, 0, 1)
	love.graphics.setLineWidth(1)
	love.graphics.line(hw, 0, hw, h)
	love.graphics.line(0, hh, w, hh)
end

function Debugging:cleanup()
	self.ent_count = 0
	self.ps_count = 0

	for i, ps in ipairs(self.ps) do
		self.ps[i] = nil
	end

	for _, e in ipairs(self.pool_log) do
		e:remove("log")
		e:destroy()
	end
end

return Debugging
!end
