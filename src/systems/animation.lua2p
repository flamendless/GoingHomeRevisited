local Anim8 = require("modules.anim8.anim8")
local Concord = require("modules.concord.concord")

local min = math.min

local Animation = Concord.system({
	pool = {"animation", "animation_data", "position"},
	pool_pause = {"animation", "animation_data", "animation_pause_at"}
})

function Animation:init()
	self.pool.onEntityAdded = function(pool, e)
		local data = e:get("animation_data")
		local animation = e:get("animation")
		local auto_scale = e:get("auto_scale")
		if auto_scale then
			local transform = e:get("transform")
			if auto_scale.is_proportion then
				local scale = min(auto_scale.target_width/data.frame_width, auto_scale.target_height/data.frame_height)
				transform.sx = scale
				transform.sy = scale
			else
				transform.sx = auto_scale.target_width/data.frame_width
				transform.sy = auto_scale.target_height/data.frame_height
			end
		end

		local cb = e:get("animation_on_complete")
		local on_end
		if cb then
			on_end = function()
				cb.callback()
				animation.is_playing = false
				if cb.event then
					animation.animation[cb.event](animation.animation)
				end
			end
		else
			on_end = function()
				if animation.stop_on_last then
					animation.is_playing = false
					animation.animation:pauseAtEnd()
				end
			end
		end

		animation.grid = Anim8.newGrid(data.frame_width, data.frame_height, data.sheet_width, data.sheet_height)
		animation.animation = Anim8.newAnimation(animation.grid(unpack(data.frames)), data.durations or data.delay, on_end)
	end

	self.pool_pause.onEntityAdded = function(pool, e)
		local data = e:get("animation_data")
		local animation = e:get("animation")
		local pause_at = e:get("animation_pause_at")

		if type(pause_at.at_frame) == "string" then
			if pause_at.at_frame == "first" then
				animation.animation:pauseAtStart()
			elseif pause_at.at_frame == "last" then
				animation.animation:pauseAtEnd()
			end
		elseif type(pause_at.at_frame) == "number" then
			assert(pause_at.at_frame <= data.n_frames, "Passed 'at_frames' must not exceed number of total frames in 'animation_data'")
			animation.animation:gotoFrame(pause_at.at_frame)
			animation.animation:pause()
		end
	end

	self.pool_pause.onEntityRemoved = function(pool, e)
		local animation = e:get("animation")
		animation.animation:resume()
	end
end

function Animation:update(dt)
	for _, e in ipairs(self.pool) do
		local animation = e:get("animation")
		local stop = e:get("animation_stop")
		local dt_multiplier = e:get("dt_multiplier")

		if dt_multiplier then
			dt = dt * dt_multiplier.mul
		end

		if animation.is_playing then
			if stop then
				animation.is_playing = false
				animation.animation[stop.event](animation.animation)
				local cb = e:get("animation_on_complete")
				if cb then
					cb.callback()
				end
			end
			animation.animation:update(dt)
		end
	end
end

function Animation:draw()
	for _, e in ipairs(self.pool) do
		local data = e:get("animation_data")
		local animation = e:get("animation")
		local pos = e:get("position")
		local color = e:get("color")
		local transform = e:get("transform")
		local hidden = e:get("hidden")

		if not hidden then
			if color then
				love.graphics.setColor(color.color)
			end

			local rotation, sx, sy, ox, oy
			if transform then
				rotation = transform.rotation
				sx = transform.sx
				sy = transform.sy
				if transform.ox == 0.5 then
					ox = data.frame_width/2
				end
				if transform.oy == 0.5 then
					oy = data.frame_height/2
				end
			end
			animation.animation:draw(data.spritesheet, pos.pos.x, pos.pos.y, rotation, sx, sy, ox, oy)
		end
	end
end

return Animation
