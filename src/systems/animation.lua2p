local Anim8 = require("modules.anim8.anim8")
local Concord = require("modules.concord.concord")
local Timer = require("modules.hump.timer")

local Animation = Concord.system({
	pool = {"animation", "animation_data"},
	pool_multi = {"multi_animation_data", "animation"},
	pool_pause = {"animation", "animation_data", "animation_pause_at"},
	pool_change = {"animation", "animation_data", "change_animation_tag"}
})

local cache_multi_animation = {}

function Animation:setup_on_loop(e, animation)
	@@assert(animation.__isComponent)

	local cb = e.animation_on_loop
	local on_finish = e.animation_on_finish
	local on_loop

	if cb then
		on_loop = function()
			if cb.event then
				animation.is_playing = false
				animation.animation[cb.event](animation.animation)

				if on_finish then
					Timer.after(on_finish.delay, function()
						self.world:emit(on_finish.signal, unpack(on_finish.args))
					end)
				end

				if cb.remove_at_end then
					e:remove("animation_on_loop")
					cache_multi_animation[e.animation.current_tag] = nil
				end
			end
		end
	else
		on_loop = function()
			if animation.stop_on_last then
				animation.is_playing = false
				animation.animation:pauseAtEnd()
			end
		end
	end

	return on_loop
end

local setup_animation = function(e, data, on_loop)
	local animation = e.animation
	local multi = e.multi_animation_data
	local current_tag = animation.current_tag
	local obj_grid
	local obj_animation

	if not multi then
		obj_grid = Anim8.newGrid(data.frame_width, data.frame_height,
			data.sheet_width, data.sheet_height)
		obj_animation = Anim8.newAnimation(obj_grid(unpack(data.frames)),
			 data.delay, on_loop)
	else
		if cache_multi_animation[current_tag] then
			local cached = cache_multi_animation[current_tag]

			obj_grid = cached.grid
			obj_animation = cached.animation
		else
			obj_grid = Anim8.newGrid(data.frame_width, data.frame_height,
				data.sheet_width, data.sheet_height)
			obj_animation = Anim8.newAnimation(obj_grid(unpack(data.frames)),
				data.delay, on_loop)

			cache_multi_animation[current_tag] = {
				grid = obj_grid,
				animation = obj_animation
			}

			if data.is_flipped then
				obj_animation:flipH()
			end
		end
	end

	animation.grid = obj_grid
	animation.animation = obj_animation

	local quad, x, y, r, sx, sy, ox, oy = obj_animation:getFrameInfo()

	e:give("sprite", data.spritesheet)
	e:give("quad", quad)

	if data.is_flipped then
		if e.transform then
			ox = ox - e.transform.ox
			oy = oy - e.transform.oy
		end

		e:give("quad_transform", r, sx, sy, ox, oy)
	else
		e:remove("quad_transform")
	end

	if data.start_frame then
		obj_animation:gotoFrame(data.start_frame)
	end

	!if not _RELEASE then
	animation.anim_debug = obj_animation:clone()
	!end
end

function Animation:init(world)
	self.world = world
	self.pool.onAdded = function(pool, e)
		local data = e.animation_data
		local animation = e.animation
		local on_loop = self:setup_on_loop(e, animation)

		setup_animation(e, data, on_loop)
	end

	self.pool_multi.onAdded = function(pool, e)
		local multi = e.multi_animation_data
		local animation = e.animation
		self:setup_on_loop(e, animation)
		local data = multi.data[multi.first]

		animation.current_tag = multi.first
		e:give("animation_data", data)
	end

	self.pool_pause.onAdded = function(pool, e)
		local data = e.animation_data
		local animation = e.animation
		local pause_at = e.animation_pause_at

		if type(pause_at.at_frame) == "string" then
			if pause_at.at_frame == "first" then
				animation.animation:pauseAtStart()
			elseif pause_at.at_frame == "last" then
				animation.animation:pauseAtEnd()
			end
		elseif type(pause_at.at_frame) == "number" then
			@@assert(pause_at.at_frame <= data.n_frames)
			animation.animation:gotoFrame(pause_at.at_frame)
			animation.animation:pause()
		end
	end

	self.pool_pause.onRemoved = function(pool, e)
		local animation = e.animation

		animation.animation:resume()
	end

	self.pool_change.onAdded = function(pool, e)
		self:switch_animation_tag(e, e.change_animation_tag.new_tag)
	end
end

function Animation:switch_animation_tag(e, new_tag, override)
	@@assert(e.__isEntity)
	@@assert(type(new_tag) == "string")
	@@sassert(override, type(override) == "boolean")

	local multi = e.multi_animation_data
	local data = multi.data[new_tag]

	@@assert(data)

	local animation = e.animation
	local on_loop = self:setup_on_loop(e, animation)
	animation.is_playing = true

	if not (new_tag == animation.current_tag) then
		animation.current_tag = new_tag
		e:remove("animation_data")
		e:give("animation_data", data)
		setup_animation(e, data, on_loop)
	end

	if override then e:give("override_animation") end
	e:remove("change_animation_tag")
end

function Animation:update_animation_data(e, data)
	@@assert(e.__isEntity)
	@@assert(type(data) == "table")

	local animation = e.animation
	animation.stop_on_last = data.stop_on_last
	animation.is_playing = true
	local on_loop = self:setup_on_loop(e, animation)

	setup_animation(e, data, on_loop)
end

function Animation:update(dt)
	for _, e in ipairs(self.pool) do
		local animation = e.animation

		if animation.animation then
			local on_update = e.animation_on_update
			local stop = e.animation_stop
			local dt_multiplier = e.dt_multiplier
			local quad = e.quad

			if dt_multiplier then
				dt = dt * dt_multiplier.mul
			end

			if animation.is_playing then
				if stop then
					animation.is_playing = false
					animation.animation[stop.event](animation.animation)

					local on_finish = e.animation_on_finish
					if on_finish then
						Timer.after(on_finish.delay, function()
							self.world:emit(on_finish.signal, unpack(on_finish.args))
						end)
					end
				end

				animation.animation:update(dt)

				if on_update then
					on_update.on_update(dt, animation.animation.pos)
				end
			end

			local current_quad = animation.animation:getFrameInfo()

			quad.quad = current_quad
		end
	end
end

function Animation:splash_wits_done(timeline)
	self.world:emit("start_fade")
	Timer.after(2, function()
		self.world:emit("start_colors_lerp")
		self.world:emit("start_typewriter")
		timeline:Unpause()
	end)
end

return Animation
