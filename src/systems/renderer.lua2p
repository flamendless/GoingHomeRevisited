local Concord = require("modules.concord.concord")
local ReflowPrint = require("modules.reflowprint.reflowprint")

local Helper = require("helper")

local Renderer = Concord.system({
	pool_circle = {"circle", "draw_mode", "pos"},
	pool_point = {"point", "pos"},
	pool_rect = {"rect", "pos", "draw_mode"},
	pool_text = {"text", "pos"},
	pool_static_text = {"static_text", "pos", "font"},
	pool_bg = {"bg", "sprite", "pos"},
	pool_sprite = {"sprite", "pos", "!bg"},
	!if _DEV then
	pool_layer = {"sprite", "pos", "layer"},
	!end
})

function Renderer:add_to_pool(pool, e)
	if pool == self.pool_text and e.sdf then
		@@assert(e.font_sdf, "sdf must have font_sdf")
		@@assert(not e.font, "sdf must NOT have font")
	elseif pool == self.pool_static_text then
		@@assert(not e.sdf, "static_font can NOT use sdf font")
		e.static_text.obj = love.graphics.newText(e.font.value, e.static_text.value)
	elseif pool == self.pool_bg then
		!if _DEV then
		@@assert(self.e_bg == nil, "There can only be 1 entity for background")
		!end
		self.e_bg = e
	elseif pool == self.pool_layer or pool == self.pool_sprite then
		self:setup_sprite(e)
	end

	local list = e.ui_element and self.list_ui or self.list
	list:add(e)
end

function Renderer:init(world)
	self.world = world
	self.list = set()
	self.list_ui = set()

	!if _DEV then
	self.debug_batched = {}
	!end

	for k in pairs(self.__definition) do
		self[k].onAdded = function(pool, e) self:add_to_pool(pool, e) end
	end
end

function Renderer:draw_bg()
	if not self.e_bg then return end
	self:render_sprite(self.e_bg)
end

function Renderer:draw(is_ui)
	@@sassert(is_ui, type(is_ui) == "boolean")
	!if _DEV then
	for _, v in pairs(self.debug_batched) do
		v.current = 0
		v.highest = 0
	end
	!end

	local list = is_ui and self.list_ui or self.list

	for _, e in list:ipairs() do
		local culled = e.cullable and e.cullable.value
		if e.nf_renderer or e.hidden or culled then return end

		local no_shader, temp_shader = e.no_shader
		if no_shader then
			temp_shader = love.graphics.getShader()
			love.graphics.setShader()
		end

		local color = e.color
		if color then
			love.graphics.setColor(color.value)
		end

		if self.pool_sprite:has(e) then
			self:render_sprite(e)
		elseif self.pool_text:has(e) or self.pool_static_text:has(e) then
			self:render_text(e)
		elseif self.pool_circle:has(e) then
			self:render_circle(e)
		elseif self.pool_point:has(e) then
			self:render_point(e)
		end

		if no_shader then
			love.graphics.setShader(temp_shader)
		end
	end
end

function Renderer:render_circle(e)
	local pos = e.pos
	local circle = e.circle
	local mode = e.draw_mode.value
	local arc_type = e.arc_type

	local line_width = e.line_width
	if line_width then
		love.graphics.setLineWidth(line_width.value)
	end

	if circle.is_arc then
		if arc_type then
			love.graphics.arc(mode, arc_type.value, pos.x, pos.y,
				circle.radius, circle.start_angle, circle.end_angle, circle.segments)
		else
			love.graphics.arc(mode, pos.x, pos.y,
				circle.radius, circle.start_angle, circle.end_angle, circle.segments)
		end
	else
		love.graphics.circle(mode, pos.x, pos.y, circle.radius, circle.segments)
	end
end

function Renderer:render_point(e)
	local pos = e.pos
	love.graphics.setPointSize(e.point.value)
	love.graphics.points(pos.x, pos.y)
end

function Renderer:draw_rect_ex(e)
	local pos = e.pos
	local rect = e.rect
	local draw_mode = e.draw_mode.value
	local x, y, w, h = pos.x, pos.y, rect.w, rect.h
	local rx, ry = 0, 0

	local border = e.rect_border
	if border then
		rx = border.rx
		ry = border.ry
	end

	local t = e.transform
	if t then
		w = w * t.sx
		h = h * t.sy
		if t.ox == 0.5 then
			x = x - rect.half_w
		elseif t.ox == 1 then
			x = x - w
		end
		if t.oy == 0.5 then
			y = y - rect.half_h
		elseif t.oy == 1 then
			y = y - h
		end
	end

	local lw, temp_lw = e.line_width
	if lw then
		temp_lw = love.graphics.getLineWidth()
		love.graphics.setLineWidth(lw.value)
	end

	love.graphics.setLineStyle("rough")
	love.graphics.rectangle(draw_mode, x, y, w, h, rx, ry)

	if lw then
		love.graphics.setLineWidth(temp_lw)
	end
end

function Renderer:render_text(e)
	local str = e.text and e.text.value
	if #str == 0 then return end

	local font = e.font or e.font_sdf
	if font then
		love.graphics.setFont(font.value)
	end

	local current_font = love.graphics.getFont()
	local r, sx, sy, ox, oy, kx, ky

	local textf = e.textf
	local static_text = e.static_text
	local transform = e.transform
	if transform then
		r = transform.rotation
		sx, sy = transform.sx, transform.sy
		ox, oy = transform.ox, transform.oy
		kx, ky = transform.kx, transform.ky

		if transform.ox == 0.5 then
			if static_text then
				ox = static_text.obj:getWidth() * 0.5
			elseif textf then
				ox = textf.limit * 0.5
			else
				ox = current_font:getWidth(str) * 0.5
			end
		end

		if transform.oy == 0.5 then
			if static_text then
				oy = static_text.obj:getHeight() * 0.5
			elseif textf then
				local lines = current_font:getWidth(str)/textf.limit
				lines = math.ceil(lines)
				oy = current_font:getHeight(str) * 0.5 * lines
			else
				oy = current_font:getHeight(str) * 0.5
			end
		elseif transform.oy == 1 then
			if static_text then
				oy = static_text.obj:getHeight()
			else
				oy = current_font:getHeight(str)
			end
		end
	end

	local sdf = e.sdf
	if sdf then
		sx = sdf.sx
		sy = sdf.sy
	end

	local pos = e.pos
	local x, y = pos.x, pos.y

	local rfp = e.reflowprint
	if rfp then
		x = x - ox
		y = y - oy
		ReflowPrint(rfp.dt / rfp.current, str, x, y, rfp.width, rfp.alignment, sx, sy)
	elseif static_text then
		love.graphics.draw(static_text.obj, x, y, r, sx, sy, ox, oy, kx, ky)
	elseif textf then
		love.graphics.printf(str, x, y, textf.limit, textf.align, r, sx, sy, ox, oy)
	else
		love.graphics.print(str, x, y, r, sx, sy, ox, oy, kx, ky)
	end
end

function Renderer:setup_sprite(e)
	local sprite = e.sprite
	!if _GLSL_NORMALS then
	if sprite.container == "array_images" then
		e:give("array_image")
	end
	!end

	!if _DEV then
	local s_id = sprite.resource_id
	if not self.debug_batched[s_id] then
		self.debug_batched[s_id] = {current = 0, highest = 0}
	end
	!end
end

local function draw(e, ...)
	local outline = e.outline and e.outline.outliner
	if outline then
		outline:draw(e.outline_val.value, ...)
	else
		!if _GLSL_NORMALS then
		local array_image = e.array_image
		if array_image then
			love.graphics.drawLayer(array_image.image, 1)
		else
			love.graphics.draw(...)
		end
		!else
		love.graphics.draw(...)
		!end
	end
end

function Renderer:render_sprite(e)
	local rot, sx, sy, ox, oy, kx, ky
	local pos = e.pos
	local sprite = e.sprite

	local quad = e.quad
	if quad then
		local quad_transform = e.quad_transform
		if quad_transform then
			rot = quad_transform.rotation
			sx, sy = quad_transform.sx, quad_transform.sy
			ox, oy = quad_transform.ox, quad_transform.oy
			kx, ky = quad_transform.kx, quad_transform.ky
		end
		draw(e, sprite.image, quad.quad, pos.x, pos.y, rot, sx, sy, ox, oy, kx, ky)
	else
		local transform = e.transform
		if transform then
			rot = transform.rotation
			sx, sy = transform.sx, transform.sy
			ox, oy = Helper.get_offset(e)
			kx, ky = transform.kx, transform.ky
		end
		draw(e, sprite.image, pos.x, pos.y, rot, sx, sy, ox, oy, kx, ky)
	end

	!if _DEV then
	local s_id = sprite.resource_id
	local db = self.debug_batched[s_id]
	if db and self.debug_prev_id and self.debug_prev_id == s_id then
		db.current = db.current + 1
	end
	if db and self.debug_prev_id ~= s_id then
		db.highest = math.max(db.highest, db.current)
		db.current = 0
	end
	self.debug_prev_id = s_id
	!end
end

return Renderer
