local Concord = require("modules.concord.concord")
local List = require("modules.concord.concord.list")

local Renderers = {
	sprite = require("renderers.sprite"),
	text = require("renderers.text"),
	rect = require("renderers.rect"),
	circle = require("renderers.circle"),
	point = require("renderers.point"),
	ui = require("renderers.ui"),
}

local Renderer = Concord.system({
	pool_circle = {"circle", "draw_mode", "pos"},
	pool_point = {"point", "pos"},
	pool_rect = {"rect", "pos", "draw_mode"},
	pool_text = {"text", "pos"},
	pool_static_text = {"static_text", "pos", "font"},
	pool_bg = {"bg", "sprite", "pos"},
	pool_sprite = {"sprite", "pos", "!bg"},
	!if _DEV then
	pool_layer = {"sprite", "pos", "layer"},
	!end
})

local renderer_per_pool = {
	pool_circle = Renderers.circle,
	pool_point = Renderers.point,
	pool_rect = Renderers.rect,
	pool_text = Renderers.text,
	pool_static_text = Renderers.text,
	pool_bg = Renderers.sprite,
	pool_sprite = Renderers.sprite,
	!if _DEV then
	pool_layer = Renderers.sprite,
	!end
}

!if _DEV then
for k in pairs(renderer_per_pool) do
	@@assert(Renderer.__definition[k], k .. " must exists")
end
!end

Renderer.draw_bg = Renderers.sprite.render_bg
Renderer.draw_ui = Renderers.ui.render

local function get_list(self, e_or_bool)
	@@sassert(e_or_bool, type(e_or_bool) == "boolean" or e_or_bool.__isEntity)
	local is_ui = e_or_bool and (type(e_or_bool) == "boolean" or e_or_bool.ui_element)
	return is_ui and self.list_ui or self.list
end

local function sort_z(a, b)
	local a_z, b_z = a.z_index, b.z_index
	if a_z == nil or b_z == nil then return end

	if a_z.sortable and b_z.sortable then
		return a.pos.y < b.pos.y
	elseif a_z.current and b_z.current then
		return a_z.current < b_z.current
	end
	return a_z.value < b_z.value
end

function Renderer:init(world)
	self.world = world
	self.list, self.list_ui = List(), List()

	for _, renderer in pairs(Renderers) do
		if renderer.init then
			renderer.init(self)
		end
	end

	!if _DEV then
	Renderers.sprite.debug_list = self.list
	!end

	for pool_id in pairs(self.__definition) do
		local pool = self[pool_id]
		pool.id = pool_id
		pool.onAdded = function(p, e) self:pool_on_added(p, e) end
		pool.onRemoved = function(p, e) self:pool_on_removed(p, e) end
	end
end

function Renderer:sort_by_z(list)
	if list.size == 0 then return end
	list:sort(sort_z)

	for i, e in ipairs(list) do
		local z_index = e.z_index
		if z_index then
			z_index.current = i
		end
	end
end

function Renderer:pool_on_added(pool, e)
	local should_sort = false
	if pool == self.pool_layer or pool == self.pool_sprite then
		Renderers.sprite.setup_sprite(e)
		should_sort = true
	elseif pool == self.pool_bg then
		Renderers.sprite.set_bg(e)
	elseif pool == self.pool_text and e.sdf then
		@@assert(e.font_sdf, "sdf must have font_sdf")
		@@assert(not e.font, "sdf must NOT have font")
	elseif pool == self.pool_static_text then
		@@assert(not e.sdf, "static_font can NOT use sdf font")
		e.static_text.obj = love.graphics.newText(e.font.value, e.static_text.value)
	end

	local list = get_list(self, e)
	list:add(e)
	e.renderer = renderer_per_pool[pool.id]

	if should_sort then
		self:sort_by_z(list)
	end
end

function Renderer:pool_on_removed(pool, e)
	if pool == self.pool_sprite and not e.z_index then return end
	local list = get_list(self, e)
	list:remove(e)
	self:sort_by_z(list)
end

function Renderer:draw(is_ui)
	@@sassert(is_ui, type(is_ui) == "boolean")
	!if _DEV then
	if not is_ui then
		Renderers.sprite.debug_batching()
	end
	!end

	local list = get_list(self, is_ui)
	for _, e in ipairs(list) do
		local culled = e.cullable and e.cullable.value
		local is_not_drawn = e.nf_renderer or e.hidden or culled

		if not is_not_drawn then
			local no_shader, temp_shader = e.no_shader
			if no_shader then
				temp_shader = love.graphics.getShader()
				love.graphics.setShader()
			end

			local color = e.color
			if color then
				love.graphics.setColor(color.value)
			end

			e.renderer.render(e)

			!if _DEV then
			if not is_ui and e.renderer == Renderers.sprite then
				Renderers.sprite.debug_batching_update(e)
			end
			!end

			if no_shader then
				love.graphics.setShader(temp_shader)
			end
		end
	end
end

function Renderer:cleanup()
	tablex.clear(self.list)
	tablex.clear(self.list_ui)
	for _, renderer in pairs(Renderers) do
		if renderer.cleanup then
			renderer.cleanup()
		end
	end
end

!if _DEV then
local Slab = require("modules.slab")

local function show_list(id, list)
	if Slab.BeginTree(id) then
		Slab.Indent()
		for i, e in ipairs(list) do
			local culled = e.cullable and e.cullable.value
			local is_not_drawn = e.nf_renderer or e.hidden or culled
			Slab.CheckBox(not is_not_drawn, i)
			Slab.SameLine()
			Slab.Text(e.id.value)
			Slab.SameLine()
			Slab.Text(e.renderer.id)
			Slab.SameLine()
			Slab.Text(tostring(e))
		end
		Slab.Unindent()
		Slab.EndTree()
	end
end

function Renderer:debug_update(dt)
	if not self.debug_show then return end
	self.debug_show = Slab.BeginWindow("renderer", {
		Title = "Renderer",
		IsOpen = self.debug_show
	})
	show_list("list", self.list)
	show_list("ui list", self.list_ui)
	for k, v in pairs(Renderers) do
		if v.debug_update then
			if Slab.CheckBox(v.debug_show, k) then
				v.debug_show = not v.debug_show
			end
			if v.debug_show then
				v.debug_update(dt)
			end
		end
	end
	Slab.EndWindow()
end
!end

return Renderer
