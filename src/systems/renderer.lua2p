local Concord = require("modules.concord.concord")

local RendererSprite = require("renderers.sprite")
local RendererText = require("renderers.text")
local RendererRect = require("renderers.rect")
local RendererCircle = require("renderers.circle")
local RendererPoint = require("renderers.point")

local Renderer = Concord.system({
	pool_circle = {"circle", "draw_mode", "pos",},
	pool_point = {"point", "pos", },
	pool_rect = {"rect", "pos", "draw_mode",},
	pool_text = {"text", "pos", },
	pool_static_text = {"static_text", "pos", "font",},
	pool_bg = {"bg", "sprite", "pos",},
	pool_sprite = {"sprite", "pos", "!bg",},
	!if _DEV then
	pool_layer = {"sprite", "pos", "layer",},
	!end
})

local renderer_per_pool = {
	pool_circle = RendererCircle,
	pool_point = RendererPoint,
	pool_rect = RendererRect,
	pool_text = RendererText,
	pool_static_text = RendererText,
	pool_bg = RendererSprite,
	pool_sprite = RendererSprite,
	!if _DEV then
	pool_layer = RendererSprite,
	!end
}

function Renderer:init(world)
	self.world = world
	self.list, self.list_ui = set(), set()

	for pool_id in pairs(self.__definition) do
		local pool = self[pool_id]
		pool.id = pool_id
		pool.onAdded = function(p, e) self:add_to_pool(p, e) end
	end
end

function Renderer:add_to_pool(pool, e)
	if pool == self.pool_layer or pool == self.pool_sprite then
		RendererSprite:setup_sprite(e)
	elseif pool == self.pool_bg then
		!if _DEV then
		@@assert(self.e_bg == nil, "There can only be 1 entity for background")
		!end
		self.e_bg = e
	elseif pool == self.pool_text and e.sdf then
		@@assert(e.font_sdf, "sdf must have font_sdf")
		@@assert(not e.font, "sdf must NOT have font")
	elseif pool == self.pool_static_text then
		@@assert(not e.sdf, "static_font can NOT use sdf font")
		e.static_text.obj = love.graphics.newText(e.font.value, e.static_text.value)
	end

	e.renderer = renderer_per_pool[pool.id]

	local list = e.ui_element and self.list_ui or self.list
	list:add(e)
end

function Renderer:draw_bg()
	if not self.e_bg then return end
	self.e_bg.renderer:render(self.e_bg)
end

function Renderer:draw(is_ui)
	@@sassert(is_ui, type(is_ui) == "boolean")
	!if _DEV then
	RendererSprite:debug_batching()
	!end

	local list = is_ui and self.list_ui or self.list
	for _, e in list:ipairs() do
		local culled = e.cullable and e.cullable.value
		if e.nf_renderer or e.hidden or culled then return end

		local no_shader, temp_shader = e.no_shader
		if no_shader then
			temp_shader = love.graphics.getShader()
			love.graphics.setShader()
		end

		local color = e.color
		if color then
			love.graphics.setColor(color.value)
		end

		e.renderer:render(e)

		if no_shader then
			love.graphics.setShader(temp_shader)
		end
	end
end

return Renderer
