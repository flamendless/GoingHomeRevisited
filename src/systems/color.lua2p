local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Timer = require("modules.hump.timer")

local Color = Concord.system({
	pool = {"color", "id"},
	pool_fade_to_black = {"color", "fade_to_black"},
	pool_fade_in_out = {"color", "color_fade_in_out"},
	pool_fade_in = {"color", "color_fade_in"},
	pool_fade_out = {"color", "color_fade_out"},
	pool_colors = {"color", "lerp_colors"},
	pool_color = {"color", "target_color"},
	pool_blink = {"color", "blink"},
})

--TODO implement checking for alpha_range

local function lerp_colors(lc, color)
	local duration = lc.duration
	local delay = lc.delay
	local next_value = lc.index + 1

	if next_value > #lc.colors then
		next_value = 1
	end

	local next_color = lc.colors[next_value]

	lc.flux = Flux.to(color.value, duration, {
			[1] = next_color[1],
			[2] = next_color[2],
			[3] = next_color[3],
			[4] = next_color[4],
		})
		:delay(delay)
		:oncomplete(function()
			lc.current = next_value

			if lc.current > #lc.colors then
				lc.current = 1
			end

			lerp_colors(lc, color)
		end)

	local ease = lc.ease
	if ease then lc.flux:ease(ease.value) end
end

function Color:init(world)
	self.world = world
	self.pool_fade_in.onAdded = function(pool, e)
		local c = e.color_fade_in
		local f_in = e.fade_in_target_alpha
		local target = 1

		if f_in then
			target = f_in.value
		end

		local f = Flux.to(e.color.value, c.duration, {[4] = target})
			:delay(c.delay)
			:oncomplete(function()
				local on_complete = e.color_fade_in_finish
				if on_complete then
					self.world:emit(on_complete.signal, unpack(on_complete.args))
					-- e:remove("color_fade_in_finish")
				end
				e:remove("color_fade_in")
			end)

		local ease = e.ease
		if ease then f:ease(ease.value) end
	end

	self.pool_fade_out.onAdded = function(pool, e)
		local f = Flux.to(e.color.value, e.color_fade_out.duration, {[4] = 0})
			:delay(e.color_fade_out.delay)
			:oncomplete(function()
				local on_complete = e.color_fade_out_finish
				if on_complete then
					self.world:emit(on_complete.signal, unpack(on_complete.args))
					-- e:remove("color_fade_out_finish")
				end
				e:remove("color_fade_out")
			end)

		local ease = e.ease
		if ease then f:ease(ease.value) end
	end

	self.pool_fade_in_out.onAdded = function(pool, e)
		local color = e.color
		local f_in_out = e.color_fade_in_out
		local ease = e.ease
		local f
		local count = 0
		local fn_out, fn_in

		fn_out = function()
			f = Flux.to(color.value, f_in_out.duration, {[4] = 0})
				:oncomplete(function()
					fn_in()
					count = count + 1

					if count == f_in_out.count then
						f:stop()
						e:remove("color_fade_in_out")
					end
				end)

			if ease then f:ease(ease.value) end
		end

		fn_in = function()
			f = Flux.to(color.value, f_in_out.duration, {[4] = 1})
				:oncomplete(function()
					fn_out()
					count = count + 1

					if count == f_in_out.count then
						f:stop()
						e:remove("color_fade_in_out")
					end
				end)

			if ease then f:ease(ease.value) end
		end

		if color.value[4] == 1 then
			fn_out()
		elseif color.value[4] == 0 then
			fn_in()
		end
	end

	self.pool_color.onAdded = function(pool, e)
		local color = e.color
		local target = e.target_color
		local target_color = e.target_color.target
		local on_finish = e.lerp_on_finish
		local on_finish_multi = e.lerp_on_finish_multi

		local f = Flux.to(color.value, target.duration, {
				[1] = target_color[1],
				[2] = target_color[2],
				[3] = target_color[3],
				[4] = target_color[4],
			})
			:delay(target.delay)
			:oncomplete(function()
				if on_finish then
					Timer.after(on_finish.delay, function()
						self.world:emit(on_finish.signal, unpack(on_finish.args))
					end)
					e:remove("lerp_on_finish")
				elseif on_finish_multi then
					for _, t in ipairs(on_finish_multi.values) do
						Timer.after(t.delay or 0, function()
							self.world:emit(t.signal, t.args and unpack(t.args))
						end)
					end
					e:remove("lerp_on_finish_multi")
				end
				e:remove("target_color")
			end)

		local ease = e.ease
		if ease then f:ease(ease.value) end
	end

	self.pool_blink.onAdded = function(pool, e)
		self:setup_blink(e)
	end
end

function Color:setup_blink(e)
	local blink = e.blink
	local color = e.color.value
	Flux.to(color, blink.dur, {
		[4] = 1 - color[4]
	})
	:oncomplete(function()
		blink.completed = blink.completed + 1
		if blink.completed < blink.count then
			self:setup_blink(e)
		else
			local obe = e.on_blink_end
			if obe then
				self.world:emit(obe.signal, e)
			end
			if e.remove_blink_on_end then
				e:remove("blink")
				:remove("remove_blink_on_end")
				:remove("on_blink_end")
			end
		end
	end)
end

function Color:start_fade()
	for _, e in ipairs(self.pool_fade_to_black) do
		local color = e.color
		local fade = e.fade_to_black

		local f = Flux.to(color.value, fade.duration, {
				[1] = 0, [2] = 0, [3] = 0, [4] = 0
			})
			:delay(fade.delay)

		local ease = e.ease
		if ease then f:ease(ease.value) end
	end
end

function Color:start_colors_lerp()
	for _, e in ipairs(self.pool_colors) do
		local color = e.color
		local lc = e.lerp_colors
		lerp_colors(lc, color)
	end
end

function Color:lerp_color(e, color, dur, ease)
	@@assert(e.__isEntity and e.color)
	@@assert(type(color) == "table")
	@@assert(type(dur) == "number")
	@@sassert(ease, type(ease) == "string")
	Flux.to(e.color.value, dur, {
		[1] = color[1],
		[2] = color[2],
		[3] = color[3],
		[4] = color[4],
	}):ease(ease or "linear")
end

return Color
