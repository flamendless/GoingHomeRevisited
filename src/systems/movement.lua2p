local Concord = require("modules.concord.concord")

local Movement = Concord.system({
	pool = {$_C_SPEED, $_C_GRAVITY, $_C_BODY, $_C_MOVEMENT, $_C_CAN_MOVE},
})

function Movement:update(dt)
	for _, e in ipairs(self.pool) do
		local vel_x, vel_y = 0, e.gravity.value * dt
		local body = e.body

		if body.dx ~= 0 then
			vel_x = e.speed.vx * body.dx * dt
		end

		body.vel_x, body.vel_y = vel_x, vel_y
	end
end

function Movement:update_speed_data(e, anim_name)
	@@assert(e.__isEntity and e.animation and e.speed and e.speed_data and e.body)
	@@assert(type(anim_name) == "string")
	local body = e.body
	if body.dx ~= 0 then
		local new_speed = e.speed_data.speed_data[anim_name]
		if not new_speed then return end
		local speed = e.speed
		speed.vx = mathx.lerp(speed.vx, new_speed.x, 0.5)
	end
end

!if _DEV then
local Slab = require("modules.slab")
local flags = {
	gravity = true,
}

function Movement:debug_update(dt)
	if not self.debug_show then return end
	self.debug_show = Slab.BeginWindow("Movement", {
		Title = self.debug_title,
		IsOpen = self.debug_show
	})
	if Slab.CheckBox(flags.gravity, "gravity") then
		flags.gravity = not flags.gravity
		for _, e in ipairs(self.pool) do
			local gravity = e.gravity
			if not flags.gravity then
				gravity.temp = gravity.value
				gravity.value = 0
			else
				gravity.value = gravity.temp
			end
		end
	end
	Slab.EndWindow()
end

function Movement:debug_on_drag(bool)
	@@assert(type(bool) == "boolean")
	for _, e in ipairs(self.pool) do
		local gravity = e.gravity
		if bool then
			gravity.temp = gravity.value
			gravity.value = 0
		else
			gravity.value = gravity.temp
		end
		flags.gravity = not bool
	end
end
!end

return Movement
