local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")

local ID = Concord.system({
	pool = {"id"},
	!if _DEV then
	pool_bump = {"id", "bump"},
	!end
})

function ID:init(world)
	self.world = world
	self.ref_id = {}
	self.pool.onAdded = function(pool, e)
		local id = e.id
		if not e.preserve_id then
			local ref_id = self.ref_id[id.value]
			if ref_id then
				self.ref_id[id.value] = self.ref_id[id.value] + 1
				id.value = id.value .. self.ref_id[id.value]
			else
				self.ref_id[id.value] = 1
			end
		end
		!if _DEV then
		self.world:emit("on_add_entity", e)
		!end
		Log.info("Added entity: " .. id.value)
	end

	self.pool.onRemoved = function(pool, e)
		local id = e.id and e.id.value
		if id then
			self.ref_id[e.id.value] = nil
		else
			for i = #pool, 1, -1 do
				if e == pool[i] then
					table.remove(self.ref_id, i)
				end
			end
		end
		!if _DEV then
		self.world:emit("on_remove_entity", e)
		!end
		Log.info("Removed entity: " .. (id or tostring(e)))
	end
end

!if _DEV then
local Slab = require("modules.slab")

local flags = {
	right_clicked = false
}
local e_right_clicked

function ID:debug_e_right_clicked(e)
	e_right_clicked = e
	flags.right_clicked = true
end

function ID:debug_update(dt)
	if not self.debug_show then return end
	if e_right_clicked then
		flags.right_clicked = Slab.BeginWindow("components", {
			Title = "Components",
			IsOpen = flags.right_clicked,
		})
		for _, c in pairs(e_right_clicked) do
			if type(c) == "table" and c.__isComponent then
				Slab.Text(c.__name)
			end
		end
		Slab.EndWindow()

		if not flags.right_clicked then
			e_right_clicked = nil
		end
	end
end
!end

return ID
