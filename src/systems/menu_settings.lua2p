local Concord = require("modules.concord.concord")
local Slab = require("modules.slab")

local Keybinds = require("keybinds")
local Palette = require("palette")
local Settings = require("settings")
local WindowMode = require("window_mode")

local MenuSettings = Concord.system({
})

function MenuSettings:init(world)
	self.world = world
end

function MenuSettings:init_settings()
	self.show_message_box_reset = false
	self.show_message_box_conflict = {}
	self.current_gq = Settings.current.graphics_quality
	self.current_wm = WindowMode.list[Settings.current.current_wm]
	self.flags = {
		game_sounds = Settings.current.game_sounds,
		game_music = Settings.current.game_music,
	}
	self.wm_list = WindowMode.list
	self.list_gq = Settings.get_gq_list()
	self.ww = love.graphics.getWidth()
	self.wh = love.graphics.getHeight()
end

function MenuSettings:update_settings(dt)
	!if _PLATFORM == "desktop" then
	self:update_desktop(dt)
	!elseif _PLATFORM == "mobile" then
	!end
end

function MenuSettings:slab_title(title, text)
	Slab.BeginLayout(title, { AlignX = "center", AlignY = "top", Columns = 1 })
	Slab.SetLayoutColumn(1)
	if text then Slab.Text(text) end
	Slab.EndLayout()
	Slab.Separator()
end


!if _PLATFORM == "desktop" then
function MenuSettings:update_desktop(dt)
	local x = 64
	local y = 64
	local width = self.ww - (x * 2)
	local height = self.wh - (y * 2)
	Slab.Update(dt)
	Slab.BeginWindow("Settings", {
		X = x, Y = y, W = width, H = height,
		AllowMove = false, AllowResize = false, AutoSizeWindow = false, IsOpen = true,
		BgColor = Palette.windows.settings
	})

	self:slab_title("GeneralSettingsTitle", "GENERAL SETTINGS")
	Slab.BeginLayout("GeneralSettingsLayout", { AlignX = "center", AlignY = "top", Columns = 2 })
		Slab.SetLayoutColumn(1)
		Slab.Text("Window Resolution")
		Slab.Text("Graphics Quality")

		if Slab.CheckBox(self.flags.game_sounds, "Game Sounds") then
			self.flags.game_sounds = not self.flags.game_sounds
		end
		if Slab.CheckBox(self.flags.game_music, "Game Music") then
			self.flags.game_music = not self.flags.game_music
		end

		Slab.SetLayoutColumn(2)
		if Slab.BeginComboBox("WindowMode", { Selected = self.current_wm }) then
			for i, str in ipairs(self.wm_list) do
				if Slab.TextSelectable(str) then
					self.current_wm = str
				end
			end
			Slab.EndComboBox()
		end

		if Slab.BeginComboBox("GraphicsQuality", { Selected = self.current_gq }) then
			for i, str in ipairs(self.list_gq) do
				if Slab.TextSelectable(str) then
					self.current_gq = str
				end
			end
			Slab.EndComboBox()
		end

		--TODO add sliders here
		Slab.Text("Volume Game Sounds")
		Slab.Text("Volume Game Music")
	Slab.EndLayout()
	Slab.Separator()

	self:slab_title("KeybindingsTitle", "KEYBINDINGS")
	Slab.BeginLayout("KeybindingsLayout", { AlignX = "center", AlignY = "top", Columns = 3 })
		for key_name, key_table in pairs(Keybinds.ui) do
			local id = "ui_" .. key_name
			Slab.SetLayoutColumn(1)
			Slab.Text(id)
			for i, key_ui in ipairs(key_table) do
				Slab.SetLayoutColumn(i + 1)
				local id2 = id .. "_" .. i
				if Slab.BeginComboBox(id2, { Selected =  key_ui}) then
					for j, new_key_ui in ipairs(Keybinds.key_constants) do
						if Slab.TextSelectable(new_key_ui) then
							local is_conflict, conflict_key_name = Keybinds.check_for_conflicts_ui(key_name, new_key_ui)
							if is_conflict then
								self.show_message_box_conflict = { true, conflict_key_name }
							end
							key_table[i] = new_key_ui
						end
					end
					Slab.EndComboBox()
				end
			end
			if #key_table == 1 then
				Slab.SetLayoutColumn(3)
				Slab.NewLine()
			end
		end
	Slab.EndLayout()
	Slab.Separator()

	Slab.BeginLayout("GeneralOptionsLayout", { AlignX = "center", AlignY = "bottom", Columns = 1 })
		if Slab.Button("Reset to defaults") then
			show_message_box_reset = true
		end

		if Slab.Button("Apply") then
			Settings.update_graphics_quality(self.current_gq)
			Settings.update_window_mode(self.current_wm)
			Settings.set_game_sounds(self.flag_game_sounds)
			Settings.set_game_music(self.flag_game_music)
			Settings.update_keybindings()
			Settings.overwrite()
		end

		if Slab.Button("Return to Main Menu") then
			love.keypressed("escape")
		end
	Slab.EndLayout()

	if show_message_box_reset then
		local res = Slab.MessageBox("Alert", "Are you sure you want to reset the settings to default?", { Buttons = { "Confirm", "Cancel" } })
		if res ~= "" then
			table.copy(Keybinds.ui_default, Keybinds.ui)
			Settings.create_new()
			self.world:emit("init_settings")
			show_message_box_reset = false
		end
	end

	if self.show_message_box_conflict[1] then
		local res = Slab.MessageBox("Alert", "There's a conflict with button " .. self.show_message_box_conflict[2], { Buttons = { "Confirm" } })
		if res ~= "" then
			self.show_message_box_conflict[1] = false
			self.show_message_box_conflict[2] = nil
		end
	end

	Slab.EndWindow()
end
!end

return MenuSettings
