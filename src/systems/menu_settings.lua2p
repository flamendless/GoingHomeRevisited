local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")
local Slab = require("modules.slab")
local Style = Slab.GetStyle()

local Audio = require("audio")
local Inputs = require("inputs")
local Resources = require("resources")
local Settings = require("settings")
local WindowMode = require("window_mode")

local MenuSettings = Concord.system({})

local ordered_key_map = {
	"left", "right", "down", "up",
	"interact", "cancel",
	"flashlight", "inventory",
	"pause", "run_mod",
}

local key_title = {
	left = "move left",
	right = "move right",
	up = "move up",
	down = "move down",
	-- interact = "interact",
	cancel = "cancel/return",
	flashlight = "toggle flashlight",
	inventory = "toggle inventory",
	pause = "pause/unpause",
	run_mod = "run (hold)",
}

function MenuSettings:init(world)
	self.world = world
	Slab.Initialize()
	if not Style.API.LoadStyle("slab.style", true, true) then
		Log.warn("Can't load slab.style")
	end
end

function MenuSettings:init_settings()
	local sc = tablex.copy(Settings.current)
	self.show_message_box_reset = false
	self.current_gq = sc.graphics_quality
	self.current_wm = sc.window_mode
	self.window_mode = WindowMode.list[self.current_wm]
	self.wm_list = WindowMode.list
	self.key_id = sc.key_map
	self.key_map = tablex.copy(Inputs.map)
	self.rev_key_map = tablex.copy(Inputs.rev_maps[self.key_id])
	self.muted = sc.muted
	self.volume = sc.volume
	self.show_keys = sc.show_keys

	for k, v in pairs(key_title) do
		for k2, v2 in pairs(self.key_map) do
			if k == v2 then
				self.key_map[k2] = v
				break
			end
		end
	end

	!if _DEV then
	for k, _ in pairs(Inputs.dev_map) do
		self.key_map[k] = nil
	end
	!end
end

local function slab_title(title, text)
	Slab.BeginLayout(title, {AlignX = "center", AlignY = "top", Columns = 1})
	Slab.SetLayoutColumn(1)
	if text then Slab.Text(text) end
	Slab.EndLayout()
	Slab.Separator()
end

function MenuSettings:draw_settings()
	Slab.Draw()
end

!if _PLATFORM == "desktop" then
function MenuSettings:update_settings(dt)
	local ww, wh = love.graphics.getDimensions()
	local x, y = 64, 64
	local width = ww - (x * 2)
	local height = wh - (y * 2)

	Slab.Update(dt)
	Slab.BeginWindow("Settings", {
			X = x, Y = y, W = width, H = height,
			AllowMove = false, AllowResize = false, AutoSizeWindow = false,
			IsOpen = true,
		})

	slab_title("GeneralSettingsTitle", "GENERAL SETTINGS")
	Slab.BeginLayout("GeneralSettingsLayout", {
			AlignX = "center", AlignY = "top", Columns = 2
		})
		Slab.SetLayoutColumn(1)
		Slab.Text("Window Resolution")
		Slab.Text("Graphics Quality")
		if Slab.CheckBox(not self.muted, "Sounds") then
			self.muted = not self.muted
			Audio.set_mute(self.muted)
		end
		if Slab.CheckBox(self.show_keys, "Control Keys Guide") then
			self.show_keys = not self.show_keys
		end

		Slab.SetLayoutColumn(2)

		if Slab.BeginComboBox("WindowMode", {Selected = self.window_mode}) then
			for i, str in ipairs(self.wm_list) do
				if Slab.TextSelectable(str) then
					self.current_wm = i
					self.window_mode = str
				end
			end
			Slab.EndComboBox()
		end

		if Slab.BeginComboBox("GraphicsQuality", {Selected = self.current_gq}) then
			for _, str in ipairs(Settings.available_graphics_quality) do
				if Slab.TextSelectable(str) then
					self.current_gq = str
				end
			end
			Slab.EndComboBox()
		end

		if not self.muted then
			if Slab.InputNumberSlider("Volume", self.volume, 0, 100, {Precision = 0}) then
				self.volume = Slab.GetInputNumber()
				Audio.set_volume(self.volume)
			end
		else
			Slab.Text("MUTED")
		end
		Slab.NewLine()
	Slab.EndLayout()
	Slab.Separator()

	slab_title("KeybindingsTitle", "KEYBINDINGS")
	local scale = 2
	local img_kb = Resources.data.images["keyboard" .. self.key_id]
	local iw = img_kb:getWidth()
	Slab.SetCursorPos((width * 0.5) - (iw * scale * 0.5))
	Slab.Image("img_keyboard", {
		Image = img_kb,
		Scale = scale,
	})

	Slab.BeginLayout("KeybindingsLayout", {AlignX = "center", AlignY = "top", Columns = 2})
		Slab.SetLayoutColumn(1)
		Slab.Text("Key Map")
		Slab.SetLayoutColumn(2)
		if Slab.BeginComboBox("KeyMap", {Selected = Inputs.get_map_names()[self.key_id]}) then
			for i, id in ipairs(Inputs.get_map_names()) do
				if Slab.TextSelectable(id) then
					self.key_id = i
					self.key_map = tablex.copy(Inputs.get_map_keys()[i])
					self.rev_key_map = tablex.copy(Inputs.rev_maps[i])
					for k, v in pairs(key_title) do
						for k2, v2 in pairs(self.key_map) do
							if k == v2 then
								self.key_map[k2] = v
								break
							end
						end
					end
				end
			end
			Slab.EndComboBox()
		end

		for _, key in ipairs(ordered_key_map) do
			local k = self.rev_key_map[key]
			Slab.SetLayoutColumn(1)
			Slab.Text(k)
			Slab.SetLayoutColumn(2)
			Slab.Text(self.key_map[k])
		end
	Slab.EndLayout()
	Slab.Separator()

	Slab.BeginLayout("GeneralOptionsLayout", {
			AlignX = "center", AlignY = "bottom", Columns = 1
		})
		if Slab.Button("Apply") then
			Settings.set_from_table({
					graphics_quality = self.current_gq,
					window_mode = self.current_wm,
					muted = self.muted,
					volume = self.volume,
					key_map = self.key_id,
					show_keys = self.show_keys,
				}, true)
			Inputs.init(self.key_id)
		end
		Slab.SameLine()

		if Slab.Button("Reset to defaults") then
			self.show_message_box_reset = true
		end
		Slab.SameLine()

		if Slab.Button("Return to Main Menu") then
			self.world:emit("menu_back")
		end
	Slab.EndLayout()

	if self.show_message_box_reset then
		local res = Slab.MessageBox("Alert",
			"Are you sure you want to reset the settings to default?",
			{Buttons = {"Confirm", "Cancel"}})

		if res ~= "" then
			Settings.create_new()
			Inputs.init()
			self:init_settings()
			self.show_message_box_reset = false
		end
	end

	Slab.EndWindow()
end

!elseif _PLATFORM == "mobile" then
!end

return MenuSettings
