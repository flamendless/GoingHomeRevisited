local Concord = require("modules.concord.concord")
local Gamera = require("modules.gamera.gamera")
local TLE = require("modules.tle.timeline")

local Blur = require("blur")
local Canvas = require("canvas")
local Fade = require("fade")
local NGrading = require("ngrading")
local Resources = require("resources")
local Settings = require("settings")

local min = math.min

local Assemblages = {
	Common = require("assemblages.common"),
	Inventory = require("assemblages.inventory"),
	Player = require("assemblages.player"),
	UtilityRoom = require("assemblages.utility_room"),
	UI = require("assemblages.ui"),
}

local UtilityRoom = Concord.system({
})

function UtilityRoom:init(world)
	self.world = world
end

function UtilityRoom:state_setup()
	local w, h = Resources.data.images.utility_room:getDimensions()
	local ww, hh = love.graphics.getDimensions()

	self.buffers = {
		Canvas.create_main({}),
		Canvas.create_main({}),
	}
	self.canvas = Canvas.create_main({})
	self.scale = min(ww/w, hh/h)
	self.camera = Gamera.new(0, 0, w, h)
	self.camera:setWindow(0, 0, ww, hh)
	Concord.entity(self.world):assemble(Assemblages.Common.camera,
		self.camera, self.scale, w, h)
	Concord.entity(self.world):assemble(Assemblages.UtilityRoom.bg)

	for _, v in pairs(Assemblages.UtilityRoom.colliders) do
		Concord.entity(self.world):assemble(v, w, h)
	end
	self.world:emit("parse_room_items", "atlas_utility_room_items", "utility_room_items")

	local lut_size, lut_dusk
	if Settings.current.graphics_quality == "low" then
		lut_size = 16
		lut_dusk = Resources.data.image_data.lut_dusk_16
	else
		lut_size = 64
		lut_dusk = Resources.data.image_data.lut_dusk_64
	end
	self.effect = NGrading:new(lut_dusk, lut_size, nil, false)
	self.world:emit("create_light_shaders_ngrading", self.effect)

	for _, v in pairs(Assemblages.UtilityRoom.lights) do
		Concord.entity(self.world):assemble(v)
	end
end

function UtilityRoom:state_init()
	!if _DEV then
	local e_player = self:spawn_player()
	!end

	self.timeline = TLE.Do(function()
		self.camera:setScale(4)
		!if _DEV then
		self.world:emit("camera_follow", e_player, 0.25)
		self.world:emit("player_can_move", true)
		self.world:emit("player_can_interact", true)
		self.world:emit("player_can_run", true)
		self.timeline:Pause()
		!end
	end)
end

function UtilityRoom:state_update(dt)
	self.world:emit("preupdate", dt)
	self.world:emit("update", dt)
end

function UtilityRoom:state_draw()
	self.camera:attach()
		love.graphics.setCanvas(self.buffers[1].canvas, self.buffers[2].canvas)
			love.graphics.clear()
			self.world:emit("begin_geometry_pass")
				love.graphics.setColor(1, 1, 1)
				self.world:emit("draw_bg")
				self.world:emit("draw")
				self.world:emit("draw_z")
			love.graphics.setShader() --unset geometry_pass

		love.graphics.setCanvas(self.canvas.canvas)
			self.world:emit("begin_light_pass", self.buffers)
				love.graphics.clear()
				love.graphics.setBlendMode("add")
				self.world:emit("draw_lights")
				love.graphics.setBlendMode("alpha")
			love.graphics.setShader() --unset lighting_pass
	self.camera:detach()
			--ambient light color
			love.graphics.setBlendMode("add")
			love.graphics.setColor(0.3, 0.3, 0.3, 0.5)
			love.graphics.draw(self.buffers[1].canvas)
			love.graphics.setBlendMode("alpha")
			self.world:emit("draw_clip")
			self.world:emit("draw_ui")
		love.graphics.setCanvas() --unset canvas.canvas

	Blur.draw()
		self.canvas:render_n()
	love.graphics.setShader()

	self.world:emit("draw_inventory")
	self.world:emit("draw_dialogues")
	Fade.draw()
end

function UtilityRoom:spawn_player()
	local x, y
	!if _DEV then
	x, y = 318, 48
	!end
	if self.prev_id == "Outside" then
		x, y = 318, 48
	end
	local e_player = Concord.entity(self.world)
		:assemble(Assemblages.Player.utility_room, x, y)
	self.world:emit("face_left", e_player)
	return e_player
end

return UtilityRoom
