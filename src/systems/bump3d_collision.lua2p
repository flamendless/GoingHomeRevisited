local Concord = require("modules.concord.concord")
local Bump3D = require("modules.bump3d.bump-3dpd")

local Bump3DCollision = Concord.system({
	pool = {"collider3d", "position", "bump3d", "z_index"}
})

local filter = function(item, other)
	local other_col = other.collider3d
	return other_col.filter or "slide"
end

function Bump3DCollision:init(world)
	self.world = world
	self.bump3d_world = Bump3D.newWorld()

	self.pool.onEntityAdded = function(pool, e)
		local x = e.position.pos.x + e.collider3d.offset.x
		local y = e.position.pos.y + e.collider3d.offset.y

		self.bump3d_world:add(e, x, y, e.z_index.z, e.collider3d.size.x, e.collider3d.size.y, e.collider3d.depth)
	end
end

function Bump3DCollision:preupdate(dt)
	for _, e in ipairs(self.pool) do
		e.collider3d.is_hit = false
	end
end

function Bump3DCollision:update(dt)
	for _, e in ipairs(self.pool) do
		if e.body then
			if e.body.vel_x ~= 0 or e.body.vel_y ~= 0 then
				local pos = e.position.pos
				local cols, len

				pos.x, pos.y, z, cols, len = self.bump3d_world:move(e,
					pos.x + e.body.vel_x,
					pos.y + e.body.vel_y,
					e.z_index.z, filter)

				self.world:emit("sort_z")

				for i = 1, len do
					local c = cols[i]
					local other = c.other
					local other_col = other.collider3d
					local other_id = other.bump3d.id

					other_col.is_hit = true
					other_col.normal.x = c.normalX
					other_col.normal.y = c.normalY

					local item = c.item
					local item_col = item.collider3d

					item_col.is_hit = true
					item_col.normal.x = c.normalX
					item_col.normal.y = c.normalY
				end

				self.bump3d_world.freeCollisionTable(cols)
			end
		end
	end
end

!if not _RELEASE then
function Bump3DCollision:draw_debug()
	local items, len = self.bump3d_world:getItems()
	for i = 1, len do
		local e = items[i]
		local x, y, z, w, h, d = self.bump3d_world:getCube(e)

		if e.collider3d.is_hit then
			love.graphics.setColor(1, 0, 0, 0.3)
		else
			love.graphics.setColor(0, 1, 0, 0.3)
		end

		love.graphics.rectangle("line", x, y + z + h, w, d)
		love.graphics.rectangle("line", x, y + z, w, h)
	end
end
!end

return Bump3DCollision
