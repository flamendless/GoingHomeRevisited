local Concord = require("modules.concord.concord")
local Lume = require("modules.lume.lume")
local Timer = require("modules.hump.timer")

local DeferredLighting = Concord.system({
	pool = {"id", "point_light", "pos", "diffuse"},
	pool_disabled = {"id", "light_id", "light_disabled", "point_light", "pos", "diffuse"},
	pool_fading = {"id", "light_id", "point_light", "pos", "diffuse", "light_fading"},
	pool_flicker = {"id", "light_id", "point_light", "pos", "diffuse", "d_light_flicker"},
})

local shader_geometry = "shaders/geometry_pass.glsl"
local shader_lighting = "shaders/lighting_pass.glsl"
local lvfp = {{"lpos", "float", 4}} -- pos.xyz, scale
local lvft = {{"ldir", "float", 4}} -- dir.xyz, angle
local lvfd = {{"diffuse", "float", 3}} -- color
local r = !({math.cos(math.pi/32), math.sin(math.pi/32)})
local MAX_LIGHTS = 96

function DeferredLighting:init(world)
	self.world = world
	self.timer = Timer.new()
	self.geometry_pass = love.graphics.newShader(shader_geometry)
	self.lighting_pass = love.graphics.newShader(shader_lighting)
	self.ambiance = {1, 1, 1, 1}
	self.mesh = self:create_mesh_p()

	self.pool.onAdded = function(pool, e)
		local pos = e.pos
		local pl = e.point_light
		local diffuse = e.diffuse
		local ld = e.light_dir
		local dir = ld and ld.value
		local id = #pool
		self.mesh.pos:setVertex(id, {pos.x, pos.y, pos.z, pl.value})
		self.mesh.diffuse:setVertex(id, diffuse.value)
		if dir then
			self.mesh.dir:setVertex(id, dir)
		end
		e:give("light_id", id)
	end

	self.pool_disabled.onAdded = function(pool, e)
		self.mesh.diffuse:setVertex(e.light_id.value, {0, 0, 0})
	end

	self.pool_disabled.onRemoved = function(pool, e)
		local diffuse = e.diffuse
		self.mesh.diffuse:setVertex(e.light_id.value, diffuse.value)
	end

	self.pool_flicker.onAdded = function(pool, e)
		local dlf = e.d_light_flicker
		local diff = e.diffuse
		local orig_diff = diff.orig_value
		local signal_during = e.on_d_light_flicker_during
		local signal_after = e.on_d_light_flicker_after
		local rem = e.d_light_flicker_remove_after

		self.timer:during(dlf.during, function()
			local c = Lume.weightedchoice({on = dlf.on_chance, off = dlf.off_chance})
			if c == "on" then
				diff.value[1] = orig_diff[1]
				diff.value[2] = orig_diff[2]
				diff.value[3] = orig_diff[3]
			elseif c == "off" then
				diff.value[1] = 0
				diff.value[2] = 0
				diff.value[3] = 0
			end
			self:update_light_diffuse(e)
			if signal_during then
				self.world:emit(signal_during.signal, unpack(signal_during.args))
			end
		end,
		function()
			if signal_after then
				self.world:emit(signal_after.signal, unpack(signal_after.args))
			end
			if rem then
				e:remove("d_light_flicker")
				:remove("d_light_flicker_remove_after")
				:remove("on_d_light_flicker_during")
				:remove("on_d_light_flicker_after")
			end
		end)
	end
end

function DeferredLighting:set_ambiance(t)
	@@assert(type(t) == "table")
	if not self.orig_ambiance then
		self.orig_ambiance = {unpack(t)}
	end
	self.ambiance = {unpack(t)}
end

function DeferredLighting:update(dt)
	self.timer:update(dt)
end

function DeferredLighting:apply_ambiance()
	love.graphics.setColor(self.ambiance)
end

function DeferredLighting:update_light_pos(e)
	if e.light_disabled then return end
	local pl = e.point_light
	local pos = e.pos
	self.mesh.pos:setVertex(e.light_id.value, {pos.x, pos.y, pos.z, pl.value})
end

function DeferredLighting:update_light_diffuse(e)
	if e.light_disabled then return end
	local diffuse = e.diffuse
	self.mesh.diffuse:setVertex(e.light_id.value, diffuse.value)
end

function DeferredLighting:update_light_dir(e)
	if e.light_disabled then return end
	local dir = e.light_dir
	if not dir then return end
	self.mesh.dir:setVertex(e.light_id.value, dir.value)
end

function DeferredLighting:update_light_fading(dt)
	for _, e in ipairs(self.pool_fading) do
		if not e.light_disabled then
			local lp = e.point_light
			local f = e.light_fading
			if lp.value >= lp.orig then
				f.dir = -1
			elseif lp.value <= lp.orig - f.amount then
				f.dir = 1
			end
			lp.value = lp.value + f.amount * f.dir * dt
			self:update_light_pos(e)
		end
	end
end

function DeferredLighting:begin_geometry_pass()
	love.graphics.setShader(self.geometry_pass)
end

function DeferredLighting:begin_light_pass(buffers)
	@@assert(type(buffers) == "table" and #buffers == 2)
	love.graphics.setShader(self.lighting_pass)
	self.lighting_pass:send("cb", buffers[1].canvas)
	self.lighting_pass:send("nb", buffers[2].canvas)
end

function DeferredLighting:draw_lights()
	love.graphics.drawInstanced(self.mesh.light, #self.pool)
end

function DeferredLighting:create_mesh_p()
	local v = {{0,0, 0,0, 0,0,0,1}, {0,1, 0,0, 1,1,1,1}}
	for _ = 1, 64 do
		local t = v[#v]
		v[#v+1] = {t[1]*r[1] - t[2]*r[2], t[1]*r[2] + t[2]*r[1], 0,0, 1,1,1,1}
	end
	local light = love.graphics.newMesh(v, nil, "static")
	local m_position = love.graphics.newMesh(lvfp, MAX_LIGHTS)
	local m_diffuse =  love.graphics.newMesh(lvfd, MAX_LIGHTS)
	local m_direction = love.graphics.newMesh(lvft, MAX_LIGHTS)
	light:attachAttribute("lpos", m_position, "perinstance")
	light:attachAttribute("diffuse", m_diffuse, "perinstance")
	light:attachAttribute("ldir", m_direction, "perinstance")
	return {
		light = light,
		pos = m_position,
		diffuse = m_diffuse,
		dir = m_direction,
	}
end

function DeferredLighting:cleanup()
	self.timer:clear()
end

!if _DEV then
local Slab = require("modules.slab")
local UIWrapper = require("ui_wrapper")

local flags = {
	ambiance = true,
}

function DeferredLighting:debug_update(dt)
	if not self.debug_show then return end
	self.debug_show = Slab.BeginWindow("light", {
		Title = "DeferredLighting",
		IsOpen = self.debug_show,
	})
	local ac = self.ambiance
	Slab.Text("Ambiance")
	Slab.SameLine()
	if Slab.CheckBox(flags.ambiance, "ambiance") then
		flags.ambiance = not flags.ambiance
		if not flags.ambiance then
			self:set_ambiance({0, 0, 0, 0})
		else
			self:set_ambiance(self.orig_ambiance)
		end
	end
	ac[1] = UIWrapper.edit_range("ar", ac[1], 0, 1)
	ac[2] = UIWrapper.edit_range("ag", ac[2], 0, 1)
	ac[3] = UIWrapper.edit_range("ab", ac[3], 0, 1)
	ac[4] = UIWrapper.edit_range("aa", ac[4], 0, 1)

	for _, e in ipairs(self.pool) do
		local id = e.id.value
		if Slab.BeginTree(id, {Title = id}) then
			Slab.Indent()
			local ld = e.light_disabled
			if Slab.CheckBox(ld, "Disabled") then
				if ld then
					e:remove("light_disabled")
				else
					e:give("light_disabled")
				end
			end
			local pos = e.pos
			local pl = e.point_light
			local diffuse = e.diffuse.value
			local dir = e.light_dir and e.light_dir.value
			pos.x = UIWrapper.edit_number("x", pos.x, true)
			pos.y = UIWrapper.edit_number("y", pos.y, true)
			pos.z = UIWrapper.edit_range("z", pos.z, 0, 256, true)
			pl.value = UIWrapper.edit_range("s", pl.value, 0, 256, true)
			if dir then
				Slab.Separator()
				dir[1] = UIWrapper.edit_range("dx", dir[1], -32, 32)
				dir[2] = UIWrapper.edit_range("dy", dir[2], -32, 32)
				dir[3] = UIWrapper.edit_range("dz", dir[3], -1, 1)
				dir[4] = UIWrapper.edit_range("angle", dir[4], -1, 1)
			end
			Slab.Separator()
			diffuse[1] = UIWrapper.edit_range("r", diffuse[1], 0, 6)
			diffuse[2] = UIWrapper.edit_range("g", diffuse[2], 0, 6)
			diffuse[3] = UIWrapper.edit_range("b", diffuse[3], 0, 6)
			self:update_light_pos(e)
			self:update_light_dir(e)
			self:update_light_diffuse(e)
			Slab.EndTree()
			Slab.Unindent()
		end
	end
	Slab.EndWindow()
end
!end

return DeferredLighting
