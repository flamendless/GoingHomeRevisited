local Concord = require("modules.concord.concord")

local OutsideHouse = Concord.system({
	pool_door = {"door", "collider3d", "bump3d", "position"},
	pool_col = {"id", "position", "collider3d", "bump3d"},
	pool_railings = {"railings"}
})

function OutsideHouse:init(world)
	self.world = world
end

function OutsideHouse:item_collided(e, item)
	local item_id = item.id.id

	if item_id == "item_locked_door" then
		e:remove("override_animation")
		:remove("animation_on_update")
		:remove("climb_up")
		:give("change_animation_tag", "idle")

		self.world:emit("climbed_staircase", "up")
	end
end

function OutsideHouse:interacted_stairs()
	for _, e in ipairs(self.pool_railings) do
		e:give("hidden")
	end
end

function OutsideHouse:climbed_staircase(dir)
	for _, e in ipairs(self.pool_railings) do
		if dir == "up" then
			e:remove("hidden")
		elseif dir == "down" then
			e:give("hidden")
		end
	end
end

function OutsideHouse:action_interacted_eye(target_item)
	!if _ASSERT then
	Assert.is(target_item, Types.T_ENTITY)
	!end

	local id = target_item.id.id

	if id == "item_car" then
		self.world:emit("show_dialogue", "outside", "car")
	elseif id == "item_locked_door" then
		self.world:emit("show_dialogue", "outside", "locked_door_eye")
	end
end

function OutsideHouse:action_interacted_hand(target_item, player)
	!if _ASSERT then
	Assert.is(target_item, Types.T_ENTITY)
	!end

	local id = target_item.id.id

	if id == "item_locked_door" then
		self.world:emit("player_open_locked_door", player, function()
			self.world:emit("show_dialogue", "outside", "locked_door_hand", id)
		end)
	end
end

function OutsideHouse:action_interacted_bag(target_item)
	!if _ASSERT then
	Assert.is(target_item, Types.T_ENTITY)
	!end

	local id = target_item.id.id
end

function OutsideHouse:destroyed_dialogue(item_id)
	if item_id and item_id == "item_locked_door" then
		self.world:emit("reset_player")
	end
end

return OutsideHouse
