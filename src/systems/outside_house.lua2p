local Concord = require("modules.concord.concord")

local Fade = require("fade")

local OutsideHouse = Concord.system({
	pool_door = {"door", "collider3d", "bump3d", "position"},
	pool_col = {"id", "position", "collider3d", "bump3d"},
	pool_railings = {"railings"}
})

function OutsideHouse:init(world)
	self.world = world
	self.can_go_to_storage_room = false
end

function OutsideHouse:interactive_collided(e, interactive)
	local interactive_id = interactive.id.id

	if interactive_id == "interactive_locked_door" then
		e:remove("override_animation")
		:remove("animation_on_update")
		:remove("climb_up")
		:give("change_animation_tag", "idle")

		self.world:emit("climbed_staircase", "up")
	end
end

function OutsideHouse:interacted_stairs()
	for _, e in ipairs(self.pool_railings) do
		e:give("hidden")
	end
end

function OutsideHouse:climbed_staircase(dir)
	for _, e in ipairs(self.pool_railings) do
		if dir == "up" then
			e:remove("hidden")
		elseif dir == "down" then
			e:give("hidden")
		end
	end
end

function OutsideHouse:action_interacted_eye(target_interactive)
	!if _ASSERT then
	Assert.is(target_interactive, Types.T_ENTITY)
	!end

	local id = target_interactive.id.id
	local str_outside = "outside"

	if id == "interactive_car" then
		self.world:emit("show_dialogue", str_outside, "car_eye")
	elseif id == "interactive_wood" then
		self.world:emit("show_dialogue", str_outside, "wood_eye")
	elseif id == "interactive_locked_door" then
		self.world:emit("show_dialogue", str_outside, "locked_door_eye")
	elseif id == "interactive_backdoor" then
		self.world:emit("show_dialogue", str_outside, "backdoor_eye")
	end
end

function OutsideHouse:action_interacted_hand(target_interactive, player)
	!if _ASSERT then
	Assert.is(target_interactive, Types.T_ENTITY)
	!end

	local id = target_interactive.id.id
	local str_outside = "outside"

	if id == "interactive_car" then
		self.world:emit("show_dialogue", str_outside, "car_hand")
	elseif id == "interactive_wood" then
		self.world:emit("show_dialogue", str_outside, "wood_hand")
	elseif id == "interactive_locked_door" then
		self.world:emit("face_left", player)
		self.world:emit("player_open_locked_door", player, function()
			self.world:emit("show_dialogue", str_outside, "locked_door_hand", id)
			self.can_go_to_storage_room = true
		end)
	elseif id == "interactive_backdoor" then
		local locked = target_interactive.locked

		if not self.can_go_to_storage_room then
			self.world:emit("show_dialogue", str_outside, "backdoor_hand", id)
		else
			if locked then
				self.world:emit("show_dialogue", str_outside, "backdoor_hand_locked", id)
			else
				self.world:emit("player_open_door", player, function()
					Fade.fade_out(function()
						self.world:emit("go_to_next", id)
					end, 0.5)
				end)
			end
		end
	end
end

function OutsideHouse:used_item(interactive, item)
	local interactive_id = interactive.id.id
	local item_id = item.id.id
	local str_outside = "outside"
	local dialogue_id

	if interactive_id == "interactive_backdoor" and
		item_id == "item_backdoor_key" then

		if self.can_go_to_storage_room then
			dialogue_id = "backdoor_unlocked"
			--TODO play unlock sound
			interactive:remove("locked")
			item:give("item_discard")
			self.can_go_to_storage_room = true
		else
			dialogue_id = "backdoor_hand"
		end

		self.world:emit("show_dialogue", str_outside, dialogue_id, interactive_id)
		self.world:emit("showed_dialogue_item")
	else
		self.world:emit("show_dialogue", "inventory", "unable_to_use", interactive_id)
		self.world:emit("showed_dialogue_item")
	end
end

function OutsideHouse:destroyed_dialogue(interactive_id)
	if interactive_id and interactive_id == "interactive_locked_door" then
		self.world:emit("reset_player")
	end
end

return OutsideHouse
