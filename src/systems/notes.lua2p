local Concord = require("modules.concord.concord")

local Blur = require("blur")
local Inputs = require("inputs")
local NotesList = require("notes")
local Palette = require("palette")
local Resources = require("resources")

local floor = math.floor
local min = math.min

local Notes = Concord.system({
	pool_camera = {"camera"},
	pool_note_item = {"list_item", "list_group", "note_item", "!dialogue_item", "!choice_item"},
})

local AssemNotes = require("assemblages.notes")
local c_on_hovered = Palette.get("note_on_hovered")

function Notes:init(world)
	self.world = world
	self.is_open = false

	self.pool_camera.onAdded = function(pool, e)
		local camera = e.camera
		if camera.is_main then
			self.main_camera = camera.camera
		end
	end

	self:setEnabled(false)
end

function Notes:open_notes()
	self.world:emit("set_system_to", "dialogues", false)
	self.is_open = true
	Blur.flag_process = true
	self:create_notes()
	self.world:emit("create_note_items")
end

function Notes:close_notes(not_close)
	@@sassert(not_close, type(not_close) == "boolean")
	self.world:emit("set_system_to", "dialogues", true)
	if not not_close then
		self.world:emit("on_leave_interact_or_inventory")
	end
	self.is_open = false
	Blur.flag_process = false
	self.world:emit("destroy_key", "notes")
	self.e_bg:destroy()
	for _, e in ipairs(self.pool_note_item) do
		e:destroy()
	end
	self.world:emit("destroy_list", "notes")
	self.world:emit("inventory_to_notes", true)
end

function Notes:update(dt)
	if self.is_open then
		if Inputs.pressed("inventory") then
			Inputs.flush()
			self.world:emit("close_notes", true)
			self.world:emit("open_inventory")
		elseif Inputs.pressed("cancel") then
			self:close_notes()
		end
	end
end

function Notes:draw_inventory()
	if not self.is_open then return end
	self.world:emit("draw_sprite_ex", self.e_bg)

	for _, e in ipairs(self.pool_note_item) do
		local list = e.list_item
		if list.on_current_page then
			self.world:emit("draw_text_ex", e)
			if e.list_cursor then
				self.world:emit("draw_sprite_ex", self.e_cursor)
			end
		end
	end
end

function Notes:on_list_cursor_update(e)
	@@assert(self.pool_note_item:has(e))
	local font = e.font.value
	local c_pos = self.e_cursor.pos
	local pos = e.pos
	local on_left = e.list_cursor.cursor_index <= self.rows_per_page
	local dx = on_left and -1 or 1
	c_pos.x = pos.x + 4 * dx
	c_pos.y = pos.y - font:getHeight("") * 0.5
	self.e_cursor.transform.ox = on_left and 1 or 0
	self.world:emit("lerp_color", self.e_cursor, {1, 1, 1, 1}, 0.25, "circin")
	self.world:emit("lerp_color", e, c_on_hovered, 0.25, "circin")
end

function Notes:on_list_cursor_remove(e)
	@@assert(self.pool_note_item:has(e))
	self.world:emit("lerp_color", self.e_cursor, {1, 1, 1, 0}, 0.25, "circin")
	self.world:emit("lerp_color", e, e.color.original, 0.25, "circin")
end

function Notes:on_list_item_interact(e)
	print(e.id.value)
end

function Notes:create_notes()
	local _, _, w, h = self.main_camera:getWindow()
	local img = Resources.data.images.bg_notes
	local iw, ih = img:getDimensions()
	local bar_h = self.pool_camera[1].bar_height.value

	local pad = 48
	local pad2 = pad * 0.5
	local nw = w - pad * 2
	local nh = h - pad * 2 - bar_h * 2
	local scale = min(nw/iw, nh/ih)
	local x = w - pad2
	local y = h * 0.5

	self.e_bg = Concord.entity(self.world):assemble(AssemNotes.bg, x, y, scale)

	local font = Resources.data.fonts.note_list
	local fh = font:getHeight(" ")
	local padq = pad * 0.25

	local row_y = y - pad - ih * scale * 0.5 + fh * 2 + 48
	local row_h = fh + padq * 2
	local rows = floor(ih * scale * 0.75 / row_h)

	self.rows_per_page = rows
	self.world:emit("create_list_group", "notes", true, rows * 2)

	local acquired_notes = NotesList.get_acquired()
	for i, note in ipairs(acquired_notes) do
		local index = (i - 1) % rows
		local offset_x = (i - 1) * 2
		local nx, ox
		if i <= rows then
			ox = 0
			nx = x - iw * scale + padq - offset_x + 64
		else
			ox = 1
			nx = x - padq + offset_x - 72
		end
		local ny = row_y + row_h * index + padq

		Concord.entity(self.world):assemble(AssemNotes.text, i, note.title, nx, ny, ox)
	end

	self.e_cursor = Concord.entity(self.world):assemble(AssemNotes.cursor)
	self.world:emit("create_notes_key", "notes")
end

return Notes
