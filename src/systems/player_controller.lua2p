local Concord = require("modules.concord.concord")
local Bump = require("modules.bump.bump-niji")

local Inputs = require("inputs")

local PlayerController = Concord.system({
	pool = {"player_controller", "body"},
})

function PlayerController:init(world)
	self.world = world
end

function PlayerController:update(dt)
	for _, e in ipairs(self.pool) do
		if e:has("override_animation") then return end
		if not e.body.can_move then return end

		if Inputs.is_down("player_move_left") then
			if e.body.can_run then
				e.body.is_run = Inputs.is_down("player_run_mod")
			end
			e.body.dir = -1
			e.body.dx = -1
		elseif Inputs.is_down("player_move_right") then
			if e.body.can_run then
				e.body.is_run = Inputs.is_down("player_run_mod")
			end
			e.body.dir = 1
			e.body.dx = 1
		else
			e.body.dx = 0
		end

		if Inputs.is_down("player_move_up") then
			e.body.dy = -1
		elseif Inputs.is_down("player_move_down") then
			e.body.dy = 1
		else
			e.body.dy = 0
		end

		local anim_name
		local anim_variance

		if e.body.dx ~= 0 or e.body.dy ~= 0 then
			if e.body.is_run then
				anim_name = "run"
			else
				anim_name = "walk"
			end
		else
			anim_name = "idle"
		end

		if e.body.dir == -1 then
			anim_variance = "_left"
		end

		if anim_name then
			if anim_variance then
				self.world:emit("switch_animation_tag", anim_name .. anim_variance)
			else
				self.world:emit("switch_animation_tag", anim_name)
			end
		end

		local speed = e.speed
		local speed_data = e.speed_data

		if speed and speed_data then
			local old_speed = speed.speed
			local new_speed = speed_data.speed_data[anim_name]
			if e.body.dx ~= 0 or e.body.dy ~= 0 then
				local speed_dt = mathx.lerp(old_speed, new_speed, 0.5)
				speed.speed = speed_dt
			else
				speed.speed = new_speed
			end
		end
	end
end

function PlayerController:face_left(e)
	if e:has("override_animation") then return end
	if e.body.can_run then
		e.body.is_run = Inputs.is_down("player_run_mod")
	end
	e.body.dir = -1
	e.body.dx = -1
end

function PlayerController:face_right(e)
	if e:has("override_animation") then return end
	if e.body.can_run then
		e.body.is_run = Inputs.is_down("player_run_mod")
	end
	e.body.dir = 1
	e.body.dx = 1
end

function PlayerController:collision_wall(player, wall)
	-- TODO hit wall animation
	player.body.can_move = false
	self.world:emit("switch_animation_tag", "idle")
end

return PlayerController
