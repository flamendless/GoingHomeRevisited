local Concord = require("modules.concord.concord")

local Inputs = require("inputs")

local PlayerController = Concord.system({
	pool = {"player_controller", "body", "collider"},
})

function PlayerController:init(world)
	self.world = world
end

function PlayerController:player_can_move(bool)
	@@assert(type(bool) == "boolean")
	@@assert(#self.pool ~= 0)
	for _, e in ipairs(self.pool) do
		e.body.can_move = true
	end
end

function PlayerController:player_can_interact(bool)
	@@assert(type(bool) == "boolean")
	@@assert(#self.pool ~= 0)
	for _, e in ipairs(self.pool) do
		e:give("can_interact")
	end
end

function PlayerController:update(dt)
	for _, e in ipairs(self.pool) do
		self.world:emit("check_on_leave_interactives", e)

		if e.override_animation then return end
		if not e.body.can_move then return end
		local player = e.player
		local within_interactive = e.within_interactive
		local body = e.body

		if Inputs.down("left") then
			if body.can_run then
				body.is_run = Inputs.is_down("player_run_mod")
			end

			body.dir = -1
			body.dx = -1
		elseif Inputs.down("right") then
			if body.can_run then
				body.is_run = Inputs.is_down("player_run_mod")
			end

			body.dir = 1
			body.dx = 1
		else
			body.dx = 0
		end

		if Inputs.down("up") then
			body.dy = -1
		elseif Inputs.down("down") then
			body.dy = 1
		else
			body.dy = 0
		end

		if Inputs.pressed("interact") then
			if player.can_interact and within_interactive then
				self.world:emit("interactive_interacted", e, within_interactive.interactive)
			end
		elseif Inputs.pressed("cancel") then
			local interact = player.can_interact
			local in_dialogue = e.in_dialogue
			local in_inventory = e.inventory_open

			if not interact and not in_dialogue and not in_inventory then
				self.world:emit("interact_cancelled", e, interactive.interactive)
			end

			if not interact and not in_dialogue and in_inventory then
				e:remove("inventory_open")
			end
		end

		local anim_name = self:update_animation(e)
		self:update_speed(e, anim_name)
	end
end

function PlayerController:update_animation(e, override_name, override_variance)
	local anim_name = override_name
	local anim_variance = override_variance
	local body = e.body

	if not anim_name then

		if body.dx ~= 0 or body.dy ~= 0 then
			if body.is_run then
				anim_name = "run"
			else
				anim_name = "walk"
			end
		else
			anim_name = "idle"
		end
	end

	if not anim_variance then
		if body.dir == -1 then
			anim_variance = "_left"
		end
	end

	if anim_variance then
		self.world:emit("switch_animation_tag", e, anim_name .. anim_variance)
	else
		self.world:emit("switch_animation_tag", e, anim_name)
	end

	return anim_name
end

function PlayerController:update_speed(e, anim_name)
	local speed = e.speed
	local speed_data = e.speed_data

	if speed and speed_data then
		local body = e.body
		local osx, osy = speed.vx, speed.vy
		local new_speed = speed_data.speed_data[anim_name]

		if body.dx ~= 0 then
			local speed_dt = mathx.lerp(osx, new_speed.x, 0.5)
			speed.vx = speed_dt
		end

		if body.dy ~= 0 then
			local speed_dt = mathx.lerp(osy, new_speed.y, 0.5)
			speed.vy = speed_dt
		end
	end
end

function PlayerController:face_left(e)
	@@assert(e.__isEntity and e.player_controller)
	if e.override_animation then return end
	e.body.dir = -1
	self:update_animation(e, "idle", "_left")
end

function PlayerController:face_right(e)
	@@assert(e.__isEntity and e.player_controller)
	if e.override_animation then return end
	e.body.dir = 1
	self:update_animation(e, "idle")
end

function PlayerController:idle(e, stop)
	@@assert(e.__isEntity and e.player_controller)
	if e.override_animation then return end
	local body = e.body
	if body.dir == -1 then
		self:update_animation(e, "idle", "_left")
	else
		self:update_animation(e, "idle")
	end

	if stop then
		body.dx = 0
		body.dy = 0
		body.vel_x = 0
		body.vel_y = 0
	end
end

function PlayerController:player_open_door(e, fn)
	@@assert(e.__isEntity)
	@@assert(e.player)
	@@sassert(fn, type(fn) == "function")
	local tag = (e.body.dir == -1) and "open_door_left" or "open_door"
	e:give("change_animation_tag", tag)
	:give("override_animation")
	:give("animation_on_loop", fn, "pauseAtEnd", true)
end

function PlayerController:player_open_locked_door(e, fn)
	@@assert(e.__isEntity)
	@@assert(e.player)
	@@sassert(fn, type(fn) == "function")
	local tag = (e.body.dir == -1) and "open_door_reverse_left" or "open_door_reverse"
	e:give("change_animation_tag", tag)
	:give("override_animation")
	:give("animation_on_loop", fn, "pauseAtEnd", true)
end

function PlayerController:interacted_stairs(e, tag, fn)
	@@assert(e.__isEntity)
	@@assert(e.player)
	@@assert(tag == "upstairs" or tag == "downstairs")
	@@sassert(fn, type(fn) == "function")
	e:give("change_animation_tag", tag)
	:give("override_animation")
	:give("animation_on_update", fn)
end

return PlayerController
