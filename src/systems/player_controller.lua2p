local Concord = require("modules.concord.concord")
local Timer = require("modules.hump.timer")

local Dialogues = require("dialogues")
local Inputs = require("inputs")
local PlayerSpawnPoints = require("data.player_spawn_points")
local AssemPlayer = require("assemblages.player")

local PlayerController = Concord.system({
	pool = {"player_controller", "body", "collider"},
})

local function get_spawn_points(current_id, prev_id)
	local d = PlayerSpawnPoints[current_id][prev_id or "default"]
	@@assert(d)
	if not d[3] then
		d[3] = "face_left"
	end
	@@assert(type(d[3]) == "string" and (d[3] == "face_left" or d[3] == "face_right"))
	return unpack(d)
end

function PlayerController:init(world)
	self.world = world
end

function PlayerController:spawn_player(fn)
	@@sassert(fn, type(fn) == "function")
	@@assert(self.player == nil, "Player already exists")
	local x, y, face = get_spawn_points(self.world.current_id, self.world.prev_id)
	self.player = Concord.entity(self.world):assemble(AssemPlayer.room, x, y)
	self.world:__flush()
	if face == "face_left" then
		self:face_left()
	elseif face == "face_right" then
		self:face_right()
	end
	if fn then
		fn(self.player)
	end
end

function PlayerController:update(dt)
	if not self.player then return end
	if self.player.override_animation then return end
	if not self.player.body.can_move then return end
	local within_int = self.player.within_interactive
	local can_interact = self.player.can_interact
	local body = self.player.body
	body.dx = 0

	if body.can_run then
		body.is_run = Inputs.down("run_mod")
	end

	if Inputs.down("left") then
		body.dir = -1
		body.dx = -1
	elseif Inputs.down("right") then
		body.dir = 1
		body.dx = 1
	end

	if Inputs.pressed("interact") then
		if can_interact and within_int then
			local other = within_int.entity
			local req = other.req_col_dir
			local proceed = true

			if req and (body.dir ~= req.value) then
				proceed = false
			end

			if proceed then
				if other.dialogue_meta then
					self:on_player_interact(self.player, other)
				elseif other.is_door then
					self.world:emit("on_interact_door", self.player, other)
				end
			end
		end
	end

	local anim_name = self:player_update_animation()
	self:update_speed(anim_name)
end

function PlayerController:player_update_animation(override_name, override_variant)
	local anim_name = override_name
	local anim_variant = override_variant
	local body = self.player.body

	if not anim_name then
		if body.dx ~= 0 and not self.player.hit_wall then
			if body.is_run then
				anim_name = "run"
			else
				anim_name = "walk"
			end
		else
			anim_name = "idle"
		end
	end

	if not anim_variant then
		if body.dir == -1 then
			anim_variant = "_left"
		end
	end

	if anim_variant then
		self.world:emit("switch_animation_tag",
			self.player, anim_name .. anim_variant, anim_name)
	else
		self.world:emit("switch_animation_tag", self.player, anim_name)
	end

	return anim_name
end

function PlayerController:update_speed(anim_name)
	local speed = self.player.speed
	local speed_data = self.player.speed_data

	if speed and speed_data then
		local body = self.player.body
		local new_speed = speed_data.speed_data[anim_name]

		if body.dx ~= 0 then
			local speed_dt = mathx.lerp(speed.vx, new_speed.x, 0.5)
			speed.vx = speed_dt
		end
	end
end

function PlayerController:face_left()
	if not self.player then return end
	if self.player.override_animation then return end
	self.player.body.dir = -1
	self:player_update_animation("idle", "_left")
end

function PlayerController:face_right()
	if not self.player then return end
	if self.player.override_animation then return end
	self.player.body.dir = 1
	self:player_update_animation("idle")
end

function PlayerController:idle(stop)
	if self.player.override_animation then return end
	local body = self.player.body
	if body.dir == -1 then
		self:player_update_animation("idle", "_left")
	else
		self:player_update_animation("idle")
	end

	if stop then
		body.dx = 0
		body.vel_x = 0
		body.vel_y = 0
	end
end

function PlayerController:player_open_door()
	local tag = (self.player.body.dir == -1) and "open_door_left" or "open_door"
	self.player:give("change_animation_tag", tag)
		:give("override_animation")
	self.player:give("animation_on_loop", "anim_pause_at_end", 0, self.player)
end

function PlayerController:player_open_locked_door()
	local tag = (self.player.body.dir == -1) and "open_door_reverse_left" or "open_door_reverse"
	self.player:give("change_animation_tag", tag)
		:give("override_animation")
	self.player:give("animation_on_loop", "anim_pause_at_end", 0, self.player)
end

function PlayerController:on_player_interact(player, interactive)
	@@assert(player.__isEntity and player.player)
	@@assert(interactive.__isEntity and interactive.interactive)
	player:give("is_interacting")
	self.world:emit("on_interact_or_inventory")
	-- self.world:emit("create_speech_bubble", player)
	local d = interactive.dialogue_meta
	local dialogues_t = Dialogues.get(d.main, d.sub)
	self.world:emit("spawn_dialogue", dialogues_t, d.main, d.sub)
end

function PlayerController:on_interact_or_inventory()
	if not self.player.prev_body then
		local body = self.player.body
		local can_interact = self.player.can_interact
		self.player:give("prev_body", body.can_move, body.can_run, can_interact ~= nil)
		self:idle(true)
	end
	self:player_can_run(false)
	self:player_can_move(false)
	self:player_can_interact(false)
end

function PlayerController:on_leave_interact_or_inventory(_)
	local body = self.player.body
	local prev_body = self.player.prev_body
	body.can_move = prev_body.can_move
	body.can_run = prev_body.can_run
	if prev_body.can_interact then
		Timer.after(0.5, function()
			self.player:give("can_interact")
				:remove("is_interacting")
		end)
	end
	self.player:remove("prev_body")
	-- self.world:emit("remove_speech_bubble")
end

function PlayerController:player_reset_anim()
	self.player:remove("override_animation")
	:remove("change_animation_tag")
	:remove("animation_on_loop")
	local anim = self.player.animation
	anim.is_playing = true
	anim.anim8:resume()
end

function PlayerController:player_can_move(bool)
	@@assert(type(bool) == "boolean")
	self.player.body.can_move = bool
end

function PlayerController:player_can_run(bool)
	@@assert(type(bool) == "boolean")
	self.player.body.can_run = bool
end

function PlayerController:player_can_interact(bool)
	@@assert(type(bool) == "boolean")
	if bool then
		self.player:give("can_interact")
	else
		self.player:remove("can_interact")
	end
end

return PlayerController
