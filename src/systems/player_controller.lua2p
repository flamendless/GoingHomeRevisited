local Concord = require("modules.concord.concord")
local Bump = require("modules.bump.bump-niji")

local Keybinds = require("keybinds")

local PlayerController = Concord.system({
	pool = {"player_controller", "body", "collider"},
})

function PlayerController:init(world)
	self.world = world
end

function PlayerController:update(dt)
	for _, e in ipairs(self.pool) do
		if e:has("override_animation") then return end
		if not e.body.can_move then return end

		if Keybinds.is_down_player("move_left") then
			e.body.is_run = love.keyboard.isDown("lshift")
			e.body.dir = -1
			e.body.dx = -1
		elseif Keybinds.is_down_player("move_right") then
			e.body.is_run = love.keyboard.isDown("lshift")
			e.body.dir = 1
			e.body.dx = 1
		else
			e.body.dx = 0
		end

		if Keybinds.is_down_player("move_up") then
			e.body.dy = -1
		elseif Keybinds.is_down_player("move_down") then
			e.body.dy = 1
		else
			e.body.dy = 0
		end

		local animation_name
		local animation_variance

		if e.body.dx ~= 0 or e.body.dy ~= 0 then
			if e.body.is_run then
				animation_name = "run"
			else
				animation_name = "walk"
			end
		else
			animation_name = "idle"
		end

		if e.body.dir == -1 then
			animation_variance = "_left"
		end

		if animation_name then
			if animation_variance then
				self.world:emit("switch_animation_tag", animation_name .. animation_variance)
			else
				self.world:emit("switch_animation_tag", animation_name)
			end
		end

		local speed = e.speed
		local speed_data = e.speed_data

		if speed and speed_data then
			local old_speed = speed.speed
			local new_speed = speed_data.speed_data[animation_name]
			if e.body.dx ~= 0 or e.body.dy ~= 0 then
				local speed_dt = math.lerp(old_speed, new_speed, 0.5)
				speed.speed = speed_dt
			else
				speed.speed = new_speed
			end
		end
	end
end

function PlayerController:face_left(e)
	if e:has("override_animation") then return end
	e.body.is_run = love.keyboard.isDown("lshift")
	e.body.dir = -1
	e.body.dx = -1
end

function PlayerController:face_right(e)
	if e:has("override_animation") then return end
	e.body.is_run = love.keyboard.isDown("lshift")
	e.body.dir = 1
	e.body.dx = 1
end

function PlayerController:collision_wall(player, wall)
	--TODO hit wall animation
	player.body.can_move = false
	self.world:emit("switch_animation_tag", "idle")
end

return PlayerController
