local Concord = require("modules.concord.concord")
local Gamera = require("modules.gamera.gamera")
local TLE = require("modules.tle.timeline")

local Blur = require("blur")
local Canvas = require("canvas")
local Fade = require("fade")
local FilmGrain = require("film_grain")
local NGrading = require("ngrading")
local Palette = require("palette")
local Resources = require("resources")

local Assemblages = {
	Common = require("assemblages.common"),
	Inventory = require("assemblages.inventory"),
	Player = require("assemblages.player"),
	Kitchen = require("assemblages.kitchen"),
	UI = require("assemblages.ui"),
}

local Kitchen = Concord.system()

function Kitchen:init(world)
	self.world = world
end

function Kitchen:state_setup()
	local w, h = Resources.data.images.kitchen:getDimensions()
	local ww, hh = love.graphics.getDimensions()

	self.canvas = Canvas.create_main({})
	self.scale = math.min(ww/w, hh/h)
	self.camera = Gamera.new(0, 0, w, h)
	self.camera:setWindow(0, 0, ww, hh)
	Concord.entity(self.world):assemble(Assemblages.Common.camera,
		self.camera, self.scale, w, h)
	Concord.entity(self.world):assemble(Assemblages.Kitchen.bg)

	self.world:emit("create_room_bounds", w, h)
	self.world:emit("parse_room_items", "kitchen")
	self.world:emit("setup_post_process", {
		NGrading("lut_dusk"),
		FilmGrain(),
		Blur()
	})

	for _, v in pairs(Assemblages.Kitchen.lights) do
		Concord.entity(self.world):assemble(v)
	end
	self.world:emit("set_ambiance", Palette.get_diffuse("ambiance_kitchen"))
end

function Kitchen:state_init()
	self.world:emit("spawn_player", function(e_player)
		self.world:emit("camera_follow", e_player, 0.25)
		self.world:emit("player_can_move", true, e_player)
		self.world:emit("player_can_interact", true, e_player)
		self.world:emit("player_can_run", true, e_player)
	end)

	self.timeline = TLE.Do(function()
		Fade.fade_in(nil, 1)
		self.camera:setScale(4)
		!if _DEV then
		self.timeline:Pause()
		!end
	end)
end

function Kitchen:state_update(dt)
	self.world:emit("preupdate", dt)
	self.world:emit("update", dt)
end

function Kitchen:state_draw()
	self.world:emit("begin_deferred_lighting", self.camera, self.canvas)
	self.world:emit("end_deferred_lighting")
	self.world:emit("apply_post_process", self.canvas)
	self.world:emit("draw_inventory")
	self.world:emit("draw_dialogues")
	self.world:emit("draw_ui")
	Fade.draw()
end

return Kitchen
