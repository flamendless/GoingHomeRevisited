local Concord = require("modules.concord.concord")

local min = math.min
local max = math.max
local insert = table.insert
local huge = math.huge
local floor = math.floor
local sub = string.sub

local Room = Concord.system({})

function Room:init(world)
	self.world = world
end

function Room:create_room_item(frames, spr_res, t, g_id)
	@@assert(type(frames) == "table")
	@@assert(type(spr_res) == "string")
	@@assert(type(t) == "table")
	@@sassert(g_id, type(g_id) == "string")
	local id = g_id or t.id
	local item = frames[id]
	@@assert(item, "no " .. id)
	local frame = item.frame
	local scale = t.scale or 1
	local w = floor(frame.w * scale)
	local h = floor(frame.h * scale)

	local e = Concord.entity(self.world)
		:give("id", t.name or id)
		:give("sprite", spr_res)
		:give("pos", t.x, t.y)
		:give("atlas", item)
		:give("quad_transform", 0, scale, scale)
		:give("z_index", t.z or 4, false)
		:give("outline_val", t.outline_val or 1)

	if not g_id and not t.no_col then
		e:give("collider", w, h, "cross")
		:give("bump")

		if not t.not_interactive then
			e:give("interactive")
		end
		if t.dialogue then
			e:give("dialogue", unpack(t.dialogue))
		end
		if t.usable_with_item then
			e:give("usable_with_item")
		end
	end
	return e
end

function Room:parse_room_items(atlas_res, list_res)
	@@assert(type(atlas_res) == "string")
	@@assert(type(list_res) == "string")
	local data = require("data." .. atlas_res)
	local list = require("data." .. list_res)
	local frames = data.frames
	local spr_res = data.meta.image
	spr_res = sub(spr_res, 0, -5)
	local has_group = false
	local group = {}
	local group_t = {}

	for _, t in ipairs(list) do
		if t.grouped then
			local g_id = t.id
			if not group[g_id] then
				group[g_id] = {}
			end
			for _, t2 in ipairs(t) do
				local e = self:create_room_item(frames, spr_res, t2, g_id)
				insert(group[g_id], e)
			end
			group_t[g_id] = t
			has_group = true
		else
			self:create_room_item(frames, spr_res, t)
		end
	end

	if has_group then
		self:create_grouped_items(group, group_t, frames, list)
	end
end

function Room:create_grouped_items(group, group_t, frames, list)
	@@assert(type(group) == "table")
	@@assert(type(group_t) == "table")
	@@assert(type(frames) == "table")
	@@assert(type(list) == "table")
	for id, t in pairs(group) do
		local x, y = huge, huge
		local w, h = -huge, -huge
		local frame = frames[id].frame
		for _, e in ipairs(t) do
			local pos = e.pos
			local scale = e.quad_transform.sx
			x = min(x, pos.x)
			y = min(y, pos.y)
			w = max(w, pos.x + frame.w * scale)
			h = max(h, pos.y + frame.h * scale)
			e:give("grouped", id)
		end

		local e_g = Concord.entity(self.world)
			:give("id", "col_" .. id)
			:give("pos", x, y)
			:give("bump")
			:give("collider", w - x, h - y, "cross")
			:give("interactive")
			:give("grouped", id)

		local gt = group_t[id]
		if gt.dialogue then
			e_g:give("dialogue", unpack(gt.dialogue))
		end
		if gt.usable_with_item then
			e_g:give("usable_with_item")
		end
	end
end

return Room
