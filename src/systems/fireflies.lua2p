local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Lume = require("modules.lume.lume")
local Timer = require("modules.hump.timer")

local Palette = require("palette")

local insert = table.insert
local random = love.math.random

local Fireflies = Concord.system({
	pool = {"firefly", "color"},
})

local Outside = require("assemblages.outside")

local offset = 8

local function generate_points(x, y, n)
	local points = {vec2:new(x, y)}
	local prev_x = x
	local prev_y = y

	for i = 1, n - 1 do
		local px = random(prev_x - offset, prev_x + offset)
		local py = random(prev_y - offset, prev_y + offset)
		local pv = vec2:new(px, py)

		prev_x = px
		prev_y = py
		insert(points, pv)
	end

	return points
end

local function move_to_next_point(path, pos)
	local low = path.current_point
	local dur = random(2, 8)
	local high = low + dur
	local points = {}

	if high > path.n_points then
		high = path.n_points
	end

	for i = low, high do
		local nx, ny = path.points[i]:unpack()
		insert(points, nx)
		insert(points, ny)
	end

	local b = love.math.newBezierCurve(unpack(points))
	local state = {time = 0}
	local f = Flux.to(state, dur, {time = 1})

	f:onupdate(function()
		local dx, dy = b:evaluate(state.time)
		pos.x = dx
		pos.y = dy
	end)

	f:oncomplete(function()
		path.current_point = high

		if path.current_point >= path.n_points then
			path.current_point = 1
			tablex.reverse(path.points)
		end

		move_to_next_point(path, pos)
	end)
end

function Fireflies:init(world)
	self.world = world
	self.timer = Timer()
end

function Fireflies:update(dt)
	self.timer:update(dt)
end

function Fireflies:generate_fireflies(n, sprite, sprite_light, min_pos, max_pos)
	@@assert(type(n) == "number")
	@@assert(sprite:type() == "Image")
	@@assert(sprite_light:type() == "Image")
	@@assert(type(min_pos) == "table")
	@@assert(type(min_pos.x) == "number")
	@@assert(type(min_pos.y) == "number")
	@@assert(type(max_pos) == "table")
	@@assert(type(max_pos.x) == "number")
	@@assert(type(max_pos.y) == "number")
	for i = 1, n do
		local x = random(min_pos.x, max_pos.x)
		local y = random(min_pos.y, max_pos.y)
		local points = generate_points(x, y, 64)

		local e = Concord.entity(self.world)
			:assemble(Outside.firefly, sprite, x, y, points)
		local f = Concord.entity(self.world)
			:assemble(Outside.firefly_light, sprite_light, e)
	end
end

function Fireflies:show_fireflies(dur, fn)
	@@assert(type(dur) == "number")
	@@assert(type(fn) == "function")
	for _, e in ipairs(self.pool) do
		e:remove("hidden")
		Flux.to(e.color.value, dur, {[4] = 1})
			:oncomplete(function()
				e.firefly.can_flicker = true
				fn()
			end)
	end
end

function Fireflies:move_fireflies()
	for _, e in ipairs(self.pool) do
		move_to_next_point(e.path, e.pos)
	end
end

function Fireflies:flicker_fireflies(start_time, end_time)
	@@assert(type(start_time) == "number")
	@@assert(type(end_time) == "number")
	for _, e in ipairs(self.pool) do
		if e.firefly.can_flicker then
			local color = e.color.value
			local colors = e.firefly.value
			local time = random(start_time, end_time)

			local timer = self.timer:during(time, function()
					local chance = Lume.weightedchoice({yes = 0.25, no = 0.75})

					if chance == "yes" then
						local target = colors[random(1, #colors)]

						Flux.to(color, 0.25, {
								[1] = target[1],
								[2] = target[2],
								[3] = target[3],
								[4] = target[4],
							})
					end
			end,
			function()
				local next_run = random(start_time, end_time)

				local timer2 = Timer.after(next_run, function()
					self.timer:clear()
					self:flicker_fireflies(start_time, end_time)
				end)
			end)
		end
	end
end

return Fireflies
