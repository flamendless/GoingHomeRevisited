local Concord = require("modules.concord.concord")

local AtlasKeys = require("atlases.atlas_keys")
local Enums = require("enums")
local Inputs = require("inputs")
local Palette = require("palette")
local Settings = require("settings")

local ShowKeys = Concord.system()

local function Assemble(e, key)
	e:give($_C_ATLAS, AtlasKeys.frames[key])
	:give($_C_SPRITE, "atlas_keys")
	:give($_C_UI_ELEMENT)
end

function ShowKeys:init(world)
	self.world = world
	self.keys = {}
	self.texts = {}
end

function ShowKeys:create_key_with_text(id, txt, key)
	@@assert(type(id) == "string")
	@@assert(type(txt) == "string")
	local ww, wh = love.graphics.getDimensions()
	self.keys[id] = Concord.entity(self.world):assemble(Assemble, key)
		:give($_C_ID, "key_" .. id)
		:give($_C_POS, ww - 8, wh - 8)
		:give($_C_TRANSFORM, 0, 1, 1, 0.5, 1)
		:give($_C_QUAD_TRANSFORM, 0, 3, 3, 1, 1)
		:give($_C_COLOR, {1, 1, 1, 1})

	self.texts[id] = Concord.entity(self.world)
		:give($_C_ID, "text_" .. id)
		:give($_C_STATIC_TEXT, txt)
		:give($_C_FONT, "ui")
		:give($_C_POS, 0, 0)
		:give($_C_COLOR, Palette.get("ui_show_key_text"))
		:give($_C_UI_ELEMENT)
		:give($_C_TRANSFORM, 0, 1, 1, 1, 1)
		:give($_C_ANCHOR, self.keys[id], Enums.anchor.right, Enums.anchor.bottom, 16, 0)

	return self.keys[id], self.texts[id]
end

function ShowKeys:show_skip()
	local k, t = self:create_key_with_text("skip", "Skip", Inputs.rev_map.interact)
	k:give($_C_COLOR_FADE_IN_OUT, 1):give($_C_SKIP)
	t:give($_C_COLOR_FADE_IN_OUT, 1):give($_C_SKIP)
end

function ShowKeys:create_inventory_key()
	if not Settings.current.show_keys then return end
	self:create_key_with_text("inventory", "Switch to Notes", Inputs.rev_map.inventory)
end

function ShowKeys:create_notes_key()
	if not Settings.current.show_keys then return end
	self:create_key_with_text("notes", "Switch to Inventory", Inputs.rev_map.inventory)
end

function ShowKeys:create_dialogue_key()
	if not Settings.current.show_keys then return end
	local w, h = love.graphics.getDimensions()
	self.keys.dialogue = Concord.entity(self.world):assemble(Assemble, Inputs.rev_map.interact)
		:give($_C_ID, "dialogue_proceed_key")
		:give($_C_POS, w - 8, h - 8)
		:give($_C_QUAD_TRANSFORM, 0, 3, 3, 1, 1)
		:give($_C_COLOR, {1, 1, 1, 1})
		:give($_C_HIDDEN)
end

function ShowKeys:show_key(id, bool)
	if not Settings.current.show_keys then return end
	@@assert(type(id) == "string")
	@@assert(type(bool) == "boolean")
	local e = self.keys[id]
	@@assert(e ~= nil)
	if not bool then
		e:give($_C_HIDDEN)
	else
		e:remove($_C_HIDDEN)
	end

	local t = self.texts[id]
	if t then
		if not bool then
			t:give($_C_HIDDEN)
		else
			t:remove($_C_HIDDEN)
		end
	end
end

function ShowKeys:destroy_key(id)
	self.keys[id]:destroy()
	local t = self.texts[id]
	if t then
		t:destroy()
	end
	self.world:__flush()
end

return ShowKeys
