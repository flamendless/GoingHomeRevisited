local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Gamera = require("modules.gamera.gamera")

local Tween = Concord.system()

function Tween:init(world)
	self.world = world
end

function Tween:tween_camera_pos(camera, dur, dx, dy, ease)
	@@assert(Gamera.isCamera(camera))
	@@assert(type(dur) == "number")
	@@assert(type(dx) == "number")
	@@assert(type(dy) == "number")
	@@sassert(ease, type(ease) == "string")
	Flux.to(camera, dur, {
		x = dx,
		y = dy,
	}):ease(ease or "linear")
end

function Tween:tween_camera_pos_rel(camera, dur, dx, dy, ease)
	@@assert(Gamera.isCamera(camera))
	@@assert(type(dur) == "number")
	@@assert(type(dx) == "number")
	@@assert(type(dy) == "number")
	@@sassert(ease, type(ease) == "string")
	local cx, cy = camera:getPosition()
	Flux.to(camera, dur, {
		x = cx + dx,
		y = cy + dy,
	}):ease(ease or "linear")
end

function Tween:tween_camera_scale(camera, dur, scale, ease)
	@@assert(Gamera.isCamera(camera))
	@@assert(type(dur) == "number")
	@@assert(type(scale) == "number")
	@@sassert(ease, type(ease) == "string")
	local f = Flux.to(camera, dur, {
		scale = scale
	}):ease(ease or "linear")
end

return Tween
