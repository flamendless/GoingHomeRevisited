local Concord = require("modules.concord.concord")

local Transform = Concord.system({
	pool = {"transform"},
	pool_anchor = {"position", "anchor"},
	pool_camera = {"position", "camera"},
})

function Transform:init()
	self.pool_anchor.onEntityAdded = function(pool, e)
		self:update_anchor(e)
	end
end

function Transform:update_anchor(e)
	local anchor = e:get("anchor")
	local pos = e:get("position")

	local target_pos = anchor.entity:get("position")
	local target_sprite = anchor.entity:get("sprite")
	assert(target_sprite, "Anchor.entity must have a sprite component")

	local target_transform = anchor.entity:get("transform")
	local sx = target_transform.sx or 1
	local sy = target_transform.sy or 1
	local ox = target_transform.ox or 0
	local oy = target_transform.oy or 0

	local w = target_sprite.sprite:getWidth() * sx
	local h = target_sprite.sprite:getHeight() * sy
	local x = target_pos.pos.x - ox * sx
	local y = target_pos.pos.y - oy * sy

	if anchor.anchor_x == "left" then
	elseif anchor.anchor_x == "center" then
		x = x + w/2
	elseif anchor.anchor_y == "right" then
		x = x + w
	end

	if anchor.anchor_y == "top" then
	elseif anchor.anchor_y == "center" then
		y = y + h/2
	elseif anchor.anchor_y == "bottom" then
		y = y + h
	end

	if anchor.padding_x then
		x = x + anchor.padding_x
	end
	if anchor.padding_y then
		y = y + anchor.padding_y
	end

	pos.pos.x = x
	pos.pos.y = y
	pos.original_pos = pos.pos:copy()
end

function Transform:canvas_resize(ww, wh, scale)
	for _, e in ipairs(self.pool) do
		local transform = e:get("transform")
		if transform then
			transform.sx = scale
			transform.sy = scale
		end
	end
end

function Transform:update_position(l, t)
	for _, e in ipairs(self.pool_camera) do
		local pos = e:get("position")
		pos.pos.x = pos.pos.x + l
		pos.pos.y = pos.pos.y + t
		pos.original_pos = pos.pos:copy()
	end
end

function Transform:update(dt)
	for _, e in ipairs(self.pool_anchor) do
		self:update_anchor(e)
	end
end

return Transform
