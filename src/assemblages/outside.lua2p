local Colliders = require("data.colliders")
local Palette = require("palette")

local random = love.math.random

local Outside = {}

local z_index = {
	bg_sky = -1,
	bg_house = 0,
	firefly = 1,
	--player = 2,
	car = 3,
	fence = 4,
	splashes = 11,
}

function Outside.bg_sky(e, sprite)
	e:give("id", "bg_sky")
	:give("sprite", sprite)
	:give("position", vec2:new())
	:give("z_index", z_index.bg_sky)
end

function Outside.bg_house(e, sprite, pos, quad)
	e:give("id", "bg_house")
	:give("sprite", sprite)
	:give("position", pos)
	:give("quad", quad)
	:give("z_index", z_index.bg_house, false)
end

function Outside.left_bounds(e)
	e:give("id", "left_bounds")
	:give("position", vec2:new(80, 260))
	:give("collider3d", vec3:new(92, 100, 16))
	:give("bump3d")
end

function Outside.right_bounds(e)
	e:give("id", "right_bounds")
	:give("position", vec2:new(1160, 250))
	:give("collider3d", vec3:new(32, 100, 32))
	:give("bump3d")
end

function Outside.wood(e)
	e:give("id", "wood")
	:give("position", vec2:new(210, 270))
	:give("collider3d", vec3:new(50, 10, 16))
	:give("bump3d")
end

function Outside.fence(e, sprite)
	e:give("id", "fence")
	:give("sprite", sprite)
	:give("position", vec2:new(-47, 330))
	:give("collider3d", vec3:new(850, 16, 61))
	:give("z_index", z_index.fence)
	:give("bump3d")
end

function Outside.gate(e, sprite)
	e:give("id", "gate")
	:give("sprite", sprite)
	:give("position", vec2:new(800, 330))
	:give("transform", 0, 1, 1, 0, 16)
	:give("collider3d", vec3:new(200, 8, 32))
	:give("bump3d")
	:give("z_index", z_index.fence)
end

function Outside.splashes(e, spritesheet, pos, is_compatible)
	e:give("id", "splashes")
	:give("position", pos)
	:give("z_index", z_index.splashes)
	:give("color", {1, 1, 1, 1})
	:give("animation")
	:give("animation_data", {
			spritesheet = spritesheet,
			frames = {"1-2", 1, "1-2", 2, "1-2", 3, "1-2", 4},
			delay = 0.2,
			rows_count = 4,
			columns_count = 2,
			n_frames = 8,
			start_frame = random(1, 8),
		})

	if not is_compatible then
		e:give("transform", 0, 2, 2)
	end
end

function Outside.fence_right(e)
	e:give("id", "fence_right")
	:give("position", vec2:new(1000, 330))
	:give("collider3d", vec3:new(407, 16, 61))
	:give("bump3d")
end

function Outside.car(e, sprite)
	e:give("id", "car")
	:give("sprite", sprite)
	:give("position", vec2:new(934, 260))
	:give("collider3d", vec3:new(78, 8, 50))
	:give("bump3d")
	:give("transform", 0, 1, 1, 0, -16)
	:give("z_index", z_index.car)
end

function Outside.house(e, part)
	local id = "house_" .. part
	local data = Colliders.get(id)

	e:give("id", id)
	:give("position", data.pos)
	:give("collider3d", data.col)
	:give("bump3d")
end

function Outside.house_side(e)
	e:give("id", "house_side")
	:give("position", vec2:new(580, 200))
	:give("collider3d", vec3:new(60, 60, 64))
	:give("bump3d")
end

function Outside.door(e)
	e:give("id", "door")
	:give("position", vec2:new(580, 250))
	:give("collider3d", vec3:new(24, 36, 8), "cross")
	:give("bump3d")
	:give("item")
	:give("notify", "question_mark")
	:give("action_eye")
	:give("action_hand")
	:give("action_bag")
	:give("action_cancel")
end

function Outside.staircase(e)
	e:give("id", "staircase")
	:give("position", vec2:new(446, 260))
	:give("collider3d", vec3:new(2, 12, 16), "cross")
	:give("bump3d")
	:give("item")
	:give("staircase")
	:give("notify", "question_mark")
	:give("action_eye")
	:give("action_hand")
	:give("action_cancel")
end

function Outside.left_wall(e)
	e:give("id", "left_wall")
	:give("position", vec2:new(96, 160))
	:give("collider3d", vec3:new(120, 100, 64))
	:give("bump3d")
end

function Outside.right_wall(e)
	e:give("id", "right_wall")
	:give("position", vec2:new(640, 185))
	:give("collider3d", vec3:new(520, 60, 64))
	:give("bump3d")
end

function Outside.firefly(e, sprite, pos, points)
	e:give("id", "firefly")
	:give("sprite", sprite)
	:give("position", pos)
	:give("path", points)
	:give("z_index", z_index.firefly)
	:give("firefly", {Palette.get("firefly_start"), Palette.get("firefly_end")})
	:give("color", Palette.get("firefly_start", 0))
	:give("hidden")
end

return Outside
