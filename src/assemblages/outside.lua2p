local Log = require("modules.log.log")

local Animation = require("animation")
local Info = require("info")
local Palette = require("palette")
local Resources = require("resources")

local Outside = {
	colliders = {},
	lights = {},
}

local Light = require("assemblages.light")

local z_index = {
	bg_house = 0,
	firefly = 2,
	--player = 3,
	splashes = 4,
}

local ground_h = 48
local bounds_w, bounds_h = 52, 72
local bounds_l_w = 28

function Outside.bg_house(e, x, y, quad)
	e:give($_C_ID, "bg_house")
	:give($_C_SPRITE, "bg_house")
	:give($_C_POS, x, y)
	:give($_C_QUAD, quad)
	:give($_C_Z_INDEX, z_index.bg_house, false)
end

function Outside.splashes(e)
	local splashes = Resources.data.images.splashes
	local resource_id = "splashes"
	local is_compatible = Info.is_texturesize_compatible(splashes:getWidth())
	if not is_compatible then
		resource_id = "splashes_low"
		Log.warn("Texture size for splashes use 'low' version")
	end
	e:give($_C_ID, "splashes")
	:give($_C_SPLASHES)
	:give($_C_POS, 0, 4)
	:give($_C_Z_INDEX, z_index.splashes)
	:give($_C_COLOR, {1, 1, 1, 1})
	:give($_C_ANIMATION)
	:give($_C_ANIMATION_DATA, Animation.get("outside_" .. resource_id))

	if not is_compatible then
		e:give($_C_TRANSFORM, 0, 4, 4)
	end
end

function Outside.firefly(e, x, y, size)
	e:give($_C_ID, "firefly")
	:give($_C_FIREFLY)
	:give($_C_POS, x, y, 2)
	:give($_C_POINT_LIGHT, size)
	:give($_C_DIFFUSE, {0, 0, 0})
end

function Outside.colliders.ground(e, w, h)
	e:give($_C_ID, "col_ground")
	:give($_C_POS, 0, h - ground_h)
	:give($_C_COLLIDER, w, ground_h)
	:give($_C_BUMP)
	:give($_C_GROUND)
end

function Outside.colliders.left_bound(e, w, h)
	e:give($_C_ID, "col_left_bound")
	:give($_C_POS, 0, h - ground_h - bounds_h)
	:give($_C_COLLIDER, bounds_l_w, bounds_h)
	:give($_C_BUMP)
	:give($_C_WALL)
end

function Outside.colliders.right_bound(e, w, h)
	e:give($_C_ID, "col_right_bound")
	:give($_C_POS, w - bounds_w, h - ground_h - bounds_h)
	:give($_C_COLLIDER, bounds_w, bounds_h)
	:give($_C_BUMP)
	:give($_C_WALL)
end

function Outside.lights.pl_car_headlight(e, id)
	e:assemble(Light.point, 733, 296, 4, 24, Palette.get_diffuse("car_headlight_pl"))
	:give($_C_ID, id)
	:give($_C_CAR_LIGHTS)
end

function Outside.lights.sl_car_headlight(e, id)
	e:assemble(Light.spot,
		751, 290, 6,
		{-1, 0.25, 0, 0.95},
		256,
		Palette.get_diffuse("car_headlight_sl"))
	:give($_C_ID, id)
	:give($_C_CAR_LIGHTS)
end

function Outside.lights.pl_backdoor(e, id)
	e:assemble(Light.point, 446, 292, 62, 72, Palette.get_diffuse("door_pl"))
	:give($_C_ID, id)
end

function Outside.lights.sl_backdoor(e, id)
	e:assemble(Light.spot,
		446, 241, 4,
		{0, 1, -0.8, 0.77},
		64,
		Palette.get_diffuse("door_sl"))
	:give($_C_ID, id)
end

function Outside.lights.pl_frontdoor(e, id)
	e:assemble(Light.point, 316, 262, 62, 72, Palette.get_diffuse("door_pl"))
	:give($_C_ID, id)
end

function Outside.lights.sl_frontdoor(e, id)
	e:assemble(Light.spot,
		316, 221, 4,
		{0, 1, -1, 0.73},
		64,
		Palette.get_diffuse("door_sl"))
	:give($_C_ID, id)
end

return Outside
