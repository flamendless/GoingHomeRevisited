local Palette = require("palette")

local random = love.math.random

local Outside = {}

local z_index = {
	bg_house = 0,
	firefly = 1,
	--player = 2,
	car = 3,
	fence = 4,
	railings = 10,
	splashes = 11,
}

local data = {
	house_left = {
		pos = {240, 128},
		col = {180, 140}
	},
	house_right = {
		pos = {480, 128},
		col = {80, 140}
	},
	house_top = {
		pos = {420, 180},
		col = {150, 45}
	},
	col_railing_left = {
		pos = {420, 236},
		col = {14, 18}
	},
	col_railing_right = {
		pos = {484, 240},
		col = {76, 28}
	}
}

function Outside.bg_house(e, sprite, x, y, quad)
	e:give("id", "bg_house")
	:give("sprite", sprite)
	:give("pos", x, y)
	:give("quad", quad)
	:give("z_index", z_index.bg_house, false)
end

function Outside.railings(e, sprite)
	e:give("id", "railings")
	:give("sprite", sprite)
	:give("pos", 421, 220)
	:give("z_index", z_index.railings, false)
	:give("railings")
	:give("hidden")
end

function Outside.col_railing(e, part)
	local id = "col_railing_" .. part
	local data = data[id]

	e:give("id", id)
	:give("pos", unpack(data.pos))
	:give("collider", unpack(data.col))
	:give("bump")
end

function Outside.left_bounds(e)
	e:give("id", "left_bounds")
	:give("pos", 80, 260)
	:give("collider", 92, 100)
	:give("bump")
end

function Outside.right_bounds(e)
	e:give("id", "right_bounds")
	:give("pos", 1160, 250)
	:give("collider", 32, 100)
	:give("bump")
end

function Outside.wood(e)
	e:give("id", "wood")
	:give("pos", 210, 270)
	:give("collider", 50, 10)
	:give("bump")
end

function Outside.fence(e, sprite)
	e:give("id", "fence")
	:give("sprite", sprite)
	:give("pos", -47, 330)
	:give("collider", 850, 16)
	:give("z_index", z_index.fence)
	:give("bump")
end

function Outside.gate(e, sprite)
	e:give("id", "gate")
	:give("sprite", sprite)
	:give("pos", 800, 330)
	:give("transform", 0, 1, 1, 0, 16)
	:give("collider", 200, 8)
	:give("bump")
	:give("z_index", z_index.fence)
end

function Outside.splashes(e, spritesheet, x, y, is_compatible)
	e:give("id", "splashes")
	:give("pos", x, y)
	:give("z_index", z_index.splashes)
	:give("color", {1, 1, 1, 1})
	:give("animation")
	:give("animation_data", {
			spritesheet = spritesheet,
			frames = {"1-2", 1, "1-2", 2, "1-2", 3, "1-2", 4},
			delay = 0.2,
			rows_count = 4,
			columns_count = 2,
			n_frames = 8,
			start_frame = random(1, 8),
		})

	if not is_compatible then
		e:give("transform", 0, 2, 2)
	end
end

function Outside.fence_right(e)
	e:give("id", "fence_right")
	:give("pos", 1000, 330)
	:give("collider", 407, 16)
	:give("bump")
end

function Outside.car(e, sprite)
	e:give("id", "car")
	:give("sprite", sprite)
	:give("pos", 934, 260)
	:give("collider", 78, 8)
	:give("bump")
	:give("transform", 0, 1, 1, 0, -16)
	:give("z_index", z_index.car)
end

function Outside.house(e, part)
	local id = "house_" .. part
	local data = data[id]

	e:give("id", id)
	:give("pos", unpack(data.pos))
	:give("collider", unpack(data.col))
	:give("bump")
end

function Outside.house_side(e)
	e:give("id", "house_side")
	:give("pos", 565, 200)
	:give("collider", 65, 60)
	:give("bump")
end

function Outside.left_railing(e)
	e:give("id", "left_railing")
	:give("pos", 420, 237)
	:give("collider", 20, 4, 0, 0, "cross")
	:give("bump")
end

function Outside.right_railing(e)
	e:give("id", "right_railing")
	:give("pos", 480, 237)
	:give("collider", 72, 4, 0, 0, "cross")
	:give("bump")
end

function Outside.left_wall(e)
	e:give("id", "left_wall")
	:give("pos", 96, 160)
	:give("collider", 120, 100)
	:give("bump")
end

function Outside.right_wall(e)
	e:give("id", "right_wall")
	:give("pos", 640, 185)
	:give("collider", 520, 60)
	:give("bump")
end

function Outside.firefly(e, sprite, x, y, points)
	e:give("id", "firefly")
	:give("sprite", sprite)
	:give("pos", x, y)
	:give("path", points)
	:give("transform", 0, 1, 1, 0.5, 0.5)
	:give("z_index", z_index.firefly)
	:give("firefly", {Palette.colors.firefly_start, Palette.colors.firefly_end})
	:give("color", Palette.get("firefly_start", 0))
	:give("hidden")
end

function Outside.firefly_light(e, sprite, e_firefly)
	e:give("id", "firefly_light")
	:give("firefly_light")
	:give("pos", 0, 0)
	:give("transform", 0, 1, 1)
	:give("color", Palette.colors.firefly_light)
	:give("light", "round", 1)
	:give("sprite", sprite, "round")
	:give("light_flicker", 0.05)
	:give("attach_to", e_firefly)
	:give("z_index", z_index.firefly + 1)
	:give("hidden")
end

function Outside.house_light(e, sprite)
	e:give("id", "house_light")
	:give("pos", 419, 213)
	:give("transform", 0, 1.25, 1.25)
	:give("color", Palette.colors.house_light)
	:give("light", "custom", 0.8)
	:give("sprite", sprite)
	:give("light_flicker", 0.025)
end

return Outside
