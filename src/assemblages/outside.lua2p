local Log = require("modules.log.log")

local AnimationData = require("animation_data")
local Info = require("info")
local Palette = require("palette")
local Resources = require("resources")

local Outside = {
	colliders = {}
}

local z_index = {
	bg_house = 0,
	firefly = 2,
	--player = 3,
	splashes = 4,
}

local ground_h = 49
local bounds_w, bounds_h = 28, 72

function Outside.bg_house(e, x, y, quad)
	e:give("id", "bg_house")
	:give("sprite", "bg_house")
	:give("pos", x, y)
	:give("quad", quad)
	:give("z_index", z_index.bg_house, false)
end

function Outside.splashes(e, x, y)
	local splashes = Resources.data.images.splashes
	local resource_id = "splashes"
	local is_compatible = Info.is_texturesize_compatible(splashes:getWidth())
	if not is_compatible then
		resource_id = "splashes_low"
		Log.warn("Texture size for splashes use 'low' version")
	end
	e:give("id", "splashes")
	:give("splashes")
	:give("pos", 0, 0)
	:give("z_index", z_index.splashes)
	:give("color", {1, 1, 1, 1})
	:give("animation")
	:give("animation_data", AnimationData.get("outside_" .. resource_id))

	if not is_compatible then
		e:give("transform", 0, 4, 4)
	end
end

function Outside.firefly(e, x, y, points)
	e:give("id", "firefly")
	:give("firefly")
	:give("sprite", "firefly_light", "round")
	:give("pos", x, y)
	:give("path", points)
	:give("transform", 0, 1, 1)
	:give("z_index", z_index.firefly)
	:give("color", Palette.get("firefly_start", 0))
	:give("light", "round", 1)
	:give("hidden")
end

function Outside.house_light(e)
	e:give("id", "house_light")
	:give("pos", 272, 212)
	:give("transform", 0, 1.25, 1.25)
	:give("color", Palette.colors.house_light)
	:give("light", "custom", 0.8)
	:give("sprite", "house_light")
	:give("light_flicker", 0.025)
end

function Outside.colliders.ground(e, w, h)
	e:give("id", "col_ground")
	:give("pos", 0, h - ground_h)
	:give("collider", w, ground_h)
	:give("bump")
end

function Outside.colliders.left_bounds(e, w, h)
	e:give("id", "col_left_bounds")
	:give("pos", 0, h - ground_h - bounds_h)
	:give("collider", bounds_w, bounds_h)
	:give("bump")
end

function Outside.colliders.right_bounds(e, w, h)
	e:give("id", "col_right_bounds")
	:give("pos", w - bounds_w, h - ground_h - bounds_h)
	:give("collider", bounds_w, bounds_h)
	:give("bump")
end

function Outside.colliders.car(e, w, h)
	local car_h = 48
	e:give("id", "col_car")
	:give("pos", 730, h - ground_h - car_h)
	:give("collider", 126, car_h, "cross")
	:give("bump")
	:give("interactive")
	:give("dialogue", "outside", "car")
end

function Outside.colliders.backdoor(e, w, h)
	local backdoor_h = 66
	e:give("id", "col_backdoor")
	:give("pos", 440, h - ground_h - backdoor_h)
	:give("collider", 8, backdoor_h, "cross")
	:give("bump")
	:give("interactive")
	:give("dialogue", "outside", "backdoor_locked")
end

function Outside.colliders.frontdoor(e, w, h)
	local frontdoor_h = 32
	e:give("id", "col_frontdoor")
	:give("pos", 300, h - ground_h - frontdoor_h)
	:give("collider", 32, frontdoor_h, "cross")
	:give("bump")
	:give("interactive")
	:give("dialogue", "outside", "frontdoor")
end

return Outside
