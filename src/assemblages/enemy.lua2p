local Animation = require("animation")
local Colliders = require("data.colliders")
local Enums = require("enums")

local BTEnemy = require("behaviors.enemy")

local Enemy = {}

function Enemy.get_multi_anim_data(enemy_type)
	@@assert(type(enemy_type) == "string")
	local tbl_anim = {"idle", "walk", "lean_back", "lean_return_back"}
	local data, mods = Animation.get_multi_by_id("enemy_" .. enemy_type, tbl_anim)
	return data, mods
end

function Enemy.base(e, enemy_type, x, y)
	@@assert(e.__isEntity)
	@@assert(type(enemy_type) == "string")
	@@assert(type(x) == "number" and type(y) == "number")
	local data, mods = Enemy.get_multi_anim_data(enemy_type)
	local collider = Colliders.enemy[enemy_type].idle

	e:give($_C_ID, "enemy", "suit")
	:give($_C_ENEMY, enemy_type)
	:give($_C_POS, x, y)
	:give($_C_MULTI_ANIMATION_DATA, Enums.enemy_suit_anim.idle, data, mods)
	:give($_C_TRANSFORM, 0, 1, 1, collider.ox, 0)
	:give($_C_COLLIDER, collider.w, collider.h, Enums.bump_filter.cross)
	:give($_C_BUMP)
	:give($_C_CONTROLLER)
	:give($_C_ENEMY_CONTROLLER)
	:give($_C_BODY)
	:give($_C_ANIMATION)
	:give($_C_CURRENT_FRAME)
	:give($_C_MOVEMENT)
	:give($_C_Z_INDEX, 10)
	:give($_C_BEHAVIOR_TREE, BTEnemy, Enums.bt.enemy)
	:give($_C_LINE_OF_SIGHT, 64)
	:give($_C_CONTROLLER_ORIGIN)

	return e
end

return Enemy
