local Player = {}

local player_h = 64

function Player.base(e, x, y, speed_data, gravity, defaults)
	@@sassert(defaults, type(defaults) == "table")
	@@sassert(defaults.can_move, type(defaults.can_move) == "boolean")
	@@sassert(defaults.can_run, type(defaults.can_run) == "boolean")
	@@sassert(defaults.can_open_door, type(defaults.can_open_door) == "boolean")
	local can_move = defaults.can_move
	local can_run = defaults.can_run
	local can_open_door = defaults.can_open_door

	local multi_data = {
		idle = {
			resource_id = "sheet_player_idle_normal",
			frames = {"1-5", 1, "1-5", 2},
			delay = 0.25,
			rows_count = 2,
			columns_count = 5,
			n_frames = 10,
		},
		walk = {
			resource_id = "sheet_player_walk_normal",
			frames = {"1-4", 1, "1-4", 2},
			delay = 0.1,
			rows_count = 2,
			columns_count = 4,
			n_frames = 8,
		},
		run = {
			resource_id = "sheet_player_run_normal",
			frames = {"1-6", 1},
			delay = 0.1,
			rows_count = 1,
			columns_count = 6,
			n_frames = 6,
		},
	}

	local multi_data_modifier = {
		--copy (1) as (2) applying (3)
		idle = {"idle_left",  "flipH"},
		walk = {"walk_left",  "flipH"},
		run = {"run_left", "flipH"},
	}

	if can_open_door then
		multi_data.open_door = {
			resource_id = "sheet_player_open_door_normal",
			frames = {"1-7", 1},
			delay = 0.15,
			rows_count = 1,
			columns_count = 7,
			n_frames = 7,
		}
		multi_data_modifier.open_door = {"open_door_left", "flipH"}

		multi_data.open_door_reverse = {
			resource_id = "sheet_player_open_door_normal",
			frames = {
				"1-7", 1, -- 1-7
				"7-5", 1, -- 8-10
				"5-7", 1, -- 11-13
				"7-1", 1, -- 13-20
			},
			delay = {
				["1-6"] = 0.15,
				["7-8"] = 0.25,
				["9-13"] = 0.075,
				["14-20"] = 0.15,
			},
			rows_count = 1,
			columns_count = 7,
			n_frames = 7,
		}
		multi_data_modifier.open_door_reverse = {"open_door_reverse_left", "flipH"}
	end

	e:give("id", "player")
	:give("player")
	:give("pos", x, y)
	:give("transform", 0, 1, 1, 18, 0)
	:give("collider", 24, player_h)
	:give("bump")
	:give("speed")
	:give("speed_data", speed_data)
	:give("gravity", gravity)
	:give("animation")
	:give("player_controller")
	:give("body", can_move, can_run)
	:give("multi_animation_data", "idle", multi_data, multi_data_modifier)
	:give("spawn_point_action_controls")
	:give("spawn_point_question_mark")
	:give("movement")
end

function Player.outside_house(e, x, y)
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	e:assemble(Player.base,
		x, y,
		{
			idle = {x = 0, y = 0},
			walk = {x = 128, y = 92},
			run = {x = 180, y = 144},
		},
		320,
		{
			can_move = false,
			can_run = false,
			can_open_door = true,
		})
	:give("z_index", 5)
	:give("color", {1, 1, 1, 0})
end

function Player.utility_room(e, x, y)
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	e:assemble(Player.base,
		x, y,
		{
			idle = {x = 0, y = 0},
			walk = {x = 128, y = 92},
			run = {x = 180, y = 144},
		},
		320,
		{
			can_move = false,
			can_run = false,
			can_open_door = false,
		})
	:give("z_index", 5)
	:give("color", {1, 1, 1, 1})
end

return Player
