local Player = {}

function Player.base(e, movement, pos, speed_data, gravity, resources, defaults)
	!if _ASSERT then
	Assert.either_value(movement, "platformer", "topdown")
	if Assert.safe_should_table(defaults) then
		Assert.safe_should_boolean(defaults.can_move)
		Assert.safe_should_boolean(defaults.can_run)
	end
	!end

	local can_move = defaults.can_move
	local can_run = defaults.can_run

	e:give("position", pos)
	:give("transform", 0, 1, 1, 18, 0)
	:give("collider3d", vec3:new(28, 12, 64))
	:give("bump3d", "player")
	:give("speed")
	:give("speed_data", speed_data)
	:give("gravity", gravity)
	:give("animation")
	:give("player_controller")
	:give("body", can_move, can_run)
	:give("multiple_animation_data", "idle",
		{
			idle = {
				spritesheet = resources.sheet_idle,
				frames = {"1-5", 1, "1-5", 2},
				delay = 0.1,
				rows_count = 2,
				columns_count = 5,
				n_frames = 10,
			},
			walk = {
				spritesheet = resources.sheet_walk,
				frames = {"1-4", 1, "1-4", 2},
				delay = 0.1,
				rows_count = 2,
				columns_count = 4,
				n_frames = 8,
			},
			run = {
				spritesheet = resources.sheet_run,
				frames = {"1-6", 1},
				delay = 0.1,
				rows_count = 1,
				columns_count = 6,
				n_frames = 6,
			},
		}, {
			--copy (1) as (2) applying (3)
			idle = {"idle_left",  "flipH"},
			walk = {"walk_left",  "flipH"},
			run = {"run_left", "flipH"},
		})

	if movement == "platformer" then
		e:give("movement_platformer")
	elseif movement == "topdown" then
		e:give("movement_topdown")
	end
end

function Player.outside_house(e, sheet_idle, sheet_walk, sheet_run, can_move, can_run)
	e:assemble(Player.base, "topdown",
		vec2:new(910, 270),
		{idle = vec2:new(), walk = vec2:new(128, 92), run = vec2:new(180, 144)},
		320, {
			sheet_idle = sheet_idle,
			sheet_walk = sheet_walk,
			sheet_run = sheet_run,
		}, {
			can_move = can_move,
			can_run = can_run,
		})
	:give("z_index", 2)
	:give("camera_follow_offset", vec2:new(0, 32))
end

return Player
