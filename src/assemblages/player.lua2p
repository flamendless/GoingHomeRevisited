local Animation = require("animation")
local Colliders = require("data.colliders")
local Enums = require("enums")

local Player = {}

function Player.get_multi_anim_data(for_flashlight, can_open_door)
	local tbl_anim = {"idle", "walk", "run"}
	if can_open_door then
		table.insert(tbl_anim, "open_door")
		table.insert(tbl_anim, "open_locked_door")
	end
	local data, mods = Animation.get_multi_by_id("player", tbl_anim)
	if for_flashlight then
		for _, tag in pairs(data) do
			tag.resource_id = tag.resource_id .. "_f"
		end
	end
	return data, mods
end

function Player.base(e, x, y, speed_data, gravity, can)
	@@sassert(can, type(can) == "table")
	@@sassert(can.move, type(can.move) == "boolean")
	@@sassert(can.run, type(can.run) == "boolean")
	@@sassert(can.open_door, type(can.open_door) == "boolean")
	local data, mods = Player.get_multi_anim_data(false, can.open_door)
	local collider = Colliders.player

	e:give($_C_ID, "player")
	:give($_C_PLAYER)
	:give($_C_POS, x, y)
	:give($_C_TRANSFORM, 0, 1, 1, 18, 0)
	:give($_C_COLLIDER, collider.w, collider.h)
	:give($_C_BUMP)
	:give($_C_SPEED)
	:give($_C_SPEED_DATA, speed_data)
	:give($_C_GRAVITY, gravity)
	:give($_C_ANIMATION)
	:give($_C_ANIMATION_EV_UPDATE, "player_update_animation")
	:give($_C_PLAYER_CONTROLLER)
	:give($_C_BODY)
	:give($_C_MULTI_ANIMATION_DATA, Enums.anim_state.idle, data, mods)
	:give($_C_CURRENT_FRAME)
	:give($_C_MOVEMENT)
	:give($_C_FL_SPAWN_OFFSET, 7, -16)
	:give($_C_IS_RUNNING)
	:give($_C_IS_INTERACTING)

	if can.move then
		e:give($_C_CAN_MOVE)
	end
	if can.run then
		e:give($_C_CAN_RUN)
	end
	if can.interact then
		e:give($_C_CAN_INTERACT)
	end
	if can.open_door then
		e:give($_C_CAN_OPEN_DOOR)
	end
end

function Player.outside_house(e, x, y)
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	e:assemble(Player.base,
		x, y,
		{
			idle = {x = 0, y = 0},
			walk = {x = 96, y = 0},
			run = {x = 148, y = 0},
		},
		320,
		{
			move = false,
			run = false,
			open_door = true,
		})
	:give($_C_Z_INDEX, 5)
	:give($_C_COLOR, {1, 1, 1, 0})
end

function Player.room(e, x, y)
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	e:assemble(Player.base,
		x, y,
		{
			idle = {x = 0, y = 0},
			walk = {x = 96, y = 0},
			run = {x = 148, y = 0},
		},
		320,
		{
			move = false,
			run = false,
			open_door = true,
		})
	:give($_C_Z_INDEX, 8)
	:give($_C_COLOR, {1, 1, 1, 1})
end

return Player
