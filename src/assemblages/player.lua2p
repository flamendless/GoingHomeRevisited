local AnimationData = require("animation_data")

local Player = {}

local player_h = 64

function Player.get_multi_anim_data(for_flashlight, can_open_door)
	local data, mods = {}, {}

	data.idle = AnimationData.get("player_idle")
	data.walk = AnimationData.get("player_walk")
	data.run = AnimationData.get("player_run")

	if can_open_door then
		data.open_door = AnimationData.get("player_open_door")
		data.open_locked_door = AnimationData.get("player_open_locked_door")
	end

	if for_flashlight then
		for _, tag in pairs(data) do
			tag.resource_id = tag.resource_id .. "_f"
		end
	end

	--copy (1) as (2) applying (3)
	mods.idle = {"idle_left", "flipH"}
	mods.walk = {"walk_left", "flipH"}
	mods.run = {"run_left", "flipH"}
	mods.open_door = {"open_door_left", "flipH"}
	mods.open_locked_door = {"open_locked_door_left", "flipH"}

	return data, mods
end

function Player.base(e, x, y, speed_data, gravity, can)
	@@sassert(can, type(can) == "table")
	@@sassert(can.move, type(can.move) == "boolean")
	@@sassert(can.run, type(can.run) == "boolean")
	@@sassert(can.open_door, type(can.open_door) == "boolean")
	local data, mods = Player.get_multi_anim_data(false, can.open_door)

	e:give("id", "player")
	:give("player")
	:give("pos", x, y)
	:give("transform", 0, 1, 1, 18, 0)
	:give("collider", 24, player_h)
	:give("bump")
	:give("speed")
	:give("speed_data", speed_data)
	:give("gravity", gravity)
	:give("animation")
	:give("player_controller")
	:give("body")
	:give("multi_animation_data", "idle", data, mods)
	:give("current_frame")
	:give("movement")
	:give("fl_spawn_offset", 7, -16)
	:give("is_running")
	:give("is_interacting")

	if can.move then
		e:give("can_move")
	end
	if can.run then
		e:give("can_run")
	end
	if can.interact then
		e:give("can_interact")
	end
	if can.open_door then
		e:give("can_open_door")
	end
end

function Player.outside_house(e, x, y)
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	e:assemble(Player.base,
		x, y,
		{
			idle = {x = 0, y = 0},
			walk = {x = 96, y = 0},
			run = {x = 148, y = 0},
		},
		320,
		{
			move = false,
			run = false,
			open_door = true,
		})
	:give("z_index", 5)
	:give("color", {1, 1, 1, 0})
end

function Player.room(e, x, y)
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	e:assemble(Player.base,
		x, y,
		{
			idle = {x = 0, y = 0},
			walk = {x = 96, y = 0},
			run = {x = 148, y = 0},
		},
		320,
		{
			move = false,
			run = false,
			open_door = true,
		})
	:give("z_index", 8)
	:give("color", {1, 1, 1, 1})
end

return Player
