local Palette = require("palette")

local UI = {}

local line_width = 7

function UI.paint_data(e, sheet)
	e:give("id", "paint_data")
	:give("text_paint_data", {
			spritesheet = sheet,
			frames = {"1-7", 1, "1-7", 2, "1-7", 3},
			delay = 0.1,
			rows_count = 3,
			columns_count = 7,
			n_frames = 21
		})
end

function UI.splat_data(e, sheet)
	e:give("id", "splat_data")
	:give("text_paint_data", {
			spritesheet = sheet,
			frames = {"1-3", 1, "1-3", 2, "1-3", 3, "1-3", 4, "1-1", 5},
			delay = 0.1,
			rows_count = 5,
			columns_count = 3,
			n_frames = 13
		})
end

function UI.ui_text(e, text, font, pos)
	e:give("id", "ui_text")
	:give("static_text", text)
	:give("font", font)
	:give("position", pos)
	:give("color", Palette.get("white", 0))
	:give("ui_text")
	:give("hidden")
end

function UI.hold_progress_bg(e, pos, radius, segments)
	e:give("id", "hold_progress_bg")
	:give("position", pos)
	:give("arc", radius, segments)
	:give("line_width", line_width * 2)
	:give("color", Palette.get("ui_hold_progress", 0))
	:give("draw_mode", "line")
	:give("arc_type", "open")
	:give("ui_element")
end

function UI.hold_progress(e, pos, timer, radius, segments)
	e:give("id", "hold_progress")
	:give("position", pos)
	:give("hold", timer)
	:give("arc", radius, segments)
	:give("line_width", line_width)
	:give("color", Palette.get("ui_hold_progress", 0))
	:give("draw_mode", "line")
	:give("arc_type", "open")
	:give("ui_element")
end

function UI.keypress(e, is_hold, sheet, target)
	!if _ASSERT then
	Assert.should_boolean(is_hold)
	!end

	local delay = is_hold and {0.5, 0.5, 2} or 0.5

	e:give("id", "keypress")
	:give("ui_element")
	:give("animation_data", {
			spritesheet = sheet,
			frames = {"1-3", 1},
			delay = delay,
			rows_count = 1,
			columns_count = 3,
			n_frames = 3,
		})
	:give("animation")
	:give("position", vec2:new())
	:give("transform", 0, 1, 1, 0.5, 0.5)
	:give("color", {1, 1, 1, 0})
	:give("attach_to", target)
end

function UI.key(e, key, pos, font)
	e:give("id", "key_" .. key)
	:give("text", key)
	:give("font", font)
	:give("position", pos)
	:give("color", Palette.get("ui_key", 0))
	:give("transform", 0, 1, 1, 0.5, 0.5)
	:give("ui_text")
end

return UI
