local Cache = require("cache")
local Enums = require("enums")
local Palette = require("palette")

local Inventory = {}

local CACHE_ID = "calculated"

function Inventory.bg(e, x, y, scale)
	e:give($_C_ID, "inventory_bg")
	:give($_C_POS, x, y)
	:give($_C_SPRITE, "bg_inventory")
	:give($_C_TRANSFORM, 0, scale, scale, 0.5, 0.5)
	:give($_C_COLOR, {1, 1, 1, 1})
	:give($_C_UI_ELEMENT)
end

function Inventory.choice(e, str, x, y)
	e:give($_C_ID, "inventory_choice_" .. string.lower(str))
	:give($_C_FONT, "inventory_choice")
	:give($_C_STATIC_TEXT, str)
	:give($_C_POS, x, y)
	:give($_C_ALPHA_RANGE, 0.25, 0.5)
	:give($_C_COLOR, {0, 0, 0, 0.25})
	:give($_C_LIST_ITEM)
	:give($_C_LIST_GROUP, $_LIST_INVENTORY_CHOICES)
	:give($_C_TRANSFORM, 0.1745329, 1, 1, 0.5, 0.5, -0.25)
	:give($_C_UI_ELEMENT)
end

function Inventory.border(e, i, x, y, rw, rh, ih, is_horizontal)
	local id = "inventory_border" .. i
	local cached = Cache.get(CACHE_ID, id)
	local r, sy
	if not cached then
		if is_horizontal then
			r = $_T_H_PI
			sy = rw/ih
		else
			r = 0
			sy = rh/ih
		end
		Cache.store(CACHE_ID, id, {r, sy})
	else
		r, sy = unpack(cached)
	end
	e:give($_C_ID, id)
	:give($_C_SPRITE, "inventory_border")
	:give($_C_POS, x, y)
	:give($_C_TRANSFORM, r, 0.5, sy, 0.5, 0, -0.05, -0.05)
	:give($_C_TEXTURED_LINE)
	:give($_C_UI_ELEMENT)
	:give($_C_COLOR, {1, 1, 1, 1})
end

function Inventory.dline(e, i, x1, y1, x2, y2)
	local id = "inventory_dline" .. i
	local cached = Cache.get(CACHE_ID, id)
	local r = cached
	if not cached then
		local dx, dy = x2 - x1, y2 - y1
		r = math.atan2(dy, dx) - $_HALF_PI
		Cache.store(CACHE_ID, id, r)
	end
	e:give($_C_ID, id)
	:give($_C_SPRITE, "inventory_border")
	:give($_C_POS, x1, y1)
	:give($_C_TRANSFORM, r, 0.25, 1, 0.5, 0, 0.05, 0.05)
	:give($_C_TEXTURED_LINE)
	:give($_C_UI_ELEMENT)
	:give($_C_COLOR, {1, 1, 1, 1})
end

function Inventory.cell(e, i, x, y, w, h)
	e:give($_C_ID, "cell_" .. i)
	:give($_C_LIST_ITEM)
	:give($_C_LIST_GROUP, $_LIST_INVENTORY_CELLS)
	:give($_C_POS, x, y)
	:give($_C_RECT, w, h)
	:give($_C_DRAW_MODE, Enums.draw_mode.fill)
	:give($_C_COLOR, Palette.get("inventory_cell", 0.4))
	:give($_C_ALPHA_RANGE, 0, 0.4)
	:give($_C_UI_ELEMENT)
end

return Inventory
