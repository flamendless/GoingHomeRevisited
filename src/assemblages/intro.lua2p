local AnimationData = require("animation_data")
local Palette = require("palette")
local Resources = require("resources")

local Intro = {}

local speed = {
	clouds = 2,
	building = 8,
	road = 512,
	post = 512,
	post_light = 512,
	grass1 = 640,
	grass2 = 656,
	grass_back = 48,
	grass_front = 496,
	bg_trees = 400,
	fg_trees = 530,
}

--z_index, zoom_factor
local z_index = {
	clouds = {1, 0.005},
	building = {1, 0.005},
	fog1 = {1, 0.005},
	grass_back = {2, 0.01},
	bg_trees = {3, 0.015},
	bg_tree_cover = {4, 0.02},
	fog4 = {5, 0.02},
	grass_front = {7, 0.025},
	post_light = {8, 0.03},
	post = {8, 0.03},
	road = {9, 0.04},
	grass1 = {10, 0.05},
	car = {11, 0.04},
	fog2 = {12, 0.04},
	grass2 = {13, 0.06},
	fg_trees = {14, 0.07},
	fog3 = {15, 0.07},
}

function Intro.parallax(e, resource_id, quad_width, tag, sx, sy)
	@@assert(speed[tag])
	@@assert(z_index[tag])
	@@assert(type(quad_width) == "number")
	@@sassert(sx, type(sx) == "number")
	@@sassert(sy, type(sy) == "number")
	local img = Resources.data.images[resource_id]
	local scale_x = sx or 1
	local scale_y = sy or 1
	local w, h = img:getDimensions()
	local quad = love.graphics.newQuad(0, 0,
		quad_width * scale_x, h * scale_y,
		w * scale_x, h * scale_y)
	local x = 0
	local y = 0

	if tag == "bg_trees" then
		x = love.graphics.getWidth()
		y = 90
		e:give("parallax_stop")
		:give("bg_tree")
	elseif tag == "fg_trees" then
		y = 172
	end

	e:give("id", "parallax_" .. tag)
	:give("sprite", resource_id)
	:give("quad", quad)
	:give("pos", x, y)
	:give("parallax", speed[tag], 0)
	:give("z_index", z_index[tag][1], false)
	:give("quad_transform")
	:give("depth_zoom", z_index[tag][2])
end

function Intro.post_light(e, resource_id, quad_width, tag, sx, sy)
	Intro.parallax(e, resource_id, quad_width, tag, sx, sy)
	e:give("transform")
	:give("light", "custom", 1)
	:give("color", Palette.colors.post_light)
	:give("light_flicker", 0.1)
	:give("light_disabled")
	:give("intro_light")
	:give("depth_zoom", z_index.post_light[2])
end

function Intro.bg_tree_cover(e, resource_id)
	local img = Resources.data.images[resource_id]
	e:give("id", "bg_tree_cover")
	:give("sprite", resource_id)
	:give("pos", love.graphics.getWidth(), 90)
	:give("transform", 0, 1, 1, img:getWidth() * 0.5)
	:give("z_index", z_index.bg_tree_cover[1])
	:give("depth_zoom", z_index.bg_tree_cover[2])
	:give("bg_tree", true)
end

function Intro.car(e)
	e:give("id", "car")
	:give("animation_data", AnimationData.get("car"))
	:give("pos", 16, 325)
	:give("animation", false)
	:give("z_index", z_index.car[1])
	:give("depth_zoom", z_index.car[2])
	:give("transform")
end

function Intro.car_reflect(e, car)
	e:give("id", "car_reflect")
	:give("animation_data", AnimationData.get("car_reflect"))
	:give("pos", 0, 0)
	:give("animation", false)
	:give("attach_to", car)
	:give("z_index", z_index.car[1])
	:give("depth_zoom", z_index.car[2])
	:give("transform")
end

function Intro.car_light(e, car)
	e:give("id", "car_light")
	:give("pos", 0, 0)
	:give("transform")
	:give("depth_zoom", z_index.car[2])
	:give("color", Palette.colors.car_light)
	:give("light", "cone", 0.8)
	:give("sprite", "car_headlight", "cone")
	:give("light_flicker", 0.075)
	:give("attach_to", car)
	:give("attach_to_offset", 112, 24)
	:give("z_index", z_index.car[1])
end

function Intro.title(e, x, y)
	e:give("id", "title")
	:give("sprite", "title")
	:give("pos", x, y)
	:give("hidden")
	:give("transform", 0, 6, 6, 0.5, 0.5)
	:give("color", {1, 1, 1, 0})
	:give("ui_element")
end

function Intro.title_light(e, sprite)
	e:give("id", "title_light")
	:give("sprite", "title_light")
	:give("pos", 142, 64)
	:give("transform", 0, 4, 4, 0.5, 0.5)
	:give("color", {1, 1, 1})
	:give("light", "custom", 1)
	:give("light_flicker", 0.075)
	:give("light_disabled")
end

function Intro.fog(e, id, w, h, color, x, y, fsx, fsy, speed)
	e:give("id", id)
	:give("sprite", "dummy")
	:give("noise_texture", w, h)
	:give("pre_shader_color")
	:give("color", color)
	:give("pos", x, y)
	:give("transform", 0, fsx, fsy)
	:give("fog", speed)
	:give("z_index", z_index[id][1], false)
	:give("depth_zoom", z_index[id][2])
end

return Intro
