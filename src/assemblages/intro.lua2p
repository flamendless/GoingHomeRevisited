local Palette = require("palette")

local Intro = {}

local speed = {
	building = 8,
	road = 512,
	post = 512,
	post_light = 512,
	grass1 = 640,
	grass2 = 656,
	grass_back = 48,
	grass_front = 496,
	bg_trees = 400,
	fg_trees = 530,
}

local z_index = {
	building = 1,
	grass_back = 2,
	bg_trees = 3,
	bg_tree_cover = 4,
	grass_front = 7,
	road = 8,
	post_light = 8,
	post = 9,
	grass1 = 10,
	car = 11,
	grass2 = 13,
	fg_trees = 14,
}

function Intro.parallax(e, sprite, quad_width, tag, sx, sy)
	!if _ASSERT then
	Assert.exists(speed[tag])
	Assert.exists(z_index[tag])
	Assert.must(quad_width, Types.T_NUMBER)
	Assert.safe.must(sx, Types.T_NUMBER)
	Assert.safe.must(sy, Types.T_NUMBER)
	!end

	local scale_x = sx or 1
	local scale_y = sy or 1
	local w, h = sprite:getDimensions()
	local quad = love.graphics.newQuad(0, 0,
		quad_width * scale_x, h * scale_y,
		w * scale_x, h * scale_y)
	local x = 0
	local y = 0

	if tag == "bg_trees" then
		x = love.graphics.getWidth()
		y = 90
		e:give("parallax_stop")
		:give("bg_tree")
	elseif tag == "fg_trees" then
		y = 172
	end

	e:give("id", "parallax_" .. tag)
	:give("sprite", sprite)
	:give("quad", quad)
	:give("position", vec2:new(x, y))
	:give("parallax", vec2:new(speed[tag], 0))
	:give("z_index", z_index[tag])
end

function Intro.bg_tree_cover(e, sprite)
	e:give("id", "bg_tree_cover")
	:give("sprite", sprite)
	:give("position", vec2:new(love.graphics.getWidth(), 90))
	:give("transform", 0, 1, 1, sprite:getWidth()/2)
	:give("z_index", z_index.bg_tree_cover)
	:give("bg_tree", true)
end

function Intro.car(e, spritesheet)
	local data = {
		spritesheet = spritesheet,
		frames = {"1-3", 1, "1-3", 2, "1-3", 3, "1-3", 4},
		delay = 0.2,
		rows_count = 4,
		columns_count = 3,
		n_frames = 12
	}
	local car_init_pos = vec2:new(16, 325)

	e:give("id", "car")
	:give("animation_data", data)
	:give("position", car_init_pos)
	:give("animation", false)
	:give("z_index", z_index.car)
end

function Intro.car_reflect(e, spritesheet, car)
	local data = {
		spritesheet = spritesheet,
		frames = {"1-3", 1, "1-3", 2, "1-3", 3, "1-3", 4},
		delay = 0.2,
		rows_count = 4,
		columns_count = 3,
		n_frames = 12
	}

	e:give("id", "car_reflect")
	:give("animation_data", data)
	:give("position", vec2:new())
	:give("animation", false)
	:give("attach_to", car)
	:give("z_index", z_index.car)
end

function Intro.car_light(e, sprite, car)
	e:give("id", "car_light")
	:give("position", vec2:new())
	:give("transform", 0, 1, 1)
	:give("color", Palette.colors.car_light)
	:give("light", "cone", 0.8)
	:give("sprite", sprite, "cone")
	:give("light_flicker", 0.075)
	:give("attach_to", car)
	:give("attach_to_offset", vec2:new(112, 24))
end

function Intro.title(e, sprite, pos)
	e:give("id", "title")
	:give("sprite", sprite)
	:give("position", pos)
	:give("hidden")
	:give("transform", 0, 6, 6, 0.5, 0.5)
	:give("color", {1, 1, 1, 0})
	:give("ui_element")
end

function Intro.title_light(e, sprite)
	e:give("id", "title_light")
	:give("sprite", sprite)
	:give("position", vec2:new(142, 64))
	:give("transform", 0, 4, 4, 0.5, 0.5)
	:give("color", {1, 1, 1})
	:give("light", "custom", 1)
	:give("light_flicker", 0.075)
	:give("light_disabled")
end

return Intro
