local Animation = require("animation")
local Enums = require("enums")
local Palette = require("palette")

local Atlas = require("atlases.atlas_intro")

local Intro = {}

local speed = {
	clouds = 2,
	buildings = 8,
	road = 512,
	post = 512,
	post_light = 512,
	grass = 640,
	grass2 = 656,
	grass_back = 48,
	grass_front = 496,
	trees_bg = 400,
	trees_fg = 530,
}

--z_index, zoom_factor
local z_index = {
	clouds = {1, 0.005},
	buildings = {1, 0.005},
	fog1 = {1, 0.005},
	grass_back = {2, 0.01},
	trees_bg = {3, 0.015},
	bg_tree_cover = {4, 0.02},
	fog4 = {5, 0.02},
	grass_front = {7, 0.025},
	post = {8, 0.03},
	road = {9, 0.04},
	post_light = {9, 0.03},
	grass = {10, 0.05},
	car = {11, 0.04},
	car_reflect = {12, 0.04},
	fog2 = {12, 0.04},
	grass2 = {13, 0.06},
	trees_fg = {14, 0.07},
	fog3 = {15, 0.07},
}

local positions = {
	buildings = {0, 260},
	road = {0, 360},
	grass = {0, 390},
	grass2 = {0, 396},
	grass_back = {0, 324},
	grass_front = {0, 334},
	trees_bg = {0, 36},
	trees_fg = {0, 108},
	post = {108, 106},
	post_light = {0, 108},
}

function Intro.parallax(e, tag, scale)
	@@assert(type(tag) == "string")
	@@sassert(scale, type(scale) == "number")
	@@assert(speed[tag])
	@@assert(z_index[tag])

	local x, y = 0, 0
	local pos = positions[tag]
	if pos then
		x, y = unpack(pos)
	end

	if tag == "trees_bg" then
		x = love.graphics.getWidth()
		e:give($_C_PARALLAX_STOP)
		:give($_C_BG_TREE)
	end

	local item = Atlas.frames[tag]
	if not scale then
		local ww, wh = love.graphics.getDimensions()
		local w, h = item.w, item.h
		scale = math.min(ww/w, wh/h)
	end

	e:give($_C_ID, tag)
	:give($_C_SPRITE, "atlas_intro")
	:give($_C_ATLAS, item)
	:give($_C_POS, x, y)
	:give($_C_PARALLAX, speed[tag], 0)
	:give($_C_PARALLAX_MULTI_SPRITE, tag)
	:give($_C_Z_INDEX, z_index[tag][1], false)
	:give($_C_QUAD_TRANSFORM, 0, scale, scale)
	:give($_C_DEPTH_ZOOM, z_index[tag][2])
end

function Intro.post_light(e, tag, scale)
	Intro.parallax(e, tag, scale)
	e:give($_C_TRANSFORM)
	:give($_C_LIGHT, Enums.light_shape.custom, 1)
	:give($_C_COLOR, Palette.get_diffuse("post"))
	:give($_C_LIGHT_FLICKER, 0.1)
	:give($_C_LIGHT_DISABLED)
	:give($_C_INTRO_LIGHT)
	:give($_C_DEPTH_ZOOM, z_index.post_light[2])
end

function Intro.bg_tree_cover(e)
	local item = Atlas.frames.bg_tree_cover
	local ww, wh = love.graphics.getDimensions()
	local w, h = item.w, item.h
	local scale = math.min(ww/w, wh/h)

	e:give($_C_ID, "bg_tree_cover")
	:give($_C_SPRITE, "atlas_intro")
	:give($_C_ATLAS, item)
	:give($_C_POS, love.graphics.getWidth(), 110)
	:give($_C_QUAD_TRANSFORM, 0, scale, scale, item.w * 0.5)
	:give($_C_Z_INDEX, z_index.bg_tree_cover[1])
	:give($_C_DEPTH_ZOOM, z_index.bg_tree_cover[2])
	:give($_C_BG_TREE, true)
end

function Intro.car(e)
	e:give($_C_ID, "car")
	:give($_C_ANIMATION_DATA, Animation.get("car"))
	:give($_C_POS, 16, 325)
	:give($_C_ANIMATION, false)
	:give($_C_Z_INDEX, z_index.car[1])
	:give($_C_DEPTH_ZOOM, z_index.car[2])
	:give($_C_TRANSFORM)
end

function Intro.car_reflect(e, car)
	e:give($_C_ID, "car_reflect")
	:give($_C_ANIMATION_DATA, Animation.get("car_reflect"))
	:give($_C_POS, car.pos.x, car.pos.y)
	:give($_C_ANIMATION, false)
	:give($_C_ATTACH_TO, car)
	:give($_C_Z_INDEX, z_index.car_reflect[1])
	:give($_C_DEPTH_ZOOM, z_index.car_reflect[2])
	:give($_C_TRANSFORM)
end

function Intro.car_light(e, car)
	e:give($_C_ID, "car_light")
	:give($_C_POS, 0, 0)
	:give($_C_TRANSFORM)
	:give($_C_DEPTH_ZOOM, z_index.car[2])
	:give($_C_COLOR, Palette.get_diffuse("car"))
	:give($_C_LIGHT, "cone", 0.8)
	:give($_C_SPRITE, "atlas_intro")
	:give($_C_ATLAS, Atlas.frames.car_headlight)
	:give($_C_LIGHT_FLICKER, 0.075)
	:give($_C_ATTACH_TO, car)
	:give($_C_ATTACH_TO_OFFSET, 112, 24)
	:give($_C_Z_INDEX, z_index.car[1])
end

function Intro.title(e, x, y)
	e:give($_C_ID, "title")
	:give($_C_SPRITE, "atlas_intro")
	:give($_C_ATLAS, Atlas.frames.title)
	:give($_C_POS, x, y)
	:give($_C_QUAD_TRANSFORM, 0, 6, 6, 0.5, 0.5)
	:give($_C_COLOR, {1, 1, 1, 0})
	:give($_C_UI_ELEMENT)
	:give($_C_HIDDEN)
end

function Intro.title_light(e, x, y)
	e:give($_C_ID, "title_light")
	:give($_C_SPRITE, "atlas_intro")
	:give($_C_ATLAS, Atlas.frames.title_light)
	:give($_C_POS, x, y)
	:give($_C_QUAD_TRANSFORM, 0, 4, 4, 0.5, 0.5)
	:give($_C_COLOR, {1, 1, 1})
	:give($_C_LIGHT, Enums.light_shape.custom, 1)
	:give($_C_LIGHT_FLICKER, 0.075)
	:give($_C_LIGHT_DISABLED)
	:give($_C_HIDDEN)
end

function Intro.fog(e, id, w, h, color, x, y, fsx, fsy, fog_speed)
	e:give($_C_ID, id)
	:give($_C_SPRITE, "dummy")
	:give($_C_NOISE_TEXTURE, w, h)
	:give($_C_COLOR, color)
	:give($_C_POS, x, y)
	:give($_C_TRANSFORM, 0, fsx, fsy)
	:give($_C_FOG, fog_speed)
	:give($_C_Z_INDEX, z_index[id][1], false)
	:give($_C_DEPTH_ZOOM, z_index[id][2])
	:give($_C_CUSTOM_RENDERER, "draw_fog")
end

return Intro
