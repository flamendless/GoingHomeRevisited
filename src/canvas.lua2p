local Canvas = class()

local color_red = {1, 0, 0, 1}

function Canvas:new_default(x, y, width, height, rotation, scale)
	local _canvas = love.graphics.newCanvas(width, height)
	_canvas:setFilter(!(_CANVAS_FILTER), !(_CANVAS_FILTER))

	return self:init({
		canvas = _canvas,
		x = x, y = y,
		width = width, height = height,
		rotation = rotation,
		scale = scale,
	})
end

function Canvas:new_from_table(tbl)
	local _x = tbl.x
	local _y = tbl.y
	local _w = tbl.width
	local _h = tbl.height
	local _rotation = tbl.rotation
	local _scale = tbl.scale or 1

	local _canvas = love.graphics.newCanvas(_w, _h)
	_canvas:setFilter(!(_CANVAS_FILTER), !(_CANVAS_FILTER))

	return self:init({
		canvas = _canvas,
		x = _x, y = _y,
		width = _w, height = _h,
		rotation = _rotation,
		scale = _scale,
	})
end

function Canvas:new_from_canvas(source)
	local _canvas = love.graphics.newCanvas(source.width, source.height)
	_canvas:setFilter(!(_CANVAS_FILTER), !(_CANVAS_FILTER))

	return self:init({
		canvas = _canvas,
		x = source.x, y = source.y,
		width = source.width, height = source.height,
		rotation = source.rotation,
		scale = source.scale,
	})
end

function Canvas:new(x, y, width, height, rotation, scale)
	local c
	if type(x) == "table" then
		if x.type and x:type() == "Canvas" then
			c = self:new_from_canvas(x)
		else
			c = self:new_from_table(x)
		end
	elseif type(x) == "number" then
	 	c = self:new_default(x, y, width, height, rotation, scale)
	end

	return c
end

function Canvas:set(x, y, width, height, rotation, scale)
	local _x, _y, _w, _h, _rotation, _scale
	if (type(x) == "number") then
		_x = x
		_y = y
		_w = width
		_h = height
		_rotation = rotation
		_scale = scale or 1
	elseif (type(x) == "table") then
		if x.type and x:type() == "Canvas" then
			local c = x
			_x = c.x
			_y = c.y
			_w = c.width
			_h = c.height
			_rotation = c.rotation
			_scale = c.scale
		else
			local tbl = x
			_x = tbl.x
			_y = tbl.y
			_w = tbl.width
			_h = tbl.height
			_rotation = tbl.rotation
			_scale = tbl.scale or 1
		end
	end
	self.width = _w
	self.height = _h
	self.x = _x
	self.y = _y
	self.rotation = _rotation
	self.scale = _scale
end

function Canvas:attach()
	love.graphics.setCanvas(self.canvas)
	love.graphics.clear()
	love.graphics.setBlendMode("alpha")
	love.graphics.setColor(1, 1, 1, 1)
end

function Canvas:detach()
	love.graphics.setCanvas()
end

function Canvas:override_draw(fn)
	self:attach()
	fn()
	self:detach()
end

function Canvas:render()
	love.graphics.setColor(1, 1, 1, 1)
	love.graphics.setBlendMode("alpha", "premultiplied")
	love.graphics.draw(self.canvas, self.x, self.y, self.rotation, self.scale, self.scale)
	love.graphics.setBlendMode("alpha")
end

function Canvas:type()
	return "CustomCanvas"
end

return Canvas
