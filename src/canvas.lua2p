local Canvas = class()

function Canvas:new_default(x, y, width, height, rotation, scale)
	local _canvas = love.graphics.newCanvas(width, height)
	_canvas:setFilter(!(_CANVAS_FILTER), !(_CANVAS_FILTER))

	return self:init({
		flags = _flags,
		canvas = _canvas,
		x = x, y = y,
		width = w, height = h,
		scale = scale,
	})
end

function Canvas:new_from_table(tbl)
	local _x = tbl.x
	local _y = tbl.y
	local _w = tbl.width
	local _h = tbl.height
	local _scale = tbl.scale or 1

	local _canvas = love.graphics.newCanvas(_w, _h)
	_canvas:setFilter(!(_CANVAS_FILTER), !(_CANVAS_FILTER))

	return self:init({
		flags = _flags,
		canvas = _canvas,
		x = _x, y = _y,
		width = _w, height = _h,
		scale = _scale,
	})
end

function Canvas:new_from_canvas(source)
	local _canvas = love.graphics.newCanvas(source.width, source.height)
	_canvas:setFilter(!(_CANVAS_FILTER), !(_CANVAS_FILTER))

	return self:init({
		flags = _flags,
		canvas = _canvas,
		x = source.x, y = source.y,
		width = source.width, height = source.height,
		scale = source.scale,
	})
end

function Canvas:new(x, y, width, height, rotation, scale)
	local _flags = {}
	!if not _RELEASE then
	_flags.draw_bounds = true
	_flags.draw_cross = true
	!else
	_flags.draw_bounds = false
	_flags.draw_cross = false
	!end

	local c
	if type(x) == "table" then
		if x.type and x:type() == "Canvas" then
			c = self:new_from_canvas(x)
			c.flags = _flags
		else
			c = self:new_from_table(x)
			c.flags = _flags
		end
	elseif type(x) == "number" then
	 	c = self:new_default(x, y, width, height, rotation, scale)
		c.flags = _flags
	end
	return c
end

function Canvas:set(x, y, width, height, rotation, scale)
	local _x, _y, _w, _h, _scale
	if (type(x) == "number") then
		_x = x
		_y = y
		_w = width
		_h = height
		_scale = scale or 1
	elseif (type(x) == "table") then
		if x.type and x:type() == "Canvas" then
			local c = x
			_x = c.x
			_y = c.y
			_w = c.width
			_h = c.height
			_scale = c.scale
		else
			local tbl = x
			_x = tbl.x
			_y = tbl.y
			_w = tbl.width
			_h = tbl.height
			_scale = tbl.scale or 1
		end
	end
	self.width = _w
	self.height = _h
	self.x = _x
	self.y = _y
	self.scale = _scale
end

function Canvas:attach()
	love.graphics.setCanvas(self.canvas)
	love.graphics.clear()
	love.graphics.setBlendMode("alpha")
	love.graphics.setColor(1, 1, 1, 1)
end

function Canvas:detach()
	!if not _RELEASE then
	if self.flags.draw_bounds and self.custom_color_bounds then
		self:draw_bounds(self.custom_color_bounds)
	end
	!end
	love.graphics.setCanvas()
end

function Canvas:override_draw(fn)
	self:attach()
	fn()
	self:detach()
end

function Canvas:render()
	love.graphics.setColor(1, 1, 1, 1)
	love.graphics.setBlendMode("alpha", "premultiplied")
	love.graphics.draw(self.canvas, self.x, self.y)
	love.graphics.setBlendMode("alpha")

	!if not _RELEASE then
	self:draw_bounds()
	self:draw_cross()
	!end
end

!if not _RELEASE then
function Canvas:draw_bounds()
	if not self.flags.draw_bounds then return end
	love.graphics.setColor(self.debug_color)
	love.graphics.setLineWidth(4)
	love.graphics.rectangle("line", self.x, self.y, self.width, self.height)
end

function Canvas:draw_cross()
	if not self.flags.draw_cross then return end
	love.graphics.setColor(self.debug_color)
	love.graphics.setLineWidth(1)
	local w = love.graphics.getWidth()
	local h = love.graphics.getHeight()
	love.graphics.line(w/2, 0, w/2, h)
	love.graphics.line(0, h/2, w, h/2)
end
!end

function Canvas:type()
	return "Canvas"
end

return Canvas
