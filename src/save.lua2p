local Log = require("modules.log.log")

local Utils = require("utils")

local format = string.format

local Save = {
	data = {
		splash_done = false,
		intro_done = false
	},
	checkpoints = {},
	valid_checkpoints = false,
	exists = false,
}

local save_filename = !(_SAVE_FILENAME)
local key_filename = !(_SAVE_KEY)

function Save.initialize()
	local content, exists = Utils.read_file(save_filename)
	local key, exists_key = Utils.read_file(key_filename)

	if exists and exists_key then
		local hashed = love.data.hash("sha256", content)

		if key == hashed then
			local data = Utils.deserialize(content)
			Save.data = data
			Save.validate_checkpoints(data)
		else
			local error_msg = format("Data integrity is not valid.\n\
				Please do not modify the files: '%s' and '%s'.\n\
				Please delete the files in '%s' and restart the game",
				save_filename, key_filename, love.filesystem.getSaveDirectory())

			error(error_msg)
		end
	else
		Save.overwrite()
	end

	Save.exists = exists
	Log.info(stringx.pretty(Save.data, 2))
end

function Save.validate_checkpoints(data)
	!if _ASSERT then
	Assert.should_table(data)
	!end
end

function Save.overwrite()
	local data = Utils.serialize_to_file(save_filename, Save.data)
	local hashed = love.data.hash("sha256", data)

	Utils.write_to_file(key_filename, hashed)
end

!(
local test = {"splash_done", "intro_done"}
for i, flag in ipairs(test) do
	local method = "set_" .. flag
	outputLua("function Save." .. method .. "(should_overwrite)\n")
	if _ASSERT then
		outputLua("\tAssert.safe_should_boolean(should_overwrite)\n")
	end
	outputLua("\tSave.data." .. flag .. " = true\n")
	outputLua("\tif should_overwrite then\n")
	outputLua("\t\tSave.overwrite()\n")
	outputLua("\tend\n")
	outputLua("end\n")
end
)

return Save
