local Concord = require("modules.concord.concord")
local Gamera = require("modules.gamera.gamera")
local Log = require("modules.log.log")
local TLE = require("modules.tle.timeline")

local min = math.min
local random = love.math.random

local NGrading = require("ngrading")
local Resources = require("resources")
local Preloader = require("preloader")
local Settings = require("settings")

local StateOutside = class()
StateOutside.id = "Outside"

local Components = {}
Concord.utils.loadNamespace("components", Components)

local Systems = {
	Animation = require("systems.animation"),
	BumpCollision = require("systems.bump_collision"),
	Bump3DCollision = require("systems.bump3d_collision"),
	Camera = require("systems.camera"),
	Collision = require("systems.collision"),
	Fireflies = require("systems.fireflies"),
	PlayerController = require("systems.player_controller"),
	Movement = require("systems.movement"),
	RenderSprite = require("systems.render_sprite"),
	RenderText = require("systems.render_text"),
}

local Assemblages = {
	Common = require("assemblages.common"),
	Outside = require("assemblages.outside"),
	Player = require("assemblages.player"),
}

local resources = { images = {}, image_data = {}, fonts = {} }
local effect

function StateOutside:new()
	return self:init({
		is_ready = false,
		world = Concord.world(),
		entities = {},
		camera = nil,
		gamestate = nil
	})
end

function StateOutside:load()
	Log.info("State Load: ", self.id)
	local resources_data = Resources:getData("outside")
	Preloader.start(resources_data, resources,
		function()
			self.is_ready = true
			self:start()
		end)
end

function StateOutside:start()
	local ww, wh = love.graphics.getDimensions()
	local w, h = resources.images.bg:getDimensions()

	self.scale = min(ww/w, wh/h)
	self.camera = Gamera.new(0, 0, w, h)
	self.camera:setWindow(0, 0, ww, wh)
	self.camera:setScale(self.scale)

	self.world:addSystem(Systems.Animation)
	-- self.world:addSystem(Systems.BumpCollision)
	self.world:addSystem(Systems.Bump3DCollision)
	self.world:addSystem(Systems.Fireflies)
	self.world:addSystem(Systems.PlayerController)
	self.world:addSystem(Systems.RenderSprite)
	self.world:addSystem(Systems.RenderText)
	self.world:addSystem(Systems.Collision)
	self.world:addSystem(Systems.Camera)
	self.world:addSystem(Systems.Movement)

	self.world:emit("camera_set", self.camera)

	self.entities.bg = Concord.entity(self.world)
		:assemble(Assemblages.Outside.bg, resources.images.bg)

	self.entities.left_wall = Concord.entity(self.world)
		:assemble(Assemblages.Outside.left_wall)

	self.entities.right_wall = Concord.entity(self.world)
		:assemble(Assemblages.Outside.right_wall)

	self.entities.wood = Concord.entity(self.world)
		:assemble(Assemblages.Outside.wood)

	self.entities.house = Concord.entity(self.world)
		:assemble(Assemblages.Outside.house)

	self.entities.house_side = Concord.entity(self.world)
		:assemble(Assemblages.Outside.house_side)

	self.entities.ground = Concord.entity(self.world)
		:assemble(Assemblages.Outside.ground, vec2:new(w, 64))

	self.entities.player = Concord.entity(self.world)
		:assemble(Assemblages.Player.base, "topdown",
			vec2:new(920, 300),
			{ idle = 0, walk = 128, run = 180 }, 320,
			{
				sheet_idle = resources.images.sheet_player_idle,
				sheet_walk = resources.images.sheet_player_walk,
				sheet_run = resources.images.sheet_player_run,
			})
		:give("z_index", 2)
		:give("camera_follow", vec2:new(0, 32))
	self.world:emit("face_left", self.entities.player)

	self.entities.car = Concord.entity(self.world)
		:assemble(Assemblages.Outside.car, resources.images.car)

	self.entities.fence = Concord.entity(self.world)
		:assemble(Assemblages.Outside.fence, resources.images.fence)

	self.entities.fence_mid = Concord.entity(self.world)
		:assemble(Assemblages.Outside.fence_mid)

	self.entities.fence_right = Concord.entity(self.world)
		:assemble(Assemblages.Outside.fence_right)

	-- self.world:emit("generate_fireflies", random(5, 10), resources.images.firefly,
	-- 	vec2:new(670, 222), vec2:new(922, 298))
	-- self.world:emit("generate_fireflies", random(5, 10), resources.images.firefly,
	-- 	vec2:new(1030, 230), vec2:new(1136, 286))

	local lut_size, lut_night
	if Settings.current.graphics_quality == "Low" then
		lut_size = 16
		lut_night = resources.image_data.lut_night_16
	else
		lut_size = 64
		lut_night = resources.image_data.lut_night_64
	end

	effect = NGrading:new(lut_night, lut_size)
	effect:setup_data()

	self.timeline = TLE.Do(function()
		-- self.camera:setScale(2.5)
	end)
end

function StateOutside:update(dt)
	if not self.is_ready then return end

	self.world:emit("preupdate", dt)
	self.world:emit("update_topdown", dt)
	self.world:emit("update", dt)
	self.world:emit("camera_follow")

	!if not _RELEASE then
	self.world:emit("update_debug", dt)
	!end
end

function StateOutside:draw()
	if not self.is_ready then return end

	self.camera:draw(function()
		effect:apply()
		self.world:emit("draw")
		self.world:emit("draw_z")

		!if not _RELEASE then
		if self.draw_debug then
			self.world:emit("draw_debug")
		end
		!end

		love.graphics.setShader()
	end)
end

function StateOutside:keypressed(key)
	!if not _RELEASE then
	if key == "`" then
		self.draw_debug = not self.draw_debug
	end
	!end
end

function StateOutside:exit()
	Resources.clean(resources)
	for i, e in ipairs(self.world:getEntities()) do
		e:destroy()
	end
end

return StateOutside
