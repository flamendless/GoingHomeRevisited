local Animation = require("modules.anim8.anim8")
local Concord = require("modules.concord.concord")
local Enum = require("modules.enum.enum")
local Log = require("modules.log.log")
local LoveSplash = require("modules.splashes.o-ten-one")

local lower = string.lower

local Preloader = require("preloader")
local Fade = require("fade")

local StateMenu = {
	id = "Menu",
	world = Concord.world(),
	entities = {},
	canvases = {},
	is_ready = false,
}

local Components = {}
Concord.utils.loadNamespace("components", Components)
local Systems = {
	RenderText = require("systems.render_text"),
	Menu = require("systems.menu"),
	GhostEffect = require("systems.ghost_effect"),
}

local assets_data = {
	image = {
		{ "bg_title", "assets/images/menu/title.png" },
	},
	font = {
		{ "jamboree", "assets/fonts/Jamboree.ttf", 24 },
	}
}
local assets = { images = {}, sources = {}, fonts = {} }

local states = Enum("menu", "play", "settings", "about", "exit")
local current_state = states.menu
local options = { "Play", "Settings", "About", "Exit" }
table.reverse(options)

!if not _RELEASE and _ASSERT then
for i, str in ipairs(options) do
	local lstr = lower(str)
	local test = states[lstr]
end
!end

function StateMenu:on_play()
end

function StateMenu:on_settings()
end

function StateMenu:on_about()
end

function StateMenu:on_exit()
end

function StateMenu:load()
	Log.info("State Load: ", self.id)
	local p = Preloader.start(assets_data, assets)
	p:onComplete(function()
		self.is_ready = true

		self.world:addSystems(Systems.RenderText)
		self.world:addSystems(Systems.Menu)
		self.world:addSystems(Systems.GhostEffect)

		self.entities.ghost_effect = Concord.entity(self.world)
			:give("random_text", { "Going", "Home", "Revisited" }, assets.fonts.jamboree_24)
			:give("ghost_effect", {
				range_scale = vec2:new(1, 2),
				range_every = vec2:new(0.5, 3),
				range_trigger = vec2:new(0.15, 0.85),
				range_chance = vec2:new(15, 85),
			})

		local font = assets.fonts.jamboree_24
		for i, str in ipairs(options) do
			local padding = 32
			local str_w = font:getWidth(str)
			local str_h = font:getHeight(str)
			local x = self.canvases.bot_canvas.width - str_w - padding
			local y = self.canvases.bot_canvas.height - (i * str_h) - padding
			local lstr = lower(str)

			local id = "text_" .. lstr
			self.entities[id] = Concord.entity(self.world)
				:give("position", vec2:new(x, y))
				:give("text", str, font)
				:give("color", {1, 1, 1, 1})
				:give("option_key", i)
				:give("on_enter", function()
					current_state = states[lstr]
					Log.info("Switched Menu State to: ", current_state)
					self["on_" .. lstr](self)
				end)
		end
	end)
end

function StateMenu:update(dt)
	if not self.is_ready then return end
	self.world:emit("update", dt)
end

function StateMenu:game_draw(canvas)
	if not self.is_ready then return end
	love.graphics.draw(assets.images.bg_title, 0, 0, 0, canvas.scale)
end

function StateMenu:ui_draw(canvas)
	if not self.is_ready then return end
	love.graphics.setColor(1, 1, 1, 1)
	self.world:emit("ui_draw")
end

function StateMenu:draw()
	if not self.is_ready then return end
	self.world:emit("effect_draw")
end

function StateMenu:keypressed(key)
	if not self.is_ready then return end
	local dt = 0
	if key == "s" or key == "down" then
		dt = -1
	elseif key == "w" or key == "up" then
		dt = 1
	elseif key == "e" or key == "return" or key == "space" then
		self.world:emit("enter_option")
	end
	self.world:emit("update_cursor", dt)
end

return StateMenu
