local Animation = require("modules.anim8.anim8")
local Concord = require("modules.concord.concord")
local Enum = require("modules.enum.enum")
local Flux = require("modules.flux.flux")
local Log = require("modules.log.log")
local LoveSplash = require("modules.splashes.o-ten-one")
local Lume = require("modules.lume.lume")
local Timer = require("modules.hump.timer")

local random = love.math.random
local randomf = Lume.random

local Keybinds = require("keybinds")
local Fade = require("fade")
local Preloader = require("preloader")

local StateSplash = {
	id = "Splash",
	is_ready = false,
	world = Concord.world(),
	entities = {},
}

local Components = {}
Concord.utils.loadNamespace("components", Components)
local Systems = {
	GhostEffect = require("systems.ghost_effect"),
	GlitchEffect = require("systems.glitch_effect"),
	Lerp = require("systems.lerp"),
	Typewriter = require("systems.typewriter"),
}

local states = Enum("splash_love", "splash_flam")
local current_state = states.splash_love
local assets_data = {
	font = {
		{ "firefly", "assets/fonts/Firefly.ttf", 256 },
		{ "uncle_type", "assets/fonts/uncle_type.ttf", 32 },
	}
}
local assets = { fonts = {} }

local splash_love
local timer_skip, timer_love_skip

local splash_love_skippable = false
local splash_flam_skippable = false

local color_a = {0.898, 0.48627451, 0.074509804, 1}
local color_b = {0.952941176, 0.952941176, 0.054901961, 1}
local color_glitches = {
	{randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.3, 0.7)},
	{randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.3, 0.7)},
	{randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.3, 0.7)},
	{randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.1, 0.9), randomf(0.3, 0.7)},
}

local is_switching = false
local switch = function()
	if is_switching then return end
	is_switching = true
	Fade.fade_out(function()
		state_switch("Menu")
	end)
end

function StateSplash:load()
	Log.info("State Load: ", self.id)
	local p = Preloader.start(assets_data, assets)
	p:onComplete(function()
		self.is_ready = true
		self.world:addSystems(Systems.GhostEffect)
		self.world:addSystems(Systems.GlitchEffect)
		self.world:addSystem(Systems.Lerp)
		self.world:addSystem(Systems.Typewriter)

		local font = assets.fonts.firefly_256
		self.entities.ghost_effect = Concord.entity(self.world)
			:give("random_text", "flamendless", font)
			:give("ghost_effect")

		self.entities.glitch_effect = Concord.entity(self.world)
			:give("random_text", {"flamendless", "brandon"}, font)
			:give("glitch_effect")
			:give("glitch_colors", color_glitches)
			:give("color", color_a)
			:give("lerp_color", {color_a, color_b})
			:give("position", vec2:new(love.graphics.getWidth()/2, love.graphics.getHeight()/2))
			:give("transform", 0, 1, 1, 0.5, 0.5)

		self.entities.typewriter = Concord.entity(self.world)
			:give("color", {1, 1, 1, 1})
			:give("position", vec2:new(love.graphics.getWidth()/2, love.graphics.getHeight() * 0.3))
			:give("transform", 0, 1, 1, 0.5, 0.5)
			:give("text", "", assets.fonts.uncle_type_32)
			:give("typewriter", "a game by", 0.4)
			:give("typewriter_on_finish", function()
				switch()
			end, 2)
	end)

	timer_skip = Timer()
	timer_love_skip = Timer()

	timer_love_skip:after(1.5, function()
		splash_love_skippable = true
	end)

	splash_love = LoveSplash()
	splash_love.onDone = function()
		current_state = states.splash_flam
		self.world:emit("start_color_lerp")
		self.world:emit("start_typewriter")
	end
end

function StateSplash:update(dt)
	if not self.is_ready then return end
	if current_state == states.splash_love then
		timer_love_skip:update(dt)
		splash_love:update(dt)
	elseif current_state == states.splash_flam then
		self.world:emit("update", dt)
		timer_skip:update(dt)
	end
end

function StateSplash:draw()
	if not self.is_ready then return end
	if current_state == states.splash_love then
		splash_love:draw()
	elseif current_state == states.splash_flam then
		self.world:emit("draw")
		self.world:emit("effect_draw")
	end
	love.graphics.setColor(Fade.getColor())
	love.graphics.rectangle("fill", 0, 0, love.graphics.getWidth(), love.graphics.getHeight())
end

function StateSplash:keypressed(key)
	if Keybinds.pressed_ui("enter", key) then
		if splash_love and splash_love_skippable then
			splash_love:skip()
		end
		if current_state == states.splash_flam and splash_flam_skippable then
			switch()
		end
	end
end

return StateSplash
