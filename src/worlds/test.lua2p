local Concord = require("modules.concord.concord")
local Gamera = require("modules.gamera.gamera")

local StateTest = class()
StateTest.id = "Test"

local Resources = require("resources")
local Preloader = require("preloader")

local Components = {}
Concord.utils.loadNamespace("components", Components)
local Systems = {
	Animation = require("systems.animation"),
	BumpCollision = require("systems.bump_collision"),
	Collision = require("systems.collision"),
	Controller = require("systems.controller"),
	Movement = require("systems.movement"),
	RenderSprite = require("systems.render_sprite"),
	Item = require("systems.item"),
}

local Assemblages = {
	Common = require("assemblages.common"),
	Player = require("assemblages.player"),
}

local resources_data = {
	image = {
		{ "sheet_player_idle", "res/images/player/player_idle.png" },
		{ "sheet_player_walk", "res/images/player/player_walk.png" },
		{ "sheet_player_run", "res/images/player/player_run.png" },
	},
}
local resources = { images = {} }
local scale = 1

function StateTest:new()
	return self:init({
		is_ready = false,
		world = Concord.world(),
		entities = {},
		camera = nil,
	})
end

function StateTest:load()
	Preloader.start(resources_data, resources,
		function()
			self.is_ready = true
			self:start()
		end)
end

function StateTest:start()
	local ww, wh = love.graphics.getDimensions()
	self.camera = Gamera.new(0, 0, ww, wh)
	self.camera:setWindow(0, 0, ww, wh)

	self.world:addSystem(Systems.Animation)
	self.world:addSystem(Systems.BumpCollision)
	self.world:addSystem(Systems.Controller)
	self.world:addSystem(Systems.Movement)
	self.world:addSystem(Systems.RenderSprite)
	self.world:addSystem(Systems.Collision)
	self.world:addSystem(Systems.Item)

	local ground = Concord.entity(self.world)
		:give("position", vec2:new(256, 412))
		:give("collider", vec2:new(512, 128))
		:give("bump")
		:give("body")
		:give("debug_slab", "ground")

	local left_wall = Concord.entity(self.world)
		:give("position", vec2:new(230, 284))
		:give("collider", vec2:new(64, 128))
		:give("bump")
		:give("body")
		:give("debug_slab", "left_wall")

	local right_wall = Concord.entity(self.world)
		:give("position", vec2:new(768, 284))
		:give("collider", vec2:new(64, 128))
		:give("bump")
		:give("body")
		:give("debug_slab", "right_wall")

	self.item1 = Concord.entity(self.world)
		:assemble(Assemblages.Common.item, "item1", vec2:new(512, 360), vec2:new(32, 32))

	self.item2 = Concord.entity(self.world)
		:assemble(Assemblages.Common.item, "item2", vec2:new(560, 360), vec2:new(32, 32))

	self.player = Concord.entity(self.world)
		:assemble(Assemblages.Player.base,
			vec2:new(496, 256), vec2:new(64, 64),
			{ idle = 0, walk = 128, run = 180 }, 320,
			{
				sheet_idle = resources.images.sheet_player_idle,
				sheet_walk = resources.images.sheet_player_walk,
				sheet_run = resources.images.sheet_player_run,
			})
		:give("debug_slab", "player")

	self.test_rect = Concord.entity(self.world)
		:give("position", vec2:new(512, 128))
		:give("collider", vec2:new(64, 64))

	self.ent_mouse = Concord.entity(self.world)
		:give("position", vec2:new())
		:give("collider_circle", 8)

	Dev.init(self.id, self.world)
end

function StateTest:update(dt)
	if not self.is_ready then return end
	self.world:emit("update", dt)

	local mx, my = love.mouse.getPosition()
	local mpos = self.ent_mouse:get("position").pos
	mpos.x = mx
	mpos.y = my
	self.world:emit("check_collision", self.test_rect)
end

function StateTest:draw()
	if not self.is_ready then return end
	self.camera:draw(function()
		self.world:emit("draw")

		love.graphics.setColor(1, 0, 0, 1)
		local cx, cy = self.camera:getPosition()
		local l, t, w, h = self.camera:getVisible()
		love.graphics.circle("fill", cx, cy, 8)
		love.graphics.circle("fill", l, t, 16)
		love.graphics.circle("fill", w, h, 16)
	end)
end

function StateTest:keypressed(key)
	if not self.is_ready then return end
	self.world:emit("keypressed", key)
end

function StateTest:exit()
	Resources.clean(resources)
	for i, e in ipairs(self.world:getEntities()) do
		e:destroy()
	end
end

return StateTest
