local Animation = require("modules.anim8.anim8")
local Concord = require("modules.concord.concord")
local Slab = require("modules.slab")

local StateTest = class()
StateTest.id = "Test"

local Preloader = require("preloader")

local Components = {}
Concord.utils.loadNamespace("components", Components)
local Systems = {
	Animation = require("systems.animation"),
	BoundingBox = require("systems.bounding_box"),
	Collision = require("systems.collision"),
	Controller = require("systems.controller"),
	DebugSlab = require("systems.debug_slab"),
	Movement = require("systems.movement"),
}
local Assemblages = {
	Player = require("assemblages.player")
}

local assets_data = {
	image = {
		{ "sheet_player_idle", "assets/images/player/player_idle.png" },
		{ "sheet_player_walk", "assets/images/player/player_walk.png" },
		{ "sheet_player_run", "assets/images/player/player_run.png" },
	},
}
local assets = { images = {} }
local scale = 1

function StateTest:new()
	return self:init({
		is_ready = false,
		world = Concord.world(),
		entities = {},
	})
end

function StateTest:load()
	Slab.Initialize()
	Preloader.start(assets_data, assets,
		function()
			self.is_ready = true
			self:start()
		end)
end


function StateTest:start()
	self.world:addSystem(Systems.Animation)
	self.world:addSystem(Systems.BoundingBox)
	self.world:addSystem(Systems.Collision)
	self.world:addSystem(Systems.Controller)
	self.world:addSystem(Systems.DebugSlab)
	self.world:addSystem(Systems.Movement)

	local ground = Concord.entity(self.world)
		:give("position", vec2:new(256, 412))
		:give("collider", vec2:new(512, 128))
		:give("body", "static")
		:give("debug_slab", "ground")

	local left_wall = Concord.entity(self.world)
		:give("position", vec2:new(230, 284))
		:give("collider", vec2:new(64, 128))
		:give("body", "static")
		:give("debug_slab", "left_wall")

	local right_wall = Concord.entity(self.world)
		:give("position", vec2:new(256+512, 284))
		:give("collider", vec2:new(64, 128))
		:give("body", "static")
		:give("debug_slab", "right_wall")

	local player = Concord.entity(self.world)
		:give("debug_slab", "player")
		:assemble(Assemblages.Player.base,
			vec2:new(512, 256), vec2:new(64, 64),
			{ idle = 0, walk = 128, run = 180 }, 320,
			{
				sheet_idle = assets.images.sheet_player_idle,
				sheet_walk = assets.images.sheet_player_walk,
				sheet_run = assets.images.sheet_player_run,
			})
end

function StateTest:update(dt)
	if not self.is_ready then return end
	self.world:emit("update", dt)
	!if not _RELEASE then
	self:slab_update(dt)
	!end
end

function StateTest:slab_update(dt)
	Slab.Update(dt)
	self.world:emit("draw_slab")
end

function StateTest:draw()
	if not self.is_ready then return end
	self.world:emit("draw")

	!if not _RELEASE then
	Slab.Draw()
	self.world:emit("draw_debug")
	!end
end

function StateTest:exit()
	self.world:emit("deinit")
end

return StateTest
