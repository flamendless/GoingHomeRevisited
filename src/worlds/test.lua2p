local Animation = require("modules.anim8.anim8")
local Slab = require("modules.slab")
local SlabDebug = require("modules.slab.SlabDebug")

local StateTest = class()
StateTest.id = "Test"

local Preloader = require("preloader")

local assets_data = {
	image = {
		{ "sheet_player_idle", "assets/images/player/player_idle.png" },
		{ "sheet_player_walk", "assets/images/player/player_walk.png" },
		{ "sheet_player_run", "assets/images/player/player_run.png" },
	},
}
local assets = { images = {} }

local animations = {"idle", "walk", "run"}
local player_anim = {
	idle = { speed = 0 },
	walk = { speed = 128 },
	run = { speed = 180 },
}

local current_anim, current_anim_name
local player_x = 512
local player_y = 256
local speed = 0
local is_shift = false
local moving = false
local dir = 1

local opt = { Title = "Test", IsOpen = true, W = 480, H = 480 }
local scale = 4

local animation_switch = function(new_anim, new_dir)
	assert(type(new_anim) == "string")
	assert(player_anim[new_anim])
	dir = new_dir or dir
	current_anim_name = new_anim
	local t = player_anim[new_anim]
	if dir == 1 then
		current_anim = t.anim_right
	elseif dir == -1 then
		current_anim = t.anim_left
	end
	speed = t.speed
end

local player_movement = function(dt)
	local _dir = 0
	if love.keyboard.isDown("a") or love.keyboard.isDown("left") then
		_dir = -1
	elseif love.keyboard.isDown("d") or love.keyboard.isDown("right") then
		_dir = 1
	else
		moving = false
	end

	player_x = player_x + speed * _dir * dt
	if moving then
		if is_shift then
			animation_switch("run", _dir)
		else
			animation_switch("walk", _dir)
		end
	else
		animation_switch("idle")
	end
end

function StateTest:keypressed(key)
	if key == "lshift" then
		is_shift = true
	end
	if key == "a" or key == "left" then
		moving = true
	elseif key == "d" or key == "right" then
		moving = true
	end
end

function StateTest:keyreleased(key)
	if key == "lshift" then
		is_shift = false
	end
end

function StateTest:new()
	return self:init({
		is_ready = false,
	})
end

function StateTest:load()
	Slab.Initialize()
	local p = Preloader.start(assets_data, assets)
	p:onComplete(function()
		self.is_ready = true
		player_anim.idle.img = assets.images.sheet_player_idle
		player_anim.walk.img = assets.images.sheet_player_walk
		player_anim.run.img = assets.images.sheet_player_run

		local g_idle = Animation.newGrid(64, 64, player_anim.idle.img:getWidth(), player_anim.idle.img:getHeight())
		local g_walk = Animation.newGrid(64, 64, player_anim.walk.img:getWidth(), player_anim.walk.img:getHeight())
		local g_run = Animation.newGrid(64, 64, player_anim.run.img:getWidth(), player_anim.run.img:getHeight())

		player_anim.idle.anim_right = Animation.newAnimation(g_idle("1-5", 1, "1-5", 2), 0.1)
		player_anim.idle.anim_left = player_anim.idle.anim_right:clone():flipH()

		player_anim.walk.anim_right = Animation.newAnimation(g_walk("1-4", 1, "1-4", 2), 0.1)
		player_anim.walk.anim_left = player_anim.walk.anim_right:clone():flipH()

		player_anim.run.anim_right = Animation.newAnimation(g_run("1-6", 1), 0.1)
		player_anim.run.anim_left = player_anim.run.anim_right:clone():flipH()

		animation_switch("idle")
	end)
end

function StateTest:update(dt)
	if not self.is_ready then return end
	player_movement(dt)
	current_anim:update(dt)

	Slab.Update(dt)
	if opt.IsOpen then
		Slab.BeginWindow('Test Mode', opt)
		Slab.Text("FPS: " .. love.timer.getFPS())
		Slab.Separator()

		Slab.Text("Scale: ")
		Slab.SameLine()
		if Slab.Input("Scale", { Text = tostring(scale), ReturnOnText = false, NumbersOnly = true, MinNumber = 1, MaxNumber = 4}) then
				scale = tonumber(Slab.GetInputText())
		end

		Slab.Separator()
		Slab.Text("Player")
		Slab.Text("Current Animation: " .. current_anim_name)
		if Slab.BeginComboBox("Player Animation", { Selected = current_anim_name }) then
			for i, anim in ipairs(animations) do
				if Slab.TextSelectable(anim) then
					animation_switch(anim)
				end
			end
			Slab.EndComboBox()
		end

		Slab.Text("x: ")
		Slab.SameLine()
		if Slab.Input("player_x", { Text = tostring(player_x), ReturnOnText = false, NumbersOnly = true}) then
				player_x = tonumber(Slab.GetInputText())
		end
		Slab.Text("y: ")
		Slab.SameLine()
		if Slab.Input("player_y", { Text = tostring(player_y), ReturnOnText = false, NumbersOnly = true}) then
				player_y = tonumber(Slab.GetInputText())
		end
		Slab.Text("moving: ")
		Slab.SameLine()
		if Slab.Input("player_moving", { Text = tostring(moving), ReturnOnText = false}) then
				moving = tonumber(Slab.GetInputText())
		end
		Slab.Text("direction: ")
		Slab.SameLine()
		if Slab.Input("player_dir", { Text = tostring(dir), ReturnOnText = false, NumbersOnly = true}) then
				dir = tonumber(Slab.GetInputText())
		end
		Slab.Text("speed: " .. speed)

		Slab.Text("speed idle (override): ")
		Slab.SameLine()
		if Slab.Input("idle_speed", { Text = tostring(player_anim.idle.speed), ReturnOnText = false, NumbersOnly = true}) then
				player_anim.idle.speed = tonumber(Slab.GetInputText())
		end
		Slab.Text("speed walk (override): ")
		Slab.SameLine()
		if Slab.Input("walk_speed", { Text = tostring(player_anim.walk.speed), ReturnOnText = false, NumbersOnly = true}) then
				player_anim.walk.speed = tonumber(Slab.GetInputText())
		end
		Slab.Text("speed run (override): ")
		Slab.SameLine()
		if Slab.Input("run_speed", { Text = tostring(player_anim.run.speed), ReturnOnText = false, NumbersOnly = true}) then
				player_anim.run.speed = tonumber(Slab.GetInputText())
		end

		Slab.EndWindow()
	end
end

function StateTest:draw()
	if not self.is_ready then return end
	local img = player_anim[current_anim_name].img
	local anim = current_anim
	anim:draw(img, player_x, player_y, 0, scale, scale)
	Slab.Draw()
end

return StateTest
