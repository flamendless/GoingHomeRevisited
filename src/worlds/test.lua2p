local Concord = require("modules.concord.concord")

local StateTest = class()
StateTest.id = "Test"

local Assets = require("data_assets")
local Preloader = require("preloader")

local Components = {}
Concord.utils.loadNamespace("components", Components)
local Systems = {
	Animation = require("systems.animation"),
	Collision = require("systems.collision"),
	Controller = require("systems.controller"),
	Movement = require("systems.movement"),
	RenderSprite = require("systems.render_sprite"),
}
local Assemblages = {
	Player = require("assemblages.player")
}

local assets_data = {
	image = {
		{ "sheet_player_idle", "assets/images/player/player_idle.png" },
		{ "sheet_player_walk", "assets/images/player/player_walk.png" },
		{ "sheet_player_run", "assets/images/player/player_run.png" },
	},
}
local assets = { images = {} }
local scale = 1

function StateTest:new()
	return self:init({
		is_ready = false,
		world = Concord.world(),
		entities = {},
	})
end

function StateTest:load()
	Preloader.start(assets_data, assets,
		function()
			self.is_ready = true
			self:start()
		end)
end


function StateTest:start()
	self.world:addSystem(Systems.Animation)
	self.world:addSystem(Systems.Collision)
	self.world:addSystem(Systems.Controller)
	self.world:addSystem(Systems.Movement)
	self.world:addSystem(Systems.RenderSprite)

	local ground = Concord.entity(self.world)
		:give("position", vec2:new(256, 412))
		:give("collider", vec2:new(512, 128))
		:give("body", "static")
		:give("debug_slab", "ground")

	local left_wall = Concord.entity(self.world)
		:give("position", vec2:new(230, 284))
		:give("collider", vec2:new(64, 128))
		:give("body", "static")
		:give("debug_slab", "left_wall")

	local right_wall = Concord.entity(self.world)
		:give("position", vec2:new(256+512, 284))
		:give("collider", vec2:new(64, 128))
		:give("body", "static")
		:give("debug_slab", "right_wall")

	local player = Concord.entity(self.world)
		:give("debug_slab", "player")
		:assemble(Assemblages.Player.base,
			vec2:new(512, 256), vec2:new(64, 64),
			{ idle = 0, walk = 128, run = 180 }, 320,
			{
				sheet_idle = assets.images.sheet_player_idle,
				sheet_walk = assets.images.sheet_player_walk,
				sheet_run = assets.images.sheet_player_run,
			})
	Dev.init(self.id, self.world)
end

function StateTest:update(dt)
	if not self.is_ready then return end
	self.world:emit("update", dt)
end

function StateTest:draw()
	if not self.is_ready then return end
	self.world:emit("draw")
end

function StateTest:exit()
	Assets.clean(assets)
	for i, e in ipairs(self.world:getEntities()) do
		self.world:removeEntity(e)
	end
end

return StateTest
