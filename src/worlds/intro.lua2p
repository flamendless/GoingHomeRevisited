local Gamera = require("modules.gamera.gamera")
local Concord = require("modules.concord.concord")
local Log = require("modules.log.log")

local min = math.min
local random = math.random

local Assets = require("data_assets")
local Preloader = require("preloader")

local StateIntro = class()
StateIntro.id = "Intro"

local Components = {}
Concord.utils.loadNamespace("components", Components)
local Systems = {
	Animation = require("systems.animation"),
	Parallax = require("systems.parallax"),
	RandomTree = require("systems.random_tree"),
	RenderSprite = require("systems.render_sprite"),
}
local Assemblages = {
	Common = require("assemblages.common")
}

local assets = { images = {}, fonts = {} }

function StateIntro:new()
	return self:init({
		is_ready = false,
		world = Concord.world(),
		entities = {},
	})
end

function StateIntro:load()
	Log.info("State Load: ", self.id)
	local assets_data = Assets:getData("intro")
	Preloader.start(assets_data, assets,
		function()
			self.is_ready = true
			self:start()
		end)
end

function StateIntro:start()
	self.world:addSystem(Systems.Parallax)
	self.world:addSystem(Systems.RandomTree)
	self.world:addSystem(Systems.RenderSprite)
	self.world:addSystem(Systems.Animation)

	local ww, wh = love.graphics.getDimensions()
	local w, h = assets.images.bg:getDimensions()

	self.scale = min(ww/w, wh/h)
	self.camera = Gamera.new(0, 0, ww * 2, wh * 2)
	self.camera:setWindow(0, 0, ww, wh)

	self.entities.bg = Concord.entity(self.world)
		:give("sprite", assets.images.bg)
		:give("position", vec2:new(0, 0))

	local building_w, building_h = assets.images.parallax_buildings:getDimensions()
	self.entities.parallax_building = Concord.entity(self.world)
		:assemble(Assemblages.Common.parallax_sprite,
			assets.images.parallax_buildings,
			love.graphics.newQuad(0, 0, ww * 2, building_h, building_w, building_h),
			vec2:new(0, 0),
			vec2:new(32, 0))

	local road_w, road_h = assets.images.parallax_road:getDimensions()
	self.entities.parallax_road = Concord.entity(self.world)
		:assemble(Assemblages.Common.parallax_sprite,
			assets.images.parallax_road,
			love.graphics.newQuad(0, 0, ww * 2, road_h, road_w, road_h),
			vec2:new(0, 0),
			vec2:new(128, 0))

	local post_w, post_h = assets.images.bg_post:getDimensions()
	self.entities.post = Concord.entity(self.world)
		:assemble(Assemblages.Common.parallax_sprite,
			assets.images.bg_post,
			love.graphics.newQuad(0, 0, ww * 2, post_h, post_w, post_h),
			vec2:new(0, 0),
			vec2:new(128, 0))
		:give("z_index", 1)

	self.entities.car = Concord.entity(self.world)
		:assemble(Assemblages.Common.animated_sprite,
			{
				spritesheet = assets.images.sheet_car,
				frames = { "1-3", 1, "1-3", 2, "1-3", 3, "1-3", 4 },
				delay = 0.2,
				rows_count = 4,
				columns_count = 3,
				n_frames = 12
			},
			vec2:new(0, 0), false)

	self.entities.bg_tree_data = Concord.entity(self.world)
		:give("tree_data", {
				images = {
					assets.images.bg_tree1,
					assets.images.bg_tree2,
					assets.images.bg_tree3,
				},
				z = 2,
		})

	self.world:emit("generate_bg_tree")
end

function StateIntro:update(dt)
	if not self.is_ready then return end
	self.world:emit("update", dt)

	if love.keyboard.isDown("a") then
		self.world:emit("parallax_move_x", dt, -1)
	elseif love.keyboard.isDown("d") then
		self.world:emit("parallax_move_x", dt, 1)
	end
end

function StateIntro:draw()
	if not self.is_ready then return end
	self.camera:draw(function()
		love.graphics.push()
		love.graphics.scale(self.scale)
		self.world:emit("draw")
		self.world:emit("draw_z")
		love.graphics.pop()
	end)
end

return StateIntro
