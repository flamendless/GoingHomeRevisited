local Log = require("modules.log.log")

local States = require("states")

local format = string.format

local GameStates = {
	type_id = "GameStates",
	prev_state = nil,
	current_state = nil,
	current_id = nil,
}

local window_size = !(_GAME_SIZE)

!if _DEV then
local methods = {
	"update", "draw", "keypressed", "keyreleased",
	!if _PLATFORM == "desktop" then
	"mousepressed", "mousereleased", "mousemoved",
	!elseif _PLATFORM == "mobile" then
	"touchpressed", "touchreleased"
	!end
}

local function check_state(cw, method)
	if (cw[method] == nil) or type(cw[method]) ~= "function" then
		Log.fatal(format("'%s' does not have a '%s' method", cw.id, method))
	end
end
!end

function GameStates.init()
end

function GameStates.switch(next_id)
	@@assert(States[next_id])

	GameStates.prev_state = GameStates.current_state

	if GameStates.prev_state then
		GameStates.prev_world:exit()
	end

	local next_state = States[next_id]:new()
	GameStates.current_state = next_state
	GameStates.current_id = next_id

	!if _DEV then
	for i, method in ipairs(methods) do
		check_state(GameStates.current_state, method)
	end
	!end

	local prev_id = (GameStates.prev_state and GameStates.prev_state.id)
	local str = format("Switched from %s to %s", prev_id, GameStates.current_id)
	Log.trace(str)
	GameStates.init()
	Log.info("State Load: ", GameStates.current_id)
	GameStates.current_state:load()
	GameStates.current_state.gamestate = GameStates
end

function GameStates.switch_to_previous()
	GameStates.switch(GameStates.prev_state.id)
end

function GameStates.is_ready()
	return GameStates.current_state.is_ready
end

function GameStates.update(dt)
	GameStates.current_state:update(dt)
end

function GameStates.draw()
	GameStates.current_state:draw()
end

function GameStates.keypressed(key)
	if GameStates.current_state.keypressed then
		GameStates.current_state:keypressed(key)
	end
end

function GameStates.keyreleased(key)
	if GameStates.current_state.keyreleased then
		GameStates.current_state:keyreleased(key)
	end
end

function GameStates.mousemoved(mx, my)
	if GameStates.current_state.mousemoved then
		GameStates.current_state:mousemoved(mx, my)
	end
end

function GameStates.mousepressed(mx, my, mb)
	if GameStates.current_state.mousepressed then
		GameStates.current_state:mousepressed(mx, my, mb)
	end
end

function GameStates.mousereleased(mx, my, mb)
	if GameStates.current_state.mousereleased then
		GameStates.current_state:mousereleased(mx, my, mb)
	end
end

function GameStates.quit()
	if GameStates.current_state.exit then
		GameStates.current_state:exit()
	end
end

return GameStates
