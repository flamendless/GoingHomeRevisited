local Log = require("modules.log.log")

local Canvas = require("canvas")
local WindowMode = require("window_mode")
local Worlds = require("worlds")

local format = string.format
local min = math.min
local floor = math.floor

local GameStates = {
	prev_world = nil,
	current_world = nil,
	current_id = nil,
}

local window_size = !(_GAME_SIZE)
local mid_canvas, bot_canvas, top_canvas, main_canvas

!if not _RELEASE then
local last_scale = 1

local methods = {
	"update", "draw", "keypressed", "keyreleased",
	!if _PLATFORM == "desktop" then
	"mousepressed", "mousereleased", "mousemoved",
	!elseif _PLATFORM == "mobile" then
	"touchpressed", "touchreleased"
	!end
}

local function check_state(cw, method)
	if (cw[method] == nil) or type(cw[method]) ~= "function" then
		Log.fatal(format("'%s' does not have a '%s' method", cw.id, method))
	end
end
!end

function GameStates.init()
	if GameStates.current_world.canvases then
		GameStates.current_world.canvases = {
			main_canvas = main_canvas,
			mid_canvas = mid_canvas,
			top_canvas = top_canvas,
			bot_canvas = bot_canvas
		}
	end
end

function GameStates.switch(next_id)
	!if _ASSERT then
	Assert.exists(Worlds[next_id])
	!end

	GameStates.prev_world = GameStates.current_world

	if GameStates.prev_world then
		GameStates.prev_world:exit()
	end

	local current_world = Worlds[next_id]:new()

	GameStates.current_world = current_world
	GameStates.current_id = next_id

	!if not _RELEASE then
	for i, method in ipairs(methods) do check_state(current_world, method) end
	!end

	local prev_id = (GameStates.prev_world and GameStates.prev_world.id) or ""
	local str = format("Switched from %s to %s", prev_id, GameStates.current_id)
	Log.trace(str)

	GameStates.init()
	GameStates.current_world:load()
	GameStates.current_world.gamestate = GameStates
end

function GameStates.switch_to_previous()
	GameStates.switch(GameStates.prev_world.id)
end

function GameStates.resize(override_mode)
	WindowMode.current = override_mode or (WindowMode.current + 1)

	if WindowMode.current > #WindowMode.modes then
		WindowMode.current = 1
	end

	local mode = WindowMode.getCurrent()
	local scale = min(window_size.x/mode.width, window_size.y/mode.height)

	love.window.setMode(mode.width, mode.height)
	Log.info(format("Current Mode: [%i] %ix%i - scale:%f",
		WindowMode.current, mode.width, mode.height, scale))
	GameStates.canvas_resize()
end

function GameStates.canvas_resize()
	local game_size = !(_GAME_BASE_SIZE)
	local window_w = love.graphics.getWidth()
	local window_h = love.graphics.getHeight()
	local scale = min(window_w/game_size.x, window_h/game_size.y)

	local main_canvas_prop = {}
	local mid_canvas_prop = {}
	local top_canvas_prop = {}
	local bot_canvas_prop = {}

	main_canvas_prop.width = window_w
	main_canvas_prop.height = window_h
	main_canvas_prop.x = 0
	main_canvas_prop.y = 0
	main_canvas_prop.scale = 1

	mid_canvas_prop.width = game_size.x * scale
	mid_canvas_prop.height = game_size.y * scale
	mid_canvas_prop.x = 0
	mid_canvas_prop.y = floor(window_h/2 - mid_canvas_prop.height/2)
	mid_canvas_prop.scale = scale

	local rem_height = window_h - mid_canvas_prop.height

	top_canvas_prop.width = window_w
	top_canvas_prop.height = floor(rem_height/2)
	top_canvas_prop.x = 0
	top_canvas_prop.y = 0
	top_canvas_prop.scale = scale

	bot_canvas_prop.width = window_w
	bot_canvas_prop.height = floor(rem_height/2)
	bot_canvas_prop.x = 0
	bot_canvas_prop.y = floor(window_h/2 + mid_canvas_prop.height/2)
	bot_canvas_prop.scale = scale

	if main_canvas == nil then
		main_canvas = Canvas:new(main_canvas_prop)
	else
		main_canvas:set(main_canvas_prop)
	end

	if top_canvas == nil then
		top_canvas = Canvas:new(top_canvas_prop)
	else
		top_canvas:set(top_canvas_prop)
	end

	if mid_canvas == nil then
		mid_canvas = Canvas:new(mid_canvas_prop)
	else
		mid_canvas:set(mid_canvas_prop)
	end

	if bot_canvas == nil then
		bot_canvas = Canvas:new(bot_canvas_prop)
	else
		bot_canvas:set(bot_canvas_prop)
	end

	if GameStates.current_world and GameStates.current_world.canvas_resize then
		-- TODO needs testing
		GameStates.current_world:canvas_resize(window_w, window_h, scale)
	end
end

function GameStates.getID()
	return GameStates.current_id
end

function GameStates.is_ready()
	return GameStates.current_world.is_ready
end

function GameStates.update(dt)
	GameStates.current_world:update(dt)

	!if not _RELEASE then
	if GameStates.current_world.scale then
		last_scale = GameStates.current_world.scale
	end
	!end
end

function GameStates.draw()
	if GameStates.current_world.top_draw then
		top_canvas:attach()
		GameStates.current_world:top_draw(top_canvas)
		top_canvas:detach()
		top_canvas:render()
	end

	if GameStates.current_world.game_draw then
		mid_canvas:attach()
		GameStates.current_world:game_draw(mid_canvas)
		mid_canvas:detach()
		mid_canvas:render()
	end

	if GameStates.current_world.bot_draw then
		bot_canvas:attach()
		GameStates.current_world:bot_draw(bot_canvas)
		bot_canvas:detach()
		bot_canvas:render()
	end

	if GameStates.current_world.draw then
		main_canvas:attach()
		GameStates.current_world:draw(main_canvas)
		main_canvas:detach()
		main_canvas:render()
	end
end

function GameStates.keypressed(key)
	if GameStates.current_world.keypressed then
		GameStates.current_world:keypressed(key)
	end
end

function GameStates.keyreleased(key)
	if GameStates.current_world.keyreleased then
		GameStates.current_world:keyreleased(key)
	end
end

function GameStates.mousemoved(mx, my)
	if GameStates.current_world.mousemoved then
		GameStates.current_world:mousemoved(mx, my)
	end
end

function GameStates.mousepressed(mx, my, mb)
	if GameStates.current_world.mousepressed then
		GameStates.current_world:mousepressed(mx, my, mb)
	end
end

function GameStates.mousereleased(mx, my, mb)
	if GameStates.current_world.mousereleased then
		GameStates.current_world:mousereleased(mx, my, mb)
	end
end

function GameStates.quit()
	if GameStates.current_world.exit then
		GameStates.current_world:exit()
	end
end

return GameStates
