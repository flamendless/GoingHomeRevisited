local Log = require("modules.log.log")

local format = string.format
local remove = table.remove

local Resources = {
	meta = {},
	data = {},
	!if _CACHED_PRELOAD then
	cache = {},
	!end
}

!if _DEV then
local mt = {}
mt.__index = function(t, i)
	local id
	for k, v in pairs(Resources.data) do
		if t == v then
			id = k
			break
		end
	end
	error(i .. " is invalid key for Resources:" .. id)
end
!end

!(
local path_images = "res/images/"
local path_items = path_images .. "items/"
local path_lut = "res/lut/"
local path_textures = "res/textures/"
local path_ui = "res/ui/"
local path_fonts = "res/fonts/"

local t = {}
t.player = {
	{"sheet_player_idle_normal", path_images .. "player/sheet_player_idle_normal.png"},
	{"sheet_player_walk_normal", path_images .. "player/sheet_player_walk_normal.png"},
	{"sheet_player_run_normal", path_images .. "player/sheet_player_run_normal.png"},
	{"sheet_player_open_door_normal", path_images .. "player/sheet_player_open_door_normal.png"},
}
t.ui = {
}
t.items = {
	{"bg_item", path_items .. "bg_item.png"},
	{"bg_desc", path_items .. "bg_desc.png"},
	{"flashlight", path_items .. "flashlight.png"},
}
t.pause = {
	{"tex_displacement", path_textures .. "displacement.png"},
	{"pause_bg", path_textures .. "pause_bg.png"},
}
t.fnt_inventory = {
	{"dialogue", path_fonts .. "DigitalDisco.ttf", 32, "default"},
	{"item_name", path_fonts .. "DigitalDisco.ttf", 20, "default"},
	{"item_desc", path_fonts .. "DigitalDisco.ttf", 16, "default"},
}

function get_res(id)
	local str = ""
	for i, t in ipairs(t[id]) do
		local l = toLua(t) .. ",\n"
		if i ~= 1 then
			l = "\t\t" .. l
		end
		str = str .. l
	end
	return str
end
)

Resources.meta.Splash = {
	images = {
		{"flamendless_logo", !(path_images .. "splash/flamendless_logo.png")},
		{"sheet_wits", !(path_images .. "splash/sheet_wits.png")},
		{"tex_displacement", !(path_textures .. "displacement.png")},
	},
	fonts = {
		{"ui", !(path_fonts .. "Jamboree.ttf"), 32, "default"},
		{"firefly", !(path_fonts .. "Firefly.ttf"), 172, "default"},
		{"uncle_type", !(path_fonts .. "uncle_type.ttf"), 32},
	}
}

Resources.meta.Menu = {
	images = {
		{"bg_door", !(path_images .. "menu/bg_door.png")},
		{"bg_hallway", !(path_images .. "menu/bg_hallway.png")},
		{"sheet_desk", !(path_images .. "menu/sheet_desk.png")},
		{"title", !(path_images .. "menu/title.png")},
		{"subtitle", !(path_images .. "menu/subtitle.png")},
		{"discord", !(path_images .. "menu/icon_discord.png")},
		{"twitter", !(path_images .. "menu/icon_twitter.png")},
		{"website", !(path_images .. "menu/icon_website.png")},
		{"mail", !(path_images .. "menu/icon_mail.png")},
		{"btn_back", !(path_images .. "menu/btn_back.png")},
		{"flowfield", !(path_textures .. "perlin.png")},
		{"keyboard1", !(path_ui .. "keyboard1.png")},
		{"keyboard2", !(path_ui .. "keyboard2.png")},
	},
	fonts = {
		{"menu", !(path_fonts .. "Jamboree.ttf"), 24, "default"},
		{"about", !(path_fonts .. "DigitalDisco.ttf"), 20},
		{"about", !(path_fonts .. "DigitalDisco.ttf"), 64},
	}
}

Resources.meta.Intro = {
	images = {
		{"bg", !(path_images .. "intro/bg.png")},
		{"bg_post", !(path_images .. "intro/bg_post.png")},
		{"bg_tree_cover", !(path_images .. "intro/bg_tree_cover.png")},
		{"parallax_clouds", !(path_images .. "intro/parallax_clouds.png")},
		{"parallax_buildings", !(path_images .. "intro/parallax_buildings.png")},
		{"parallax_trees_bg", !(path_images .. "intro/parallax_trees_bg.png")},
		{"parallax_trees_fg", !(path_images .. "intro/parallax_trees_fg.png")},
		{"parallax_road", !(path_images .. "intro/parallax_road.png")},
		{"parallax_grass", !(path_images .. "intro/parallax_grass.png")},
		{"parallax_grass2", !(path_images .. "intro/parallax_grass2.png")},
		{"parallax_grass_back", !(path_images .. "intro/parallax_grass_back.png")},
		{"parallax_grass_front", !(path_images .. "intro/parallax_grass_front.png")},
		{"sheet_car", !(path_images .. "intro/sheet_car.png")},
		{"sheet_car_reflect", !(path_images .. "intro/sheet_car_reflect.png")},
		{"sheet_splat", !(path_ui .. "sheet_splat.png")},
		{"title", !(path_images .. "menu/title.png")},
		{"rain_drop_tilted", !(path_images .. "rain/rain_drop_tilted.png")},
		{"rain_drop_tilted2", !(path_images .. "rain/rain_drop_tilted2.png")},
		{"post_light", !(path_images .. "intro/post_light.png")},
		{"car_headlight", !(path_images .. "intro/car_headlight.png")},
		{"title_light", !(path_images .. "intro/title.png")},
		{"dummy", !(path_textures .. "dummy.png")},
	},
	image_data = {
		{"lut_afternoon_16", !(path_lut .. "lut_afternoon_16.png")},
		{"lut_afternoon_64", !(path_lut .. "lut_afternoon_64.png")},
		{"lut_dusk_16", !(path_lut .. "lut_dusk_16.png")},
		{"lut_dusk_64", !(path_lut .. "lut_dusk_64.png")},
	},
	fonts = {
		{"ui", !(path_fonts .. "Jamboree.ttf"), 32, "default"},
		{"dialogue", !(path_fonts .. "DigitalDisco.ttf"), 32, "default"},
	},
}

Resources.meta.Outside = {
	images = {
		{"rain_drop", !(path_images .. "rain/rain_drop.png")},
		{"rain_drop2", !(path_images .. "rain/rain_drop2.png")},
		{"sheet_cloud", !(path_ui .. "sheet_cloud.png")},
		{"sheet_splat", !(path_ui .. "sheet_splat.png")},
		{"sheet_brush", !(path_ui .. "sheet_brush.png")},
		!!(get_res("items"))
		!!(get_res("pause"))
	},
	array_images = {
		{"bg_sky", !(path_images .. "house_outside/bg_sky.png")},
		{"bg_house", !(path_images .. "house_outside/bg_house.png")},
		{"atlas_outside_items", !(path_images .. "house_outside/atlas_outside_items.png")},
		{"firefly", !(path_images .. "house_outside/firefly.png")},
		{"splashes", !(path_images .. "house_outside/splashes.png")},
		{"splashes_low", !(path_images .. "house_outside/splashes_low.png")},
		!!(get_res("player"))
	},
	image_data = {
		{"lut_dusk_16", !(path_lut .. "lut_dusk_16.png")},
		{"lut_dusk_64", !(path_lut .. "lut_dusk_64.png")},
	},
	fonts = {
		{"ui", !(path_fonts .. "Jamboree.ttf"), 32, "default"},
		!!(get_res("fnt_inventory"))
	},
}

Resources.meta.StorageRoom = {
	images = {
		!!(get_res("items"))
		!!(get_res("pause"))
	},
	array_images = {
		{"storage_room", !(path_images .. "storage_room/storage_room.png")},
		{"atlas_storage_room_items", !(path_images .. "storage_room/atlas_storage_room_items.png")},
		!!(get_res("player"))
	},
	image_data = {
		{"lut_dusk_16", !(path_lut .. "lut_dusk_16.png")},
		{"lut_dusk_64", !(path_lut .. "lut_dusk_64.png")},
	},
	fonts = {
		{"ui", !(path_fonts .. "Jamboree.ttf"), 32, "default"},
		!!(get_res("fnt_inventory"))
	},
}

Resources.meta.UtilityRoom = {
	images = {
		!!(get_res("items"))
		!!(get_res("pause"))
	},
	array_images = {
		{"utility_room", !(path_images .. "utility_room/utility_room.png")},
		{"atlas_utility_room_items", !(path_images .. "utility_room/atlas_utility_room_items.png")},
		!!(get_res("player"))
	},
	image_data = {
		{"lut_dusk_16", !(path_lut .. "lut_dusk_16.png")},
		{"lut_dusk_64", !(path_lut .. "lut_dusk_64.png")},
	},

	fonts = {
		{"ui", !(path_fonts .. "Jamboree.ttf"), 32, "default"},
		!!(get_res("fnt_inventory"))
	},
}

Resources.meta.Kitchen = {
	images = {
		!!(get_res("items"))
		!!(get_res("pause"))
	},
	array_images = {
		{"kitchen", !(path_images .. "kitchen/kitchen.png")},
		{"atlas_kitchen_items", !(path_images .. "kitchen/atlas_kitchen_items.png")},
		!!(get_res("player"))
	},
	image_data = {
		{"lut_dusk_16", !(path_lut .. "lut_dusk_16.png")},
		{"lut_dusk_64", !(path_lut .. "lut_dusk_64.png")},
	},
	fonts = {
		{"ui", !(path_fonts .. "Jamboree.ttf"), 32, "default"},
		!!(get_res("fnt_inventory"))
	},
}

function Resources.get_meta(key)
	@@assert(type(key) == "string")
	@@assert(Resources.meta[key], key .. " is invalid")
	local t = tablex.copy(Resources.meta[key], {})
	!if not _GLSL_NORMALS then
	t.images = tablex.append({}, t.images, t.array_images)
	tablex.clear(t.array_images)
	t.array_images = nil
	!end
	return t
end

function Resources.set_resources(t)
	@@assert(type(t) == "table")
	tablex.clear(Resources.data)
	@@assert(#Resources.data == 0)
	for k, _ in pairs(t) do
		Resources.data[k] = t[k]
		!if _DEV then
		setmetatable(Resources.data[k], mt)
		!end
	end
end

!if _CACHED_PRELOAD then
function Resources.manage_cache(resources, list)
	@@assert(type(resources) == "table")
	@@assert(type(list) == "table")
	local prev_res = Resources.data
	for kind, t in pairs(list) do
		local res = prev_res[kind]
		if res then
			!if _DEV then
			setmetatable(res, nil)
			!end
			for i = #t, 1, -1 do
				local id = t[i][1]
				if res[id] then
					Resources.cache[id] = res[id]
					resources[kind][id] = res[id]
					remove(list[kind], i)
				end
			end
		end
	end
end

function Resources.copy_array_images(resources)
	@@assert(type(resources) == "table")
	for k, v in pairs(resources.array_images) do
		resources.images[k] = v
	end
end
!end

function Resources.clean()
	for k, t in pairs(Resources.data) do
		for name, _ in pairs(t) do
			!if _CACHED_PRELOAD then
			if not Resources.cache[name] then
				Resources.data[k][name]:release()
				Resources.data[k][name] = nil
				Log.trace(format("Cleaned '%s':'%s'", k, name))
			else
				Log.trace(format("Cached, skipping '%s':'%s'", k, name))
			end
			!else
				Resources.data[k][name]:release()
				Resources.data[k][name] = nil
				Log.trace(format("Cleaned '%s':'%s'", k, name))
			!end
		end
		Resources.data[k] = nil
	end
	!if _CACHED_PRELOAD then
	tablex.clear(Resources.cache)
	@@assert(#Resources.cache == 0)
	!end
end

return Resources
