local Log = require("modules.log.log")

local format = string.format

local Resources = {
	data = {}
}

Resources.data.splash = {
	image = {
		{ "sheet_wits", "res/images/splash/sheet_wits.png" },
	},

	font = {
		{ "ui", "res/fonts/Jamboree.ttf", 32, "default" },
		{ "firefly", "res/fonts/Firefly.ttf", 256 },
		{ "uncle_type", "res/fonts/uncle_type.ttf", 32 },
	}
}

Resources.data.menu = {
	image = {
		{ "bg_door", "res/images/menu/bg_door.png" },
		{ "bg_hallway", "res/images/menu/bg_hallway.png" },
		{ "sheet_desk", "res/images/menu/sheet_desk.png" },
		{ "title", "res/images/menu/title.png" },
		{ "subtitle", "res/images/menu/subtitle.png" },
		{ "twitter", "res/images/menu/twitter.png" },
		{ "website", "res/images/menu/website.png" },
		{ "mail", "res/images/menu/mail.png" },
		{ "flowfield", "res/textures/perlin.png" },
	},

	font = {
		{ "menu", "res/fonts/Jamboree.ttf", 24, "default" },
		{ "about", "res/fonts/DigitalDisco.ttf", 24 },
		{ "about", "res/fonts/DigitalDisco.ttf", 64 },
	}
}

Resources.data.intro = {
	image = {
		{ "bg", "res/images/intro/bg.png" },
		{ "bg_post", "res/images/intro/bg_post.png" },
		{ "bg_tree1", "res/images/intro/bg_tree1.png" },
		{ "bg_tree2", "res/images/intro/bg_tree2.png" },
		{ "bg_tree3", "res/images/intro/bg_tree3.png" },
		{ "fg_tree1", "res/images/intro/fg_tree1.png" },
		{ "fg_tree2", "res/images/intro/fg_tree2.png" },
		{ "parallax_buildings", "res/images/intro/parallax_buildings.png" },
		{ "parallax_road", "res/images/intro/parallax_road.png" },
		{ "parallax_grass", "res/images/intro/parallax_grass.png" },
		{ "parallax_grass2", "res/images/intro/parallax_grass2.png" },
		{ "parallax_grass_back", "res/images/intro/parallax_grass_back.png" },
		{ "parallax_grass_front", "res/images/intro/parallax_grass_front.png" },
		{ "sheet_car", "res/images/intro/sheet_car.png" },
		{ "sheet_car_reflect", "res/images/intro/sheet_car_reflect.png" },
		{ "sheet_paint", "res/images/intro/sheet_paint.png" },
		{ "title", "res/images/menu/title.png" },
		{ "rain_drop_tilted", "res/images/rain/rain_drop_tilted.png" },
		{ "rain_drop_tilted2", "res/images/rain/rain_drop_tilted2.png" },
		{ "rain_splash_tilted", "res/images/rain/rain_splash_tilted.png" },
		{ "rain_splash_tilted2", "res/images/rain/rain_splash_tilted2.png" },
	},

	image_data = {
		{ "lut_afternoon_16", "res/lut/lut_afternoon_16.png" },
		{ "lut_afternoon_64", "res/lut/lut_afternoon_64.png" },
		{ "lut_dusk_16", "res/lut/lut_dusk_16.png" },
		{ "lut_dusk_64", "res/lut/lut_dusk_64.png" },
		{ "lut_night_16", "res/lut/lut_night_16.png" },
		{ "lut_night_64", "res/lut/lut_night_64.png" },
	},

	font = {
		{ "ui", "res/fonts/Jamboree.ttf", 32, "default" },
		{ "dialogue", "res/fonts/DigitalDisco.ttf", 32, "default" },
	},
}

function Resources:getData(key)
	!if _ASSERT then
	Assert.should_string(key)
	Assert.should_exists(self.data[key])
	!end

	return self.data[key]
end

function Resources.clean(res)
	!if _ASSERT then
	Assert.should_table(res)
	!end

	for k, t in pairs(res) do
		for name, obj in pairs(t) do
			res[k][name]:release()
			Log.trace(format("'%s':'%s' cleaned", k, name))
		end
	end
end

return Resources
