local Log = require("modules.log.log")

local Resources = {
	meta = {},
	data = {},
	!if _CACHED_PRELOAD then
	cache = {},
	!end
}

!if _DEV then
local mt = {}
mt.__index = function(t, i)
	local id
	for k, v in pairs(Resources.data) do
		if t == v then
			id = k
			break
		end
	end
	error(i .. " is invalid key for Resources:" .. id)
end
!end

Resources.meta = require("data.resources_list")

function Resources.get_meta(key)
	@@assert(type(key) == "string")
	@@assert(Resources.meta[key], key .. " is invalid")
	local t = tablex.copy(Resources.meta[key], {})
	!if not _GLSL_NORMALS then
	t.images = tablex.append({}, t.images, t.array_images)
	if t.array_images then
		tablex.clear(t.array_images)
		t.array_images = nil
	end
	!end
	return t
end

function Resources.set_resources(t)
	@@assert(type(t) == "table")
	tablex.clear(Resources.data)
	@@assert(#Resources.data == 0)
	for k, _ in pairs(t) do
		Resources.data[k] = t[k]
		!if _DEV then
		setmetatable(Resources.data[k], mt)
		!end
	end
end

!if _CACHED_PRELOAD then
function Resources.manage_cache(resources, list)
	@@assert(type(resources) == "table")
	@@assert(type(list) == "table")
	local prev_res = Resources.data
	for kind, t in pairs(list) do
		local res = prev_res[kind]
		if res then
			!if _DEV then
			setmetatable(res, nil)
			!end
			for i = #t, 1, -1 do
				local id = t[i][1]
				if res[id] then
					Resources.cache[id] = res[id]
					resources[kind][id] = res[id]
					table.remove(list[kind], i)
				end
			end
		end
	end
end

function Resources.copy_array_images(resources)
	@@assert(type(resources) == "table")
	for k, v in pairs(resources.array_images) do
		resources.images[k] = v
	end
end
!end

function Resources.clean()
	for k, t in pairs(Resources.data) do
		for name, _ in pairs(t) do
			!if _CACHED_PRELOAD then
			if not Resources.cache[name] then
				Resources.data[k][name]:release()
				Resources.data[k][name] = nil
				Log.trace("Cleaned:", k, name)
			else
				Log.trace("Cached, skipping:", k, name)
			end
			!else
				Resources.data[k][name]:release()
				Resources.data[k][name] = nil
				Log.trace("Cleaned:", k, name)
			!end
		end
		Resources.data[k] = nil
	end
	!if _CACHED_PRELOAD then
	tablex.clear(Resources.cache)
	@@assert(#Resources.cache == 0)
	!end
end

return Resources
