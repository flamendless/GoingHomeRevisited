local MotionBlur = class()

function MotionBlur:new(canvas, config)
	!if _ASSERT then
	assert(canvas:type() == "Canvas", "Passed argument must be of type 'Canvas'")
	if config then
		assert(type(config) == "table", "Passed argument must be of type 'table'")
	end
	!end

	local shader_code = love.graphics.newShader("shaders/motion_blur.glsl")
	shader_code:send("canvas_size", {
		canvas.width, canvas.height
	})

	local quality = 32
	local length = 0.5
	local dir = { -1, 0 }
	if config then
		quality = config.quality
		length = config.length
		dir[0] = config.dir[0]
		dir[1] = config.dir[1]
	end
	shader_code:send("quality", quality)
	shader_code:send("length", length)
	shader_code:send("dir", dir)

	return self:init({
		flag_process = false,
		shader_code = shader_code,
		canvas = canvas,
	})
end

function MotionBlur:update_config(config)
	!if _ASSERT then
		assert(type(config) == "table", "Passed argument must be of type 'table'")
	!end
	if config.quality then
		self.shader_code:send("quality", config.quality)
	end
	if config.length then
		self.shader_code:send("length", config.length)
	elseif config.dist then
		self.shader_code:send("length", config.dist/self.canvas.width)
	end
	if config.dir then
		self.shader_code:send("dir", config.dir)
	end
end

function MotionBlur:post_process_draw()
	if not self.flag_process then return end
	love.graphics.setShader(self.shader_code)
	self.canvas:render()
	love.graphics.setShader()
end

return MotionBlur
