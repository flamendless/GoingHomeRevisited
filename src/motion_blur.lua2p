local MotionBlur = class()

function MotionBlur:new(canvas, config)
	!if _ASSERT then
	Assert.should_custom_canvas(canvas)
	Assert.safe_should_table(config)
	!end

	local shader_code = love.graphics.newShader("shaders/motion_blur.glsl")

	shader_code:send("strength", 0.1)

	return self:init({
		flag_process = false,
		shader_code = shader_code,
		canvas = canvas,
		previous = {}
	})
end

function MotionBlur:store_previous(x, y, angle)
	self.previous.target = vec2:new(x, y)
	self.previous.angle = angle
end

function MotionBlur:set_angle(angle)
	!if _ASSERT then
	Assert.should_number(angle)
	!end

	self.shader_code:send("angle", angle)
end

function MotionBlur:set_strength(strength)
	!if _ASSERT then
	Assert.should_number(strength)
	!end

	self.shader_code:send("strength", strength)
end

function MotionBlur:post_process_draw()
	if not self.flag_process then return end

	love.graphics.setShader(self.shader_code)
	self.canvas:render()
	love.graphics.setShader()
end

return MotionBlur
