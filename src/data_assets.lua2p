local Assets = {
	data = {}
}

Assets.data.splash = {
	image = {
		{ "sheet_wits", "assets/images/splash/sheet_wits.png" },
	},
	font = {
		{ "firefly", "assets/fonts/Firefly.ttf", 256 },
		{ "uncle_type", "assets/fonts/uncle_type.ttf", 32 },
	}
}

Assets.data.menu = {
	image = {
		{ "bg_door", "assets/images/menu/bg_door.png" },
		{ "bg_hallway", "assets/images/menu/bg_hallway.png" },
		{ "sheet_desk", "assets/images/menu/sheet_desk.png" },
		{ "title", "assets/images/menu/title.png" },
		{ "subtitle", "assets/images/menu/subtitle.png" },
		{ "twitter", "assets/images/menu/twitter.png" },
		{ "website", "assets/images/menu/website.png" },
		{ "mail", "assets/images/menu/mail.png" },
		{ "flowfield", "assets/textures/perlin.png" },
	},
	font = {
		{ "menu", "assets/fonts/Jamboree.ttf", 24, "default" },
		{ "about", "assets/fonts/DigitalDisco.ttf", 24 },
		{ "about", "assets/fonts/DigitalDisco.ttf", 64 },
	}
}

Assets.data.intro = {
	image = {
		{ "bg", "assets/images/intro/bg.png" },
		{ "bg_post", "assets/images/intro/bg_post.png" },
		{ "bg_tree1", "assets/images/intro/bg_tree1.png" },
		{ "bg_tree2", "assets/images/intro/bg_tree2.png" },
		{ "bg_tree3", "assets/images/intro/bg_tree3.png" },
		{ "fg_tree1", "assets/images/intro/fg_tree1.png" },
		{ "fg_tree2", "assets/images/intro/fg_tree2.png" },
		{ "parallax_buildings", "assets/images/intro/parallax_buildings.png" },
		{ "parallax_road", "assets/images/intro/parallax_road.png" },
		{ "parallax_grass", "assets/images/intro/parallax_grass.png" },
		{ "parallax_grass2", "assets/images/intro/parallax_grass2.png" },
		{ "sheet_car", "assets/images/intro/sheet_car.png" },
		{ "sheet_car_reflect", "assets/images/intro/sheet_car_reflect.png" },
	},
	image_data = {
		{ "lut_afternoon_64", "assets/intro/lut_afternoon_64.png" },
		{ "lut_dusk_64", "assets/intro/lut_dusk_64.png" },
		{ "lut_evening_64", "assets/intro/lut_evening_64.png" },
	},
	font = {},
}

function Assets:getData(key)
	!if _ASSERT then
	assert(type(key) == "string", "Passed argument must be of type 'string'")
	assert(self.data[key], "Passed argument does not exist in 'Assets.data' table")
	!end
	return self.data[key]
end

return Assets
