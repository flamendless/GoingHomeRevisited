local Concord = require("modules.concord.concord")

local Inputs = require("inputs")
local Palette = require("palette")

local UI = require("assemblages.ui")

local Factory = {}

function Factory.hold_key(world, key_id, x, y, timer, radius, sheet, font, dur_fade_in)
	local t = {}

	t.progress_bg = Concord.entity(world)
		:assemble(UI.hold_progress_bg, x, y, radius)
		:give("target_color", Palette.get("ui_hold_progress", 0.3), dur_fade_in)

	t.progress = Concord.entity(world)
		:assemble(UI.hold_progress, x, y, timer, radius)
		:give("color_fade_in", dur_fade_in)

	t.key = Concord.entity(world)
		:assemble(UI.key, key_id, x, y - 4, font)
		:give("color_fade_in", dur_fade_in)
		:give("layer", "hold_key", 3)

	local key_pos = t.key.pos

	t.keypress = Concord.entity(world)
		:assemble(UI.keypress, true, sheet, t.progress)
		:give("animation_on_update", function(dt, current_frame)
			if current_frame == 1 then
				key_pos.y = key_pos.orig_y
			elseif current_frame == 2 then
				key_pos.y = key_pos.orig_y + 4
			elseif current_frame == 3 then
				key_pos.y = key_pos.orig_y + 8
			end
		end)
		:give("color_fade_in", dur_fade_in)
		:give("layer", "hold_key", 2)

	return t
end

function Factory.arrows(world, sheet, x, y, offset, scale)
	@@assert(sheet:type() == "Image")
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	@@assert(type(offset) == "number")
	@@sassert(scale, type(scale) == "number")
	local t = {}

	local size = sheet:getWidth()/4 + offset
	local scale = scale or 1

	t.left = Concord.entity(world)
		:assemble(UI.arrow, "left", sheet, x, y)
		:give("quad_transform", 0, scale, scale, size, size * 0.5)
		:give("quad_size", size)

	t.right = Concord.entity(world)
		:assemble(UI.arrow, "right", sheet, x, y)
		:give("quad_transform", 0, scale, scale, 0, size * 0.5)
		:give("quad_size", size)

	t.up = Concord.entity(world)
		:assemble(UI.arrow, "up", sheet, x, y)
		:give("quad_transform", 0, scale, scale, size * 0.5, size)
		:give("quad_size", size)

	t.down = Concord.entity(world)
		:assemble(UI.arrow, "down", sheet, x, y)
		:give("quad_transform", 0, scale, scale, size * 0.5, 0)
		:give("quad_size", size)

	return t
end

function Factory.arrows_keys(world, arrows, font_sdf, x, y, scale)
	@@assert(world.__isWorld)
	@@assert(type(arrows) == "table")
	@@assert(font_sdf:type() == "fontsdf")
	@@assert(type(x) == "number")
	@@assert(type(y) == "number")
	@@assert(type(scale) == "number")
	local key_left = Inputs.get("player_move_left")
	local key_right = Inputs.get("player_move_right")
	local key_up = Inputs.get("player_move_up")
	local key_down = Inputs.get("player_move_down")

	local size = arrows.left.quad_size.value
	local lt = arrows.left.quad_transform
	local rt = arrows.right.quad_transform
	local ut = arrows.up.quad_transform
	local dt = arrows.down.quad_transform

	local pos_key_left = {
		x = x - (lt.ox * lt.sx) * 0.65,
		y = y - (lt.oy * lt.sy) * 0.35
	}

	local pos_key_right = {
		x = x + size * 0.8,
		y = y - (rt.oy * rt.sy) * 0.35
	}

	local pos_key_up = {
		x = x - font_sdf:getWidth(key_up) * 0.35,
		y = y - (ut.oy * ut.sy) * 0.65
	}

	local pos_key_down = {
		x = pos_key_up.x,
		y = y + size * 0.6
	}

	local t = {}

	t.key_left = Concord.entity(world)
		:assemble(UI.key, key_left, pos_key_left, font_sdf)
		:give("sdf", scale, scale)

	t.key_right = Concord.entity(world)
		:assemble(UI.key, key_right, pos_key_right, font_sdf)
		:give("sdf", scale, scale)

	t.key_up = Concord.entity(world)
		:assemble(UI.key, key_up, pos_key_up, font_sdf)
		:give("sdf", scale, scale)

	t.key_down = Concord.entity(world)
		:assemble(UI.key, key_down, pos_key_down, font_sdf)
		:give("sdf", scale, scale)

	return t
end

return Factory
