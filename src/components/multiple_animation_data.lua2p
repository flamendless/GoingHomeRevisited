local Concord = require("modules.concord.concord")

local floor = math.floor

Concord.component("multiple_animation_data", function(c, first, data, modifier)
	!if _ASSERT then
	assert(type(first) == "string", "Passed argument must be of type 'string'")
	assert(type(data) == "table", "Passed argument must be of type 'table'")
	assert(data[first], "'first' id should be in the 'data' table")
	for k, v in pairs(data) do
		assert(v.spritesheet, "There must be 'spritesheet'")
		assert(v.spritesheet:type() == "Image", "'spritesheet' must be of type 'Image'")
		assert(type(v.delay) == "number", "'delay' must be of type 'number'")
		assert(type(v.rows_count) == "number", "'rows_count' must be of type 'number'")
		assert(type(v.columns_count) == "number", "'columns_count' must be of type 'number'")
		assert(type(v.n_frames) == "number", "'n_frames' must be of type 'number'")
	end
	if modifier then
		assert(type(modifier) == "table", "Passed argument must be of type 'table'")
		for id, v in pairs(modifier) do
			local target = v[1]
			local action = v[2]
			assert(data[id], "'id' in modifier must exists in 'data' table")
			assert(type(target) == "string", "'target' must be of type 'string'")
			assert(type(action) == "string", "'target' must be of type 'string'")
		end
	end
	!end

	for id, v in pairs(data) do
		v.sheet_width = v.spritesheet:getWidth()
		v.sheet_height = v.spritesheet:getHeight()
		v.frame_width = floor(v.sheet_width/v.columns_count)
		v.frame_height = floor(v.sheet_height/v.rows_count)
	end

	if modifier then
		for id, v in pairs(modifier) do
			local target = v[1]
			local action = v[2]
			data[target] = {}
			table.copy(data[id], data[target])
			data[target].is_flipped = true
		end
	end

	c.first = first
	c.data = data
	c.modifier = modifier
end)
