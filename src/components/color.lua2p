local Concord = require("modules.concord.concord")

Concord.component("color", function(c, color, original)
	@@assert(type(color) == "table")
	@@sassert(original, type(original) == "table")
	c.value = {unpack(color)}
	c.original = original or {unpack(color)}
end)

Concord.component("color_fade_in_out", function(c, duration, count)
	@@assert(type(duration) == "number")
	@@sassert(count, type(count) == "number")
	c.duration = duration
	c.count = count or 0
end)

Concord.component("fade_to_black", function(c, duration, delay)
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	c.duration = duration
	c.delay = delay or 0
end)

Concord.component("lerp_colors", function(c, colors, duration, delay)
	@@assert(type(colors) == "table")
	@@sassert(duration, type(duration) == "number")
	!if _ASSERT then
	for i, v in ipairs(colors) do
		@@assert(type(color) == "table")
	end
	!end

	c.index = 1
	c.colors = colors
	c.duration = duration or 1.5
	c.delay = delay or 0.15
end)

Concord.component("target_color", function(c, target, duration, delay)
	@@assert(type(target) == "table")
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	c.target = {unpack(target)}
	c.duration = duration
	c.delay = delay or 0
end)

Concord.component("color_fade_in", function(c, duration, delay, on_complete)
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	@@sassert(on_complete, type(on_complete) == "function")
	c.duration = duration
	c.delay = delay or 0
	c.on_complete = on_complete
end)

Concord.component("color_fade_out", function(c, duration, delay, on_complete)
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	@@sassert(on_complete, type(on_complete) == "function")
	c.duration = duration
	c.delay = delay or 0
	c.on_complete = on_complete
end)

Concord.component("fade_in_target_alpha", function(c, alpha)
	@@assert(type(alpha) == "number")
	c.value = alpha
end)
