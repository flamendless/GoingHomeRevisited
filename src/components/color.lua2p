local Concord = require("modules.concord.concord")

Concord.component($_C_ALPHA_RANGE, function(c, min, max)
	@@assert(type(min) == "number")
	@@assert(type(max) == "number")
	c.min = min
	c.max = max
end)

Concord.component($_C_COLOR, function(c, color, original)
	@@assert(type(color) == "table")
	@@sassert(original, type(original) == "table")
	c.value = {unpack(color)}
	c.original = original or {unpack(color)}
end)

Concord.component($_C_COLOR_FADE_IN_OUT, function(c, duration, count)
	@@assert(type(duration) == "number")
	@@sassert(count, type(count) == "number")
	c.duration = duration
	c.count = count or 0
end)

Concord.component($_C_FADE_TO_BLACK, function(c, duration, delay)
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	c.duration = duration
	c.delay = delay or 0
end)

local c_lc = Concord.component($_C_LERP_COLORS, function(c, colors, duration, delay)
	@@assert(type(colors) == "table")
	@@sassert(duration, type(duration) == "number")
	!if _ASSERT then
	for i, v in ipairs(colors) do
		@@assert(type(color) == "table")
	end
	!end

	c.index = 1
	c.colors = colors
	c.duration = duration or 1.5
	c.delay = delay or 0.15
end)

function c_lc:serialize()
	return {
		index = self.index,
		colors = self.colors,
		duration = self.duration,
		delay = self.delay,
	}
end

function c_lc:deserialize(data)
	self.index = data.index
	self.colors = data.colors
	self.duration = data.duration
	self.delay = data.delay
end

Concord.component($_C_TARGET_COLOR, function(c, target, duration, delay)
	@@assert(type(target) == "table")
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	c.target = {unpack(target)}
	c.duration = duration
	c.delay = delay or 0
end)

Concord.component($_C_COLOR_FADE_IN, function(c, duration, delay)
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	c.duration = duration
	c.delay = delay or 0
end)

Concord.component($_C_COLOR_FADE_OUT, function(c, duration, delay)
	@@assert(type(duration) == "number")
	@@sassert(delay, type(delay) == "number")
	c.duration = duration
	c.delay = delay or 0
end)

Concord.component($_C_FADE_IN_TARGET_ALPHA, function(c, alpha)
	@@assert(type(alpha) == "number")
	c.value = alpha
end)

Concord.component($_C_REMOVE_BLINK_ON_END)
Concord.component($_C_BLINK, function(c, dur, count)
	@@assert(type(dur) == "number")
	@@assert(type(count) == "number")
	c.dur = dur
	c.count = count * 2
	c.completed = 0
end)
