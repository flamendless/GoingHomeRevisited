local Concord = require("modules.concord.concord")

local insert = table.insert

Concord.component("task_await")
Concord.component("task_completed")
Concord.component("subtask_completed")

Concord.component("subtask", function(c, color)
	@@assert(type(color) == "table")
	c.value = color
end)

local c_subtask_reliance = Concord.component("subtask_reliance", function(c, t)
	@@assert(type(t) == "table")
	for _, v in ipairs(t) do
		@@assert(v.__isEntity)
		v:ensure("key")
	end
	c.list = t
	c.completed = false
end)

function c_subtask_reliance:serialize()
	local t = {}
	for _, e in ipairs(self.list) do
		insert(t, e.key.value)
	end
	return {
		list = t
	}
end

function c_subtask_reliance:deserialize(data)
	local t = {}
	for _, key in ipairs(data.list) do
		local e = self.__entity:getWorld():getEntityByKey(key)
		insert(t, e)
	end
	self:__populate(t)
end

Concord.component("task", function(c, color)
	@@assert(type(color) == "table")
	c.value = color
end)
