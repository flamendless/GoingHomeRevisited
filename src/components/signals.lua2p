local Concord = require("modules.concord.concord")

local function ctor(c, signal, delay, ...)
	@@assert(type(signal) == "string")
	@@sassert(delay, type(delay) == "number")
	-- for _, v in ipairs({...}) do
	-- 	if v.__isEntity then
	-- 		v:ensure("key")
	-- 	end
	-- end
	c.signal = signal
	c.delay = delay or 0
	c.args = {...}
end

local function callback(name)
	return Concord.component(name, ctor)
end

-- local function cb_ser(name)
-- 	name["serialize"] = function(self)
-- 		local t = {}
-- 		for _, v in ipairs(self.args) do
-- 			if v.__isEntity then
-- 				v = {
-- 					is_entity = true,
-- 					key = v.key.value,
-- 				}
-- 			end
-- 			table.insert(t, v)
-- 		end
-- 		return {
-- 			signal = self.signal,
-- 			delay = self.delay,
-- 			args = t
-- 		}
-- 	end
-- end
--
-- local function cb_deser(name)
-- 	name["deserialize"] = function(self, data)
-- 		local t = {}
-- 		for _, v in ipairs(data.args) do
-- 			if type(v) == "table" and v.is_entity then
-- 				v = self.__entity:getWorld():getEntityByKey(v.key)
-- 			end
-- 			table.insert(t, v)
-- 		end
-- 		self.signal = data.signal
-- 		self.delay = data.delay
-- 		self.args = t
-- 	end
-- end

local names = {
	"animation_on_loop",
	"animation_on_update",
	"animation_on_finish",
	"lerp_on_finish",
	"typewriter_on_finish",
	"on_enter_menu",
	"hold_on_finish",
	"task_on_update",
	"color_fade_out_finish",
	"color_fade_in_finish",
	"on_keypressed",
	"on_dialogue_end",
}

for _, v in ipairs(names) do
	local c = callback(v)
	-- cb_ser(c)
	-- cb_deser(c)
end
