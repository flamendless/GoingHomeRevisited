local Concord = require("modules.concord.concord")

local floor = math.floor

Concord.component("multi_animation_data", function(c, first, data, modifier)
	@@assert(type(first) == "string")
	@@assert(type(data) == "table")
	@@assert(data[first])
	!if _DEV then
	for k, v in pairs(data) do
		@@assert(v.spritesheet)
		@@assert(v.spritesheet:type() == "Image")
		@@assert(type(v.delay) == "number" or type(v.delay) == "table")
		@@assert(type(v.rows_count) == "number")
		@@assert(type(v.columns_count) == "number")
		@@assert(type(v.n_frames) == "number")
	end

	@@sassert(modifier, type(modifier) == "table")
	if (modifier) then
		for id, v in pairs(modifier) do
			@@assert(data[id])
			@@assert(type(v[1]) == "string")
			@@assert(type(v[2]) == "string")
		end
	end
	!end

	for id, v in pairs(data) do
		v.sheet_width = v.spritesheet:getWidth()
		v.sheet_height = v.spritesheet:getHeight()
		v.frame_width = floor(v.sheet_width/v.columns_count)
		v.frame_height = floor(v.sheet_height/v.rows_count)
	end

	if modifier then
		for id, v in pairs(modifier) do
			local target = v[1]
			local action = v[2]
			data[target] = {}
			tablex.copy(data[id], data[target])
			data[target].is_flipped = true
		end
	end

	c.first = first
	c.data = data
	c.modifier = modifier
end)
