local Concord = require("modules.concord.concord")

local floor = math.floor

Concord.component("multi_animation_data", function(c, first, data, modifier)
	!if _ASSERT then
	Assert.must(first, Types.T_STRING)
	Assert.must(data, Types.T_TABLE)
	Assert.exists(data[first])

	for k, v in pairs(data) do
		Assert.exists(v.spritesheet)
		Assert.must(v.spritesheet, Types.T_IMAGE)
		Assert.either_type(v.delay, Types.T_NUMBER, Types.T_TABLE)
		Assert.must(v.rows_count, Types.T_NUMBER)
		Assert.must(v.columns_count, Types.T_NUMBER)
		Assert.must(v.n_frames, Types.T_NUMBER)
	end

	if Assert.safe.must(modifier, Types.T_TABLE) then
		for id, v in pairs(modifier) do
			local target = v[1]
			local action = v[2]

			Assert.exists(data[id])
			Assert.must(target, Types.T_STRING)
			Assert.must(action, Types.T_STRING)
		end
	end
	!end

	for id, v in pairs(data) do
		v.sheet_width = v.spritesheet:getWidth()
		v.sheet_height = v.spritesheet:getHeight()
		v.frame_width = floor(v.sheet_width/v.columns_count)
		v.frame_height = floor(v.sheet_height/v.rows_count)
	end

	if modifier then
		for id, v in pairs(modifier) do
			local target = v[1]
			local action = v[2]
			data[target] = {}
			tablex.copy(data[id], data[target])
			data[target].is_flipped = true
		end
	end

	c.first = first
	c.data = data
	c.modifier = modifier
end)
