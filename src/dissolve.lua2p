local Dissolve = class()

local abs = math.abs
local min = math.min
local max = math.max

local function smootherstep(v)
    return v * v * v * (v * (v * 6 - 15) + 10)
end

function Dissolve:new(texture, duration)
	!if _ASSERT then
	Assert.should_image(texture)
	Assert.should_number(duration)
	!end

	local shader_code = love.graphics.newShader("shaders/dissolve.glsl")

	shader_code:send("tex", texture)

	return self:init({
		flag_process = false,
		shader_code = shader_code,
		duration = duration,
		time = 0,
		dir = 1,
		kind = -1,
	})
end

function Dissolve:set_kind(kind)
	!if _ASSERT then
	Assert.should_number(kind)
	!end

	self.kind = kind
end

function Dissolve:update(dt)
	if self.shader_code and self.flag_process then
		self.time = self.time + dt * self.dir

		local n = self.kind + smootherstep(max(0, min(self.time/self.duration, 1)))

		self.shader_code:send("time", abs(n))

		if self.time > self.duration then
			if self.on_complete then
				self.on_complete()
				self.on_complete = nil
			end

			self.flag_process = false
		end
	end
end

function Dissolve:draw(fn)
	!if _ASSERT then
	Assert.should_function(fn)
	!end

	if self.flag_process then
		love.graphics.setShader(self.shader_code)
		fn()
		love.graphics.setShader()
	else
		fn()
	end
end

return Dissolve
