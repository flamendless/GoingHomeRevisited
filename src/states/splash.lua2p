local Concord = require("modules.concord.concord")
local Enum = require("modules.enum.enum")
local LoveSplash = require("modules.splashes.o-ten-one")
local Timer = require("modules.hump.timer")

local ECS = require("ecs")
local Resources = require("resources")
local Inputs = require("inputs")
local Fade = require("fade")
local Palette = require("palette")
local Preloader = require("preloader")
local Save = require("save")

local StateSplash = class()
StateSplash.id = "Splash"

local Assemblages = {
	Common = require("assemblages.common")
}

local resources = {images = {}, fonts = {}}
local res_images, res_fonts

local states = Enum("splash_love", "splash_wits", "splash_flam")
local current_state = states.splash_love

local splash_love
local delay_skip = 0.5
local timer_flam_skip, timer_wits_skip, timer_love_skip

local splash_love_skippable = false
local splash_wits_skippable = false
local splash_flam_skippable = false

local color_a = {0.898, 0.48627451, 0.074509804, 1}
local color_b = {0.952941176, 0.952941176, 0.054901961, 1}
local is_switching = false

local function switch(gamestate)
	if is_switching then return end

	is_switching = true
	Fade.fade_out(function()
		Save.toggle_flag("intro_done", true)
		gamestate.switch("Menu")
	end)
end

function StateSplash:new()
	return self:init({
		is_ready = false,
		world = Concord.world(),
		entities = {},
		gamestate = nil,
	})
end

function StateSplash:load()
	Preloader.start(Resources.get(self.id), resources,
		function()
			res_images = resources.images
			res_fonts = resources.fonts
			self.is_ready = true
			self:start()
		end)

	timer_love_skip = Timer()
	timer_wits_skip = Timer()
	timer_flam_skip = Timer()

	timer_love_skip:after(delay_skip, function()
		splash_love_skippable = true
	end)

	splash_love = LoveSplash()
	splash_love.onDone = function()
		current_state = states.splash_wits
		timer_wits_skip:after(delay_skip, function()
			splash_wits_skippable = true
		end)
	end
end

function StateSplash:start()
	ECS.load_systems(self.id, self.world)

	local ww, wh = love.graphics.getDimensions()

	self.entities.flamendless = Concord.entity(self.world)
		:give("sprite", res_images.flamendless_logo)
		:give("pos", ww/2, wh/2)
		:give("transform", 0, 1, 1, 0.5, 0.5)
		:give("color", {1, 1, 1, 0})

	self.entities.splash_wits = Concord.entity(self.world)
		:assemble(Assemblages.Common.animated_sprite, {
				spritesheet = res_images.sheet_wits,
				frames = {"1-3", 1, "1-3", 2, "1-3", 3, "1-3", 4},
				delay = 0.15,
				rows_count = 4,
				columns_count = 3,
			}, ww/2, wh/2)
		:give("color", Palette.get("white"))
		:give("transform", 0, 1, 1, 0.5, 0.5)
		:give("auto_scale", ww, wh, true)
		:give("fade_to_black", 1.5, 1)
		:give("animation_on_loop", function()
			self.world:emit("start_fade")
			Timer.after(2, function()
				self.entities.flamendless:give("color_fade_in", 2)
				current_state = states.splash_flam
				timer_flam_skip:after(delay_skip, function()
					splash_flam_skippable = true
				end)
				self.world:emit("start_colors_lerp")
				self.world:emit("start_typewriter")
			end)
		end, "pauseAtEnd")

	local font = res_fonts.firefly

	self.entities.ghost_effect = Concord.entity(self.world)
		:give("random_text", "flamendless")
		:give("font", font)
		:give("ghost_effect")

	self.entities.glitch_effect = Concord.entity(self.world)
		:give("random_text", {"flamendless", "brandon"})
		:give("font", font)
		:give("glitch_effect")
		:give("glitch_colors", Palette.color_glitches)
		:give("color", color_a)
		:give("lerp_colors", {color_a, color_b})
		:give("pos", ww/2, wh * 0.85)
		:give("transform", 0, 1, 1, 0.5, 0.5)

	self.entities.typewriter = Concord.entity(self.world)
		:give("color", Palette.colors.white)
		:give("pos", ww/2, wh * 0.2)
		:give("transform", 0, 1, 1, 0.5, 0.5)
		:give("text", "")
		:give("font", res_fonts.uncle_type_32)
		:give("typewriter", "a game by", 0.2)
		:give("typewriter_on_finish", function()
			switch(self.gamestate)
		end, 1.25)

	if Save.data.splash_done then
		self.entities.skip_splash = Concord.entity(self.world)
			:assemble(Assemblages.Common.skip, res_fonts.ui, vec2:new(ww/2, wh - 8))
	end
end

function StateSplash:update(dt)
	if not self.is_ready then return end

	if current_state == states.splash_love then
		timer_love_skip:update(dt)
		splash_love:update(dt)
	elseif current_state == states.splash_wits then
		self.world:emit("update", dt)
		timer_wits_skip:update(dt)
	elseif current_state == states.splash_flam then
		self.world:emit("update", dt)
		timer_flam_skip:update(dt)
	end
end

function StateSplash:draw()
	if not self.is_ready then return end

	if current_state == states.splash_love then
		splash_love:draw()
	elseif current_state == states.splash_wits then
		self.world:emit("draw")
	elseif current_state == states.splash_flam then
		self.world:emit("draw")
		self.world:emit("effect_draw")
	end

	self.world:emit("draw_ui")
	Fade.draw()
end

function StateSplash:keypressed(key)
	if not self.is_ready then return end

	if Save.data.splash_done then
		if Inputs.is_pressed("ui_skip", key) then
			if splash_love and splash_love_skippable then
				splash_love:skip()
			end

			if current_state == states.splash_wits and splash_wits_skippable then
				self.entities.splash_wits:give("animation_stop", "pauseAtEnd")
				splash_wits_skippable = false
			end

			if current_state == states.splash_flam and splash_flam_skippable then
				switch(self.gamestate)
				splash_flam_skippable = false
			end
		end
	end
end

function StateSplash:exit()
	Resources.clean(resources)
	Timer.clear()

	self.world:emit("cleanup")
	self.world:clear()

	for i, e in ipairs(self.world:getEntities()) do
		e:destroy()
	end

	for k, e in pairs(self.entities) do
		self.entities[k]:destroy()
		self.entities[k] = nil
	end

	current_state = states.splash_love
	splash_love = nil
	timer_flam_skip = nil
	timer_wits_skip = nil
	timer_love_skip = nil
	splash_love_skippable = false
	splash_wits_skippable = false
	splash_flam_skippable = false
	color_a = {0.898, 0.48627451, 0.074509804, 1}
	color_b = {0.952941176, 0.952941176, 0.054901961, 1}
	is_switching = false
end

return StateSplash
