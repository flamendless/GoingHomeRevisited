local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Gamera = require("modules.gamera.gamera")
local Log = require("modules.log.log")
local Timer = require("modules.hump.timer")
local TLE = require("modules.tle.timeline")

local Canvas = require("canvas")
local Enums = require("enums")
local Fade = require("fade")
local Image = require("image")
local Inputs = require("inputs")
local ListByID = require("ctor.list_by_id")
local Palette = require("palette")
local Resources = require("resources")
local Save = require("save")
local Shaders = require("shaders")

local Menu = Concord.system({
	pool = {"option_key", "color", "pos", "text", $_C_ON_ENTER_MENU},
	pool_disabled = {"option_key", "option_disabled"},
	pool_text = {"menu_text"},
	pool_main_menu = {
		constructor = ListByID,
		id = $_LIST_MAIN_MENU,
	},
	pool_sub_menu = {
		constructor = ListByID,
		id = $_LIST_SUB_MENU,
	},
})

local AMenu = require("assemblages.menu")

local offset_x = 64
local dur_in = 0.75
local dur_out = 0.5
local color_select = Palette.get("menu_select", 1)
local color_disabled = Palette.get("menu_disabled", 1)
local about_done = false
local ANGLE_UP = 90
local ANGLE_RIGHT = 0
local duration_show = 0.75
local duration_hide = 0.75
local duration_pos = 0.75
local target_x = 176
local tools = $_TOOLS
local libs = $_LIBS
local options = {"Play", "Settings", "About", "Exit"}
local options_sub = {"Continue", "New Game"}

local function color_to(color, target_color, dur)
	Flux.to(color.value, dur, {
		[1] = target_color[1],
		[2] = target_color[2],
		[3] = target_color[3],
		[4] = target_color[4]
	})
end

local about_template = {
	{"@COLOR"},
	{"A Game By:"},
	{!(_FULL_NAME_STUDIO .. "    " .. _TWITTER_STUDIO)},
	{""},

	{"@COLOR"},
	{"Programmer:"},
	{!(_FULL_NAME_DEVELOPER .. "    " .. _TWITTER_DEVELOPER)},
	{""},

	{"@COLOR"},
	{"Arts:"},
	{!(_FULL_NAME_ARTIST .. "    " .. _TWITTER_ARTIST)},
	{""},

	{"@COLOR"},
	{"Level Design:"},
	{!(_FULL_NAME_DESIGNER .. "    " .. _TWITTER_DESIGNER)},
	{""},

	--TODO add musician here
	{"@COLOR"},
	{"Music/Sound:"},
	{!(_FULL_NAME_MUSICIAN .. "    " .. _TWITTER_MUSICIAN)},
	{""},

	{"@LAYOUT:LEFT"},
	{"@COLOR"},
	{"TOOLS USED:"},
}

local function generate_about()
	local t = about_template
	for i = 1, #tools, 3 do
		local a = tools[i]
		local b = tools[i + 1] or ""
		local c = tools[i + 2] or ""
		if b ~= "" then a = a .. "," end
		if c ~= "" then b = b .. "," end
		local subt = {string.format("%s %s %s", a, b, c)}
		table.insert(t, subt)
	end

	table.insert(t, {"@LAYOUT:RIGHT"})
	table.insert(t, {"@COLOR"})
	table.insert(t, {"LIBRARIES USED:"})

	for i = 1, #libs, 4 do
		local a = libs[i]
		local b = libs[i + 1] or ""
		local c = libs[i + 2] or ""
		local d = libs[i + 3] or ""
		if b ~= "" then a = a .. "," end
		if c ~= "" then b = b .. "," end
		if d ~= "" then c = c .. "," end
		local subt = {string.format("%s %s %s %s", a, b, c, d)}
		table.insert(t, subt)
	end

	table.insert(t, {"@LAYOUT:CENTER"})
	table.insert(t, {""})
	table.insert(t, {"SPECIAL THANKS to the people at the LÃ¶ve Discord server"})
	table.insert(t, {
		"_IMAGES", "twitter", "discord", "website", "mail",
	})

	return t
end

function Menu:init(world)
	self.world = world
	self.keys = {}
	self.is_transition = true
	self.current_state = Enums.menu_state.menu
end

function Menu:state_setup()
	local ww, wh = love.graphics.getDimensions()
	local img_ff = Image.resize_image(Resources.data.images.flowfield)
	self.camera = Gamera.new(0, 0, ww * 2, wh * 2)
	self.camera:setWindow(0, 0, ww, wh)
	self.canvases = {}
	Canvas.init_canvases(self.canvases)
	self.mb = Shaders.MotionBlur(self.canvases.main)
	self.dissolve = Shaders.Dissolve(img_ff, 2)
	self:setup_menu()
end

function Menu:state_init()
	Fade.set_color({0, 0, 0, 1})
	self.timeline = TLE.Do(function()
		self:hide_main_menu(0.1)
		self:hide_sub_menu(0.1)
		self.timeline:Pause()
		Fade.fade_in(function() self:menu_unpause() end)
		self.timeline:Pause()
		self.subtitle:remove($_C_ANCHOR)
		self:show_main_menu()
		self.timeline:Pause()
		self.world:emit("set_focus_list", $_LIST_MAIN_MENU)
		self.is_transition = false
	end)
end

function Menu:state_update(dt)
	if self.is_transition then return end
	if Inputs.released("cancel") then
		self:menu_back()
	end

	local mx, my = love.mouse.getPosition()
	self.world:emit("update", dt)
	self.world:emit("check_mouse_hover", mx, my)
	self.world:emit("hover_effects")

	if self.current_state == Enums.menu_state.settings and not self.mb.flag_process then
		self.world:emit("update_settings", dt)
	elseif self.current_state == Enums.menu_state.exit then
		self.dissolve:update(dt)
	end
end

function Menu:state_draw()
	if self.current_state ~= Enums.menu_state.exit then
		self.canvases.main:attach()
		self.camera:attach()
			self.world:emit("draw")
			if self.current_state == Enums.menu_state.settings and not self.mb.flag_process then
				local l, t = self.camera:getVisible()
				love.graphics.push()
				love.graphics.translate(l, t)
				self.world:emit("draw_settings")
				love.graphics.pop()
			end
			Fade.draw()
		self.camera:detach()
		self.canvases.main:detach()
		self.mb:post_process_draw()
		self.canvases.main:render()
	elseif self.current_state == Enums.menu_state.exit then
		self.dissolve:draw(function()
			self.world:emit("draw")
		end)
	end
end

function Menu:setup_menu()
	local ww, wh = love.graphics.getDimensions()
	local bg_door = Resources.data.images.bg_door
	local bg_hallway = Resources.data.images.bg_hallway
	local title = Resources.data.images.title
	local subtitle = Resources.data.images.subtitle

	local bg_hw_w, bg_hw_h = bg_hallway:getDimensions()
	local bg_door_w, bg_door_h = bg_door:getDimensions()
	local title_w, title_h = title:getDimensions()
	local subt_w, subt_h = subtitle:getDimensions()

	local scale = math.min(ww/bg_door_w, wh/bg_door_h)
	local scale_hallway = math.min(ww/bg_hw_w, wh/bg_hw_h)
	local scale_title = math.min((bg_door_w * scale)/title_w, (bg_door_h * scale)/title_h)
	local scale_subt = math.min((title_w * scale_title)/subt_w, (title_h * scale)/subt_h)
	scale_subt = scale_subt * 0.75

	Concord.entity(self.world)
		:assemble(AMenu.bg_door,
			ww * 1.5, wh * 0.5, scale, bg_door_w * 0.5, bg_door_h * 0.5)

	Concord.entity(self.world):assemble(AMenu.bg_hallway,
		ww * 0.5, wh * 1.5, scale_hallway, bg_hw_w * 0.5, bg_hw_h * 0.5)

	self.e_desk = Concord.entity(self.world):assemble(AMenu.desk, ww, wh)
	self.title = Concord.entity(self.world):assemble(AMenu.title,
		ww * 0.25, wh * 0.5 - 36, scale_title, title_w * 0.5, title_h * 0.5)
	self.subtitle = Concord.entity(self.world):assemble(AMenu.subtitle,
		ww * 0.25, wh * 1.5, self.title, scale_subt, subt_w * 0.5, subt_h * 0.5)

	local jamboree_fnt = "res/fonts/Jamboree.fnt"
	local jamboree_png = "res/fonts/Jamboree.png"
	local sdf_menu = love.graphics.newFontMSDF(jamboree_fnt, jamboree_png)
	local font_menu = Resources.data.fonts.menu
	local str_target_h = font_menu:getHeight()
	local str_h = sdf_menu:getHeight()
	local str_scale = str_target_h/str_h * 0.75
	local offset = 16
	local padding = 2

	local has_save = Save.valid_checkpoints
	local n_opt_sub = has_save and #options_sub or (#options_sub - 1)

	self.world:emit("create_list_group", $_LIST_SUB_MENU, true, n_opt_sub)
	for i, str in ipairs(options_sub) do
		local lstr = string.lower(str)
		lstr = string.gsub(lstr, "%s+", "")
		local str_w = sdf_menu:getWidth(str) * str_scale
		local x = self.canvases.bot.width - str_w - offset
		local y = self.canvases.bot.y + (i * str_h) + (padding * i) - offset
		local id = "text_sub_" .. lstr

		local e = Concord.entity(self.world):assemble(AMenu.option_item,
				id, str, jamboree_fnt, jamboree_png, x, y, str_scale, i, 2,
				$_LIST_SUB_MENU)
			:give($_C_ON_ENTER_MENU, "on_" .. lstr)

		if not has_save and str == "Continue" then
			e:give($_C_LIST_ITEM_SKIP)
		end
	end

	self.world:emit("create_list_group", $_LIST_MAIN_MENU, true, #options)
	for i, str in ipairs(options) do
		local lstr = string.lower(str)
		local str_w = sdf_menu:getWidth(str) * str_scale
		local x = self.canvases.bot.width - str_w - offset
		local y = self.canvases.bot.y + (i * str_h) + (padding * i) - offset
		local id = "text_" .. lstr

		Concord.entity(self.world):assemble(AMenu.option_item,
				id, str, jamboree_fnt, jamboree_png, x, y, str_scale, i, 1,
				$_LIST_MAIN_MENU)
			:give($_C_ON_ENTER_MENU, "on_" .. lstr, 0, lstr)
	end
	self.world:__flush()
end

function Menu:setup_about()
	local about = generate_about()
	local about_links = $_ABOUT_LINKS
	local _, _, w, h = self.camera:getVisible()
	local base_x = w * 0.5
	local base_y = h + 16
	local layout = false
	local layout_base_y = 0
	local largest = 0
	local dt_color = false
	local color = Palette.get("about_normal")

	Concord.entity(self.world)
		:assemble(AMenu.btn_back, 8, base_y)
		:give($_C_ON_CLICK, 1, "menu_back")

	for i, el in ipairs(about) do
		if type(el[1]) == "string" and el[1] ~= "_IMAGES" then
			local str = el[1]
			local resource_id = el[2] or "about_20"
			local font = Resources.data.fonts[resource_id]
			local space = el[3]
			local str_w = font:getWidth(str)
			local str_h = font:getHeight(str)
			local x = base_x - str_w * 0.5
			local y = base_y
			if space then base_y = base_y + space end

			if str == "@LAYOUT:LEFT" then
				base_x = w * 0.25
				layout_base_y = base_y
				layout = true
			elseif str == "@LAYOUT:RIGHT" then
				base_x = w * 0.75
				layout_base_y = base_y
				layout = true
			elseif str == "@LAYOUT:CENTER" then
				base_x = w * 0.5
				base_y = largest
				layout = false
			elseif str == "@COLOR" then
				color = Palette.get("about_hint")
				dt_color = true
			else
				if layout then
					y = layout_base_y
					layout_base_y = layout_base_y + str_h
					largest = math.max(largest, layout_base_y)
				end
				local id = "about_text_" .. i
				Concord.entity(self.world):assemble(AMenu.about_text,
					id, resource_id, str, x, y, color)
				if dt_color then
					color = Palette.get("about_normal")
					dt_color = false
				end
				if not layout then base_y = base_y + str_h end
			end

		elseif type(el[1] == "string") and el[1] == "_IMAGES" then
			base_x = w * 0.5
			base_y = h * 2
			local pad = 24
			local n = #el
			local n2 = (n - 1) * 0.5
			for i2 = 2, n do
				local id = "about_image_" .. (i + i2)
				local resource_id = el[i2]
				local image = Resources.data.images[resource_id]
				local iw, ih = image:getDimensions()

				local bx = base_x - (n2 * iw)
				local x = bx + (iw * (i2 - 2)) + pad * 0.5
				local y = base_y - ih * 0.5 - pad * 0.5
				Concord.entity(self.world):assemble(AMenu.about_ext_link,
						id, resource_id, x, y)
					:give($_C_ON_CLICK, 1, "open_url", about_links[i2])
			end
		end
	end
end

function Menu:menu_unpause(bool)
	self.timeline:Unpause()
	if bool ~= nil then
		self.is_transition = bool
	end
end

function Menu:show_main_menu()
	for _, e in ipairs(self.pool_main_menu) do
		e:remove($_C_HIDDEN)
		:give($_C_TARGET_COLOR, Palette.get("white", 1), duration_show)
		:give($_C_LERP_ON_FINISH, "menu_unpause", 0, false)
		:give($_C_MOVE_TO_ORIGINAL, duration_pos)
	end
	self.current_state = Enums.menu_state.menu
	self.world:emit("set_focus_list", $_LIST_MAIN_MENU)
end

function Menu:hide_main_menu(duration)
	@@sassert(duration, type(duration) == "number")
	for _, e in ipairs(self.pool_main_menu) do
		e:give($_C_TARGET_COLOR, Palette.get("white", 0), duration or duration_hide)
		:give($_C_LERP_ON_FINISH_MULTI,
			{signal = "hide_entity", args = {e}},
			{signal = "menu_unpause"})
		:give($_C_MOVE_BY, target_x, 0, duration or duration_pos)
	end
end

function Menu:show_sub_menu()
	for _, e in ipairs(self.pool_sub_menu) do
		e:remove($_C_HIDDEN)
		:give($_C_TARGET_COLOR, Palette.get("white", 1), duration_show)
		:give($_C_LERP_ON_FINISH, "menu_unpause", 0, false)
		:give($_C_MOVE_TO_ORIGINAL, duration_pos)
	end

	Timer.after(duration_show, function()
		self.current_state = Enums.menu_state.sub_menu
		local override_cursor = Save.valid_checkpoints and 1 or 2
		self.world:emit("set_focus_list", $_LIST_SUB_MENU, override_cursor)
	end)
end

function Menu:hide_sub_menu(duration)
	@@sassert(duration, type(duration) == "number")
	for _, e in ipairs(self.pool_sub_menu) do
		e:give($_C_TARGET_COLOR, Palette.get("white", 0), duration or duration_hide)
		:give($_C_LERP_ON_FINISH, "hide_entity", 0, e)
		:give($_C_MOVE_BY, target_x, 0, duration or duration_pos)
	end
end

function Menu:on_newgame()
	local ww, wh = love.graphics.getDimensions()
	local dur = 2
	local timer = 1.25
	-- TODO turn off BGM

	self:hide_sub_menu()
	self.e_desk:give($_C_HIDDEN)

	--TODO change target_color
	for _, e in ipairs(self.pool_text) do
		e:give($_C_TARGET_COLOR, Palette.get("white", 0), dur)
	end

	local e_desk_fast = Concord.entity(self.world)
		:assemble(AMenu.desk_fast, ww, wh)

	Timer.after(timer, function()
		-- TODO add sudden static sound
		e_desk_fast:give($_C_HIDDEN)
		Timer.after(timer, function()
			self.world:emit("switch_state", "Intro")
		end)
	end)
end

function Menu:on_continue()
	-- TODO load saved game here
end

function Menu:on_settings()
	local l, t, w, h = self.camera:getWorld()
	local cworld = {x = l, y = t, w = w, h = h}
	self.world:emit("init_settings")
	self:MB_move(cworld.w, nil, ANGLE_RIGHT)
end

function Menu:on_about()
	local l, t, w, h = self.camera:getWorld()
	local cworld = {x = l, y = t, w = w, h = h}
	if not about_done then
		self:setup_about()
		about_done = true
	end
	self:MB_move(nil, cworld.h, ANGLE_UP)
end

function Menu:on_exit()
	!if _PLATFORM == "desktop" then
	local btn = love.window.showMessageBox("Alert",
		"Are you sure you want to exit the game?",
		{"Exit", "Cancel", escapebutton = 2})

	if btn == 1 then
		self:hide_main_menu()
		self.dissolve.flag_process = true
		self.dissolve.on_complete = function()
			love.event.quit()
		end
	elseif btn == 2 then
		self.current_state = Enums.menu_state.menu
		Log.info("Switched Menu State to:", self.current_state)
	end
	!end
end

function Menu:menu_back()
	if self.current_state == Enums.menu_state.sub_menu and
		not self.is_transition then
		self.is_transition = true
		self:hide_sub_menu()
		self:show_main_menu()
	elseif self.current_state ~= Enums.menu_state.menu and self.current_state ~= Enums.menu_state.play then
		self:MB_return()
	end
end

function Menu:MB_move(tx, ty, angle)
	-- TODO add motion blur sound
	local cx, cy = self.camera:getPosition()
	local cpos = {x = cx, y = cy}
	local duration = 1
	local distance = {1.0}
	local prev_angle = (angle + 180) % 360

	self.mb.flag_process = true
	Flux.to(cpos, duration, {x = tx, y = ty})
		:onstart(function()
			self.mb:store_previous(cx, cy, prev_angle)
			self.mb:set_angle(angle)
			Flux.to(distance, duration, {[1] = 0.0})
				:onupdate(function()
					self.mb:set_strength(distance[1])
				end)
		end)
		:onupdate(function()
			self.camera:setPosition(cpos.x, cpos.y)
			self.world:emit("on_camera_move", self.camera)
		end)
		:oncomplete(function()
			self.mb.flag_process = false
		end)
end

function Menu:MB_return()
	-- TODO add motion blur sound
	local cx, cy = self.camera:getPosition()
	local cpos = vec2(cx, cy)
	local duration = 1
	local distance = {1.0}
	local temp_mb = self.mb.previous

	self.mb.flag_process = true
	Flux.to(cpos, duration, {x = temp_mb.target.x, y = temp_mb.target.y})
		:onstart(function()
			self.mb:set_angle(temp_mb.angle)
			Flux.to(distance, duration, {[1] = 0.0})
				:onupdate(function()
					self.mb:set_strength(distance[1])
				end)
		end)
		:onupdate(function()
			self.camera:setPosition(cpos.x, cpos.y)
			self.world:emit("on_camera_move", self.camera)
		end)
		:oncomplete(function()
			self.current_state = Enums.menu_state.menu
			Log.info("Switched Menu State to:", self.current_state)
			self.mb.flag_process = false
		end)
end

function Menu:state_mousepressed(mx, my, mb)
	self.world:emit("mousepressed", mx, my, mb)
end

function Menu:open_url(str)
	@@assert(type(str) == "string")
	love.system.openURL(str)
end

Menu[$_SIGNAL_LIST_UPDATE .. $_LIST_MAIN_MENU] = function(self, e_hovered)
	for _, e in ipairs(self.pool_main_menu) do
		local pos = e.pos
		local color = e.color
		if e == e_hovered then
			color_to(color, color_select, dur_in)
			Flux.to(pos, dur_in, {x = pos.orig_x - offset_x})
		else
			color_to(color, color.original, dur_out)
			Flux.to(pos, dur_out, {x = pos.orig_x})
		end
	end
end

Menu[$_SIGNAL_LIST_UPDATE .. $_LIST_SUB_MENU] = function(self, e_hovered)
	for _, e in ipairs(self.pool_sub_menu) do
		local pos = e.pos
		local color = e.color
		if e.list_item_skip then
			color_to(color, color_disabled, dur_out)
			Flux.to(pos, dur_out, {x = pos.orig_x})
		elseif e == e_hovered then
			color_to(color, color_select, dur_in)
			Flux.to(pos, dur_in, {x = pos.orig_x - offset_x})
		else
			color_to(color, color.original, dur_out)
			Flux.to(pos, dur_out, {x = pos.orig_x})
		end
	end
end

Menu[$_SIGNAL_LIST_INTERACT .. $_LIST_MAIN_MENU] = function(self, e_hovered)
	local text = e_hovered.text.value
	if text == "Play" then
		self.is_transition = true
		self:hide_main_menu()
		self:show_sub_menu()
	elseif text == "Settings" then
		self.current_state = Enums.menu_state.settings
		self:on_settings()
	elseif text == "About" then
		self.current_state = Enums.menu_state.about
		self:on_about()
	elseif text == "Exit" then
		self.current_state = Enums.menu_state.exit
		self:on_exit()
	end
end

Menu[$_SIGNAL_LIST_INTERACT .. $_LIST_SUB_MENU] = function(self, e_hovered)
	local text = e_hovered.text.value
	if text == "Continue" then
		self:on_continue()
	elseif text == "New Game" then
		self:on_newgame()
	end
end

return Menu
