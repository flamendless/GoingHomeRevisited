local JSON = require("modules.json.json")
local Log = require("modules.log.log")

local Settings = require("settings")

local maps = {
	--map_wasd
	{
		a = "left",
		d = "right",
		w = "up",
		s = "down",
		e = "interact",
		q = "cancel",
		i = "inventory",
		space = "skip",
	},
	--map_arrows
	 {
		left = "left",
		right = "right",
		up = "up",
		down = "down",
		z = "interact",
		x = "cancel",
		c = "inventory",
		space = "skip",
	},
}
local map_names = { "WASD", "Arrows" }

local Inputs = {
	map = maps[1],
	rev_map = {},
	previous = {},
	current = {},
}

function Inputs.init(key_map)
	@@sassert(key_map, type(key_map) == "number")
	local n = key_map or Settings.current.key_map
	@@assert(maps[n])
	Inputs.map = maps[n]
	!if _DEV then
	Inputs.map.space = "play"
	!end
	tablex.clear(Inputs.previous)
	tablex.clear(Inputs.current)
	tablex.clear(Inputs.rev_map)
	for k, v in pairs(Inputs.map) do
		Inputs.previous[v] = false
		Inputs.current[v] = false
		Inputs.rev_map[v] = k
	end
end

function Inputs.pressed(key)
	@@assert(type(key) == "string")
	@@assert(Inputs.current[key] ~= nil)
	return Inputs.current[key] and not Inputs.previous[key]
end

function Inputs.released(key)
	@@assert(type(key) == "string")
	@@assert(Inputs.current[key] ~= nil)
	return not Inputs.current[key] and Inputs.previous[key]
end

function Inputs.down(key)
	@@assert(type(key) == "string")
	@@assert(Inputs.current[key] ~= nil)
	return Inputs.current[key]
end

function Inputs.keypressed(key)
	@@assert(type(key) == "string")
	if not Inputs.map[key] then return end
	Inputs.current[Inputs.map[key]] = true
end

function Inputs.keyreleased(key)
	@@assert(type(key) == "string")
	if not Inputs.map[key] then return end
	Inputs.current[Inputs.map[key]] = false
end

function Inputs.update()
	for k, v in pairs(Inputs.current) do
		Inputs.previous[k] = v
	end
end

function Inputs.get_map_keys()
	return maps
end

function Inputs.get_map_names()
	return map_names
end

function Inputs.get_current_map_name()
	return map_names[Settings.current.key_map]
end

return Inputs
