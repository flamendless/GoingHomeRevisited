local Bitser = require("modules.bitser.bitser")
local JSON = require("modules.json.json")
local Log = require("modules.log.log")

local format = string.format

local Utils = {
	file = {},
	json = {},
	serial = {},
	hash = {},
	string = {},
}

function Utils.file.read(filename)
	@@assert(type(filename) == "string")
	local file = love.filesystem.getInfo(filename)
	Log.info(format("'%s' exists: %s", filename, file ~= nil))
	if file then
		local content = love.filesystem.read(filename)
		return content, true
	end

	return false
end

function Utils.file.write(filename, data)
	@@assert(type(filename) == "string")
	love.filesystem.write(filename, data)
	Log.info(format("'%s' written", filename))
end

function Utils.json.write(filename, data)
	@@assert(type(filename) == "string")
	Utils.file.write(filename, JSON.encode(data))
end

function Utils.serial.write(filename, data)
	@@assert(type(filename) == "string")
	local to_write = Bitser.dumps(data)
	Utils.file.write(filename, to_write)

	return to_write
end

function Utils.json.parse(filename)
	@@assert(type(filename) == "string")
	local content, exists = Utils.file.read(filename)
	if exists then
		return JSON.decode(content), true
	end

	return false
end

function Utils.serial.read(filename)
	@@assert(type(filename) == "string")
	local content, exists = Utils.file.read(filename)
	local data = Bitser.loads(content)

	return data, exists
end

function Utils.serial.de(content)
	return Bitser.loads(content)
end

function Utils.hash.compare(a, b)
	@@assert(type(a) == "string")
	@@assert(type(b) == "string")
	local hashed_a = love.data.hash("md5", a)
	local hashed_b = love.data.hash("md5", b)

	return hashed_a == hashed_b
end

function Utils.string.get_substr(str, sep)
	@@assert(type(str) == "string")
	@@assert(type(sep) == "string")
	local n = string.find(str, sep)

	return string.sub(str, 1, n - 1)
end

function Utils.string.get_widest(t)
	@@assert(type(t) == "table")
	@@assert(#t ~= 0)
	local n = 0
	local widest

	for i, str in ipairs(t) do
		local l = #str
		if l > n then
			n = l
			widest = str
		end
	end

	return widest
end

return Utils
