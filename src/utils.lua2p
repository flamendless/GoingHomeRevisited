local Bitser = require("modules.bitser.bitser")
local Log = require("modules.log.log")

local Utils = {
	file = {},
	serial = {},
	hash = {},
	string = {},
	table = {},
	math = {},
}

function Utils.file.read(filename)
	@@assert(type(filename) == "string")
	local file = love.filesystem.getInfo(filename)
	Log.info(filename, "exists:", file ~= nil)
	if file then
		local content = love.filesystem.read(filename)
		return content, true
	end

	return false
end

function Utils.file.write(filename, data)
	@@assert(type(filename) == "string")
	love.filesystem.write(filename, data)
	Log.info(filename, "written")
end

function Utils.serial.write(filename, data)
	@@assert(type(filename) == "string")
	local to_write = Bitser.dumps(data)
	Utils.file.write(filename, to_write)
	return to_write
end

function Utils.serial.read(filename)
	@@assert(type(filename) == "string")
	local content, exists = Utils.file.read(filename)
	if exists then
		local data = Bitser.loads(content)
		return data, exists
	end
	return false
end

function Utils.serial.de(content)
	return Bitser.loads(content)
end

function Utils.hash.compare(a, b)
	@@assert(type(a) == "string")
	@@assert(type(b) == "string")
	local hashed_a = love.data.hash("md5", a)
	local hashed_b = love.data.hash("md5", b)
	return hashed_a == hashed_b
end

function Utils.string.get_substr(str, sep)
	@@assert(type(str) == "string")
	@@assert(type(sep) == "string")
	local n = string.find(str, sep)
	return string.sub(str, 1, n - 1)
end

function Utils.string.get_widest(t)
	@@assert(type(t) == "table")
	@@assert(#t ~= 0)
	local widest = 0
	for i, str in ipairs(t) do
		widest = math.max(widest, #str)
	end
	return widest
end

function Utils.table.rotate(t, amount)
	@@assert(type(t) == "table")
	@@assert(type(amount) == "number")
	if amount == 0 then return t end
	if amount > 0 then
		tablex.push(t, tablex.shift(t))
		return Utils.table.rotate(t, amount - 1)
	elseif amount < 0 then
		tablex.unshift(t, tablex.pop(t))
		return Utils.table.rotate(t, amount + 1)
	end
end

function Utils.table.count_kv(t)
	@@assert(type(t) == "table")
	if #t ~= 0 then return #t end
	local count = 0
	for _ in pairs(t) do
		count = count + 1
	end
	return count
end

function Utils.table.pick_random_kv(t, count)
	count = count or Utils.table.count_kv(t)
	local limit = math.floor(love.math.random() * (count - 1)) + 1
	for k, v in pairs(t) do
		limit = limit - 1
		if limit == 0 then
			return k, v
		end
	end
end

function Utils.math.n_digits(x)
	return math.floor(math.log10(x)) + 1
end

function Utils.math.lerp_range(range, t)
	@@assert(type(range) == "table" and range.min and range.max)
	@@assert(type(t) == "number")
	return mathx.lerp(range.min, range.max, t)
end

return Utils
