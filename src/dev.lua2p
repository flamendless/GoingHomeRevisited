local Dev = {}

!if not _RELEASE then

local Concord = require("modules.concord.concord")
local Gamera = require("modules.gamera.gamera")
local Slab = require("modules.slab")

local format = string.format

local Components = {}
Concord.utils.loadNamespace("components", Components)

local DebugSlab = require("systems.debug_slab")
local BoundingBox = require("systems.bounding_box")

local stats = {}
local cam_speed = 256

function Dev.init(id, world)
	!if _ASSERT then
	Assert.should_string(id)
	Assert.should_world(world)
	!end

	Dev.id = id
	Dev.world = world
	Dev.window_title = "DevTool: " .. id
	Dev.scale = 1
	Dev.show = true
	Dev.show_bounding_box = (id == "Test")

	local ww, wh =love.graphics.getDimensions()
	Dev.camera = Gamera.new(-ww/2, -wh/2, ww * 2, wh * 2)
	Dev.camera:setWindow(0, 0, ww, wh)
	Dev.camera:setPosition(ww/2, wh/2)

	Dev.world:addSystem(DebugSlab)

	if not Dev.world:hasSystem(BoundingBox) then
		Dev.world:addSystem(BoundingBox)
	end

	Slab.Initialize()
end

function Dev.update(dt)
	if Dev.show and Dev.world then
		local dx, dy = Dev.camera:getPosition()
		if love.keyboard.isDown("left") then
			dx = dx - cam_speed * dt
		elseif love.keyboard.isDown("right") then
			dx = dx + cam_speed * dt
		elseif love.keyboard.isDown("up") then
			dy = dy + cam_speed * dt
		elseif love.keyboard.isDown("down") then
			dy = dy - cam_speed * dt
		end
		Dev.camera:setPosition(dx, dy)

		Slab.Update(dt)

		Slab.BeginWindow("DevToolMain", { Title = Dev.window_title })
		if Slab.CheckBox(Dev.show_bounding_box, "BoundingBox") then
			Dev.show_bounding_box = not Dev.show_bounding_box
		end
		for k, v in pairs(stats) do
			local str_stat = format("%s: %i", k, v)
			Slab.Text(str_stat)
		end
		Slab.EndWindow()

		Dev.world:emit("draw_slab")
	end
end

function Dev.draw()
	if Dev.show and Dev.world then
		if Dev.show_bounding_box then
			Dev.world:emit("draw_debug", Dev.scale)
		end
		Slab.Draw()
		stats = love.graphics.getStats(stats)
	end
end

function Dev.keypressed(key)
	if Dev.show then
		if key == "`" then
			Dev.show = not Dev.show
		elseif key == "-" then
			local scale = Dev.camera:getScale()
			Dev.camera:setScale(scale - 0.25)
		elseif key == "=" then
			local scale = Dev.camera:getScale()
			Dev.camera:setScale(scale + 0.25)
		elseif key == "space" then
			Dev.camera:setPosition(0, 0)
			Dev.camera:setScale(1)
		end
	end
end

function Dev.setScale(scale)
	!if _ASSERT then
	Assert.should_number(scale)
	!end
	Dev.scale = scale
end

function Dev.deinit()
	if Dev.world then
		Dev.world:emit("deinit")
	end
	Dev.id = nil
	Dev.world = nil
	Dev.scale = 1
end

!end

return Dev
