local Resources = require("resources")
local Shaders = require("shaders")

local DitherGradient = class({
	name = "DitherGradient"
})

function DitherGradient:new(is_active)
	@@sassert(is_active, type(is_active) == "boolean")
	self.shader = love.graphics.newShader(Shaders.paths.dither_gradient)
	-- self.is_active = is_active == nil or not not is_active --default is true
	self.is_active = not not is_active --default is false

	self.depth = 32
	self.dither_size = 1
	self.contrast = 1
	self.offset = 0

	local tex_dither = Resources.data.images.bayer16
	tex_dither:setWrap("repeat", "repeat")
	local tex_palette = Resources.data.images.pal_hollow

	self.shader:send("u_tex_dither", tex_dither)
	self.shader:send("u_tex_palette", tex_palette)
	self.shader:send("u_size_tex_dither", {tex_dither:getPixelDimensions()})
	self.shader:send("u_size_tex_palette", {tex_palette:getPixelDimensions()})
	self:update_values()
end

function DitherGradient:update_values()
	self.shader:send("u_depth", self.depth)
	self.shader:send("u_dither_size", self.dither_size)
	self.shader:send("u_contrast", self.contrast)
	self.shader:send("u_offset", self.offset)
end

!if _DEV then
local Slab = require("modules.slab")

local opt_slider_int = {
	ReturnOnText = false,
	NumbersOnly = true,
	Precision = 0,
}

local opt_slider_float = {
	ReturnOnText = false,
	NumbersOnly = true,
	Precision = 2,
}

function DitherGradient:debug_slider(id, val, min, max, opt)
	Slab.Text(id)
	Slab.SameLine()
	if Slab.InputNumberSlider(id, val, min, max, opt) then
		@@assert(self[id])
		self[id] = Slab.GetInputNumber()
		self.shader:send("u_" .. id, self[id])
	end
end

function DitherGradient:debug_update(dt)
	if not self.debug_show then return end

	self.debug_show = Slab.BeginWindow("dither_gradient", {
		Title = "DitherGradient",
		IsOpen = self.debug_show,
	})
	self:debug_slider("depth", self.depth, 0, 32, opt_slider_int)
	self:debug_slider("dither_size", self.dither_size, 0, 32, opt_slider_int)
	self:debug_slider("contrast", self.contrast, 0, 4, opt_slider_float)
	self:debug_slider("offset", self.offset, -1, 1, opt_slider_float)
	Slab.EndWindow()
end
!end

return DitherGradient
