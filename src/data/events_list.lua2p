local Event = require("event")
local Inputs = require("inputs")
local Palette = require("palette")

local EventsList = {}

local function arrows_keys_fade(arrow, key, dur)
	local dur2 = dur/2

	arrow:give("target_color", Palette.get("ui_feedback"), dur)
	arrow:give("color_fade_out", dur, nil, function() arrow:destroy() end)

	key:give("target_color", Palette.get("ui_feedback"), dur2)
	key:give("color_fade_out", dur2, nil, function() key:destroy() end)
end

function EventsList.hold_key(key, input_id, timer, e)
	@@assert(type(key) == "string")
	@@assert(type(input_id) == "string")
	@@assert(type(timer) == "number")
	@@assert(timer > 0)
	@@assert(e.__isEntity)
	@@assert(e.hold)
	local id = "hold_key_" .. key
	local ev = Event:new(id, {timer = 0})

	ev.update = function(task, dt)
		local data = task.data
		if Inputs.down(input_id) then
			data.timer = math.lerp(data.timer, data.timer + dt, 0.75)
		else
			data.timer = math.lerp(data.timer, 0, 0.25)
		end
		e.hold.current_time = data.timer

		return data.timer >= timer
	end

	return ev
end

function EventsList.arrows_keys(arrows, arrows_keys, dur)
	@@assert(type(arrows) == "table")
	@@assert(type(arrows_keys) == "table")
	@@assert(type(dur) == "number")
	local id = "arrows_keys"
	local ev = Event:new(id, {left = false, right = false})
	local key_left = "player_move_left"
	local key_right = "player_move_right"

	ev.update = function(task, dt)
		local data = task.data

		if not data.left and Inputs.is_down(key_left) then
			data.left = true
			arrows_keys_fade(arrows.left, arrows_keys.key_left, dur)
		end

		if not data.right and Inputs.is_down(key_right) then
			data.right = true
			arrows_keys_fade(arrows.right, arrows_keys.key_right, dur)
		end
	end

	return ev
end

return EventsList
