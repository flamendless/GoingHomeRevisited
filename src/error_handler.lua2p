local ErrorHandler = {}

local Log = require("modules.log.log")
local Lily = require("modules.lily.lily")

!if _REPORTING then
local Reporter = require("reporter")
!end

local Utf8 = require("utf8")
local insert = table.insert
local concat = table.concat
local traceback = debug.traceback

local font, p

local function error_printer(msg, layer)
	local err_msg = (traceback("Error: " .. tostring(msg),
		1 + (layer or 1)):gsub("\n[^\n]+$", ""))
	print(err_msg)
end

local function draw()
	local pos_x = 0
	!if not _RELEASE then
	local pos_y = 24
	!else
	local pos_y = love.graphics.getHeight()/2
	!end

	love.graphics.clear()
	love.graphics.setColor(1, 1, 1, 1)
	love.graphics.printf(p, pos_x, pos_y, love.graphics.getWidth(), "center")
	love.graphics.present()
end

local function copy_to_clipboard(arg)
	if not love.system then
		return
	end

	love.system.setClipboardText(arg)
	p = p .. "\nCopied to clipboard"
	draw()
end

function ErrorHandler.callback(msg)
	msg = tostring(msg)
	!if _REPORTING then
	Reporter.send(msg)
	!end
	error_printer(msg, 2)

	if not love.window or not love.graphics or not love.event then
		return
	end

	if not love.graphics.isCreated() or not love.window.isOpen() then
		local success, status = pcall(love.window.setMode, 800, 600)

		if not success or not status then
			return
		end
	end

	if love.mouse then
		love.mouse.setVisible(true)
		love.mouse.setGrabbed(false)
		love.mouse.setRelativeMode(false)

		if love.mouse.isCursorSupported() then
			love.mouse.setCursor()
		end
	end

	if love.joystick then
		for i, v in ipairs(love.joystick.getJoysticks()) do
			v:setVibration()
		end
	end

	if love.audio then
		love.audio.stop()
	end

	love.graphics.reset()
	-- font = love.graphics.setNewFont(12)
	!if not _RELEASE then
	font = love.graphics.newFont("res/fonts/DigitalDisco.ttf", 16)
	!else
	font = love.graphics.newFont("res/fonts/DigitalDisco.ttf", 24)
	!end
	font:setFilter(!(_FONT_FILTER), !(_FONT_FILTER))
	love.graphics.setFont(font)
	love.graphics.setColor(1, 1, 1, 1)

	local trace = traceback()

	love.graphics.origin()

	local sanitized_msg = {}

	for char in msg:gmatch(Utf8.charpattern) do
		insert(sanitized_msg, char)
	end

	sanitized_msg = concat(sanitized_msg)

	local err = {}

	insert(err, "SORRY! SOMETHING UNEXPECTED OCCURED!")
	insert(err, "The developer will work on to fix this, please have patience\n")

	!if not _RELEASE then
	insert(err, sanitized_msg)

	if #sanitized_msg ~= #msg then
		insert(err, "Invalid UTF-8 string in error message")
	end

	insert(err, "\n")

	for l in trace:gmatch("(.-)\n") do
		if not l:match("boot.lua") then
			l = l:gsub("stack traceback:", "Traceback\n")
			insert(err, l)
		end
	end
	!end

	p = concat(err, "\n")
	p = p:gsub("\t", "")
	p = p:gsub("$[string \"(.-)\"%]", "%1")

	local text_full = p

	Lily.quit()

	return function()
		love.event.pump()
		for e, a, b, c in love.event.poll() do
			if e == "quit" then
				return 1

			!if _PLATFORM == "desktop" then
			elseif e == "keypressed" and a == "escaped" then
				return 1
			elseif e == "keypressed" and a == "c" and
				love.keyboard.isDown("lctrl", "rctrl") then
				copy_to_clipboard(text_full)
			end
			!else

			if e == "touchpressed" then
				local name = love.window.getTitle()

				if #name == 0 or name == "Untitled" then
					name = "Game"
				end

				local buttons = {"OK", "Cancel"}

				if love.system then
					buttons[3] = "Copy to clipboard"
				end

				local pressed = love.window.showMessageBox("Quit " .. name .. "?",
					"", buttons)

				if presssed == 1 then
					return 1
				elseif pressed == 3 then
					copy_to_clipboard(text_full)
				end
			end

			!end
		end

		draw()

		if love.timer then
			love.timer.sleep(0.1)
		end
	end
end

return ErrorHandler
