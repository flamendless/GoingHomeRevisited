local Preloader = require("preloader")
local Shaders = require("shaders")
local Utils = require("utils")

local LoadingScreen = {}

local font_preload = love.graphics.newFont("res/fonts/Jamboree.ttf", 48)
font_preload:setFilter($_FONT_FILTER, $_FONT_FILTER)

local timer = 0
local canvas, shader
local w, h = love.graphics.getDimensions()
local x, y = w * 0.5, h * 0.75

local ranges = {
	depth = {min = 4, max = 32},
	dither_size = {min = 1, max = 2},
	contrast = {min = 1, max = 2},
	-- offset = {min = -1, max = 1},
}

--status of this module is handled by `not GameStates.is_ready`
function LoadingScreen.init()
	local tex_dither = love.graphics.newImage("res/textures/bayer16.png")
	local tex_palette = love.graphics.newImage("res/textures/pal_hollow.png")
	shader = Shaders.DitherGradient(true, tex_dither, tex_palette)
	canvas = love.graphics.newCanvas()
end

function LoadingScreen.update(dt)
	timer = timer + dt
	local t = (math.sin(timer) + 1) * 0.5

	for k, v in pairs(ranges) do
		shader[k] = Utils.math.lerp_range(v, t)
	end

	shader:update_values()
end

function LoadingScreen.draw()
	--TODO improve this
	love.graphics.setCanvas(canvas)
		love.graphics.clear()
		love.graphics.setColor(0, 0, 0, 1)
		love.graphics.rectangle("fill", 0, 0, w, h)

		local str_loading = string.format("LOADING: %i%%", Preloader.percent)
		local ox = font_preload:getWidth(str_loading) * 0.5
		local oy = font_preload:getHeight(str_loading) * 0.5
		love.graphics.setFont(font_preload)

		love.graphics.setColor(1, 1, 1, 0.75)
		love.graphics.print(str_loading, x, y, 0, 1, 1, ox, oy)
	love.graphics.setCanvas()

	love.graphics.setShader(shader.shader)
	love.graphics.draw(canvas)
	love.graphics.setShader()
end

return LoadingScreen
