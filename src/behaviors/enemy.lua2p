local get_dt = love.timer.getDelta
local lm_random = love.math.random

local Fail = require("modules.beehive.beehive.fail")
local Invert = require("modules.beehive.beehive.invert")
local Repeat = require("modules.beehive.beehive.repeat")
local Selector = require("modules.beehive.beehive.selector")
local Sequence = require("modules.beehive.beehive.sequence")

local Enums = require("enums")
local bt_enemy = Enums.bt.enemy

local function set_tag(e, tag)
	@@assert(e.__isEntity and e.behavior_tree)
	@@assert(type(tag) == "string")
	e.behavior_tree.current_node = bt_enemy[tag]
end

local function set_node_bt(e, tag)
	@@assert(e.__isEntity and e.behavior_tree)
	@@assert(type(tag) == "string")
	return function()
		set_tag(e, tag)
		return $_BT_SUCCESS
	end
end

local function is_current_node_bt(e, ...)
	@@assert(e.__isEntity and e.behavior_tree)
	local nodes = {...}
	@@assert(type(nodes) == "table" and #nodes > 0)
	return function()
		local current_node = e.behavior_tree.current_node
		for _, node in ipairs(nodes) do
			if current_node == node then
				return $_BT_SUCCESS
			end
		end
		return $_BT_FAILURE
	end
end

local function is_current_anim(e, tag)
	@@assert(e.__isEntity and e.behavior_tree and e.animation)
	@@assert(type(tag) == "string")
	return (e.animation.base_tag == tag) and $_BT_SUCCESS or $_BT_FAILURE
end

local function is_current_anim_bt(e, tag)
	@@assert(e.__isEntity and e.behavior_tree and e.animation)
	@@assert(type(tag) == "string")
	return function()
		return is_current_anim(e, tag)
	end
end

local function is_current_anim_done(e, tag)
	@@assert(e.__isEntity and e.behavior_tree and e.animation)
	@@assert(type(tag) == "string")
	local base_tag = e.animation.base_tag
	if base_tag ~= tag then
		return $_BT_RUNNING
	end
	local current_frame = e.current_frame
	return (current_frame.value == current_frame.max) and $_BT_SUCCESS or $_BT_RUNNING
end

local function is_current_anim_done_bt(e, tag)
	@@assert(e.__isEntity and e.behavior_tree and e.animation)
	@@assert(type(tag) == "string")
	return function()
		return is_current_anim_done(e, tag)
	end
end

local function get_distance(world, e, other_e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree and e.ref_e_key)
	@@sassert(other_e, other_e.__isEntity)
	other_e = other_e or world:getEntityByKey(e.ref_e_key.value)
	return e.controller_origin.vec2:distance(other_e.controller_origin.vec2)
end

local function is_other_behind(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree and e.ref_e_key)
	local other_e = world:getEntityByKey(e.ref_e_key.value)
	local diff = (e.pos.x <= other_e.pos.x) and -1 or 1
	local is_behind = e.body.dir == diff
	if not is_behind then
		return $_BT_FAILURE
	end
	local distance = get_distance(world, e, other_e)
	local within_distance = distance <= e.line_of_sight.value
	return within_distance and $_BT_SUCCESS or $_BT_FAILURE
end

local function random(tbl)
	@@assert(type(tbl) == "table" and #tbl > 0)
	!if _DEV then
	for _, bt in ipairs(tbl) do @@assert(type(bt) == "function") end
	!end
	return tbl[lm_random(1, #tbl)]
end

local function wait_random(e, min, max)
	@@assert(e.__isEntity and e.behavior_tree)
	@@assert(type(min) == "number")
	@@assert(type(max) == "number")
	@@assert(min > 0 and min < max)
	local elapsed = 0
	local r = lm_random(min, max)
	return function()
		elapsed = elapsed + get_dt()
		if elapsed >= r then
			elapsed = 0
			r = lm_random(min, max)
			return $_BT_SUCCESS
		end
		return $_BT_RUNNING
	end
end

local function sees_other(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree and e.ref_e_key)
	local distance = get_distance(world, e)
	local sees = distance <= e.line_of_sight.value
	return sees and $_BT_SUCCESS or $_BT_FAILURE
end

local function chase_other(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree and e.ref_e_key)
	set_tag(e, "chase")
	local sees = sees_other(world, e)
	if sees == $_BT_FAILURE then
		return $_BT_FAILURE
	end
	return e.collide_with and $_BT_SUCCESS or $_BT_RUNNING
end

local function has_collide_with(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	return e.collide_with and $_BT_SUCCESS or $_BT_FAILURE
end

local function skip_collider_update(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	e:give($_C_SKIP_COLLIDER_UPDATE)
	return $_BT_SUCCESS
end

local function caught_other(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	return Sequence({
		is_current_node_bt(e, bt_enemy.chase, bt_enemy.walk, bt_enemy.caught_other),
		has_collide_with,
		set_node_bt(e, bt_enemy.caught_other),
		skip_collider_update,
	})
end

local function lean_return_back(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	return Sequence({
		is_current_anim_bt(e, bt_enemy.lean_back),
		Invert(is_other_behind),
		set_node_bt(e, bt_enemy.lean_return_back),
		is_current_anim_done_bt(e, bt_enemy.lean_return_back),
		Fail,
	})
end

local function lean_back(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	return Sequence({
		is_other_behind,
		set_node_bt(e, bt_enemy.lean_back),
	})
end

local function walk(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	return Sequence({
		sees_other,
		random({
			chase_other,
		}),
		set_node_bt(e, bt_enemy.walk),
	})
end

return function(world, e)
	@@assert(world.__isWorld)
	@@assert(e.__isEntity and e.behavior_tree)
	return Selector({
		caught_other(world, e),
		lean_return_back(world, e),
		lean_back(world, e),
		walk(world, e),
		set_node_bt(e, bt_enemy.idle),
	})
end
