--[[
Project: Going Home Revisit
Author: Brandon Blanker Lim-it @flamendless
Start Date: Mon Jan  7 15:28:53 PST 2019
Start Date (major refactor): Tue Mar 17 18:42:00 PST 2020
--]]

assert(love.system.getOS() == !(_OS))
require("modules.batteries")
function printf(...)
	local msg = ""
	for i, arg in ipairs({...}) do
		if type(arg) == "table" then
			for k, v in pairs(arg) do
				msg = msg .. v .. ", "
			end
		else
			msg = msg .. arg .. ", "
		end
	end
	print(msg)
end

function printt(t)
	assert(type(t) == "table", "argument must be of type 'table'")
	for k, v in pairs(t) do
		print(k, v)
	end
end

io.stdout:setvbuf("no")
local ErrorHandler = require("error_handler")
love.errhand = ErrorHandler.callback
local Canvas = require("canvas")
local Info = require("info")
local Network = require("network")
local Preloader = require("preloader")

local min = math.min
local floor = math.floor
local randomseed = math.randomseed
local time = os.time
local insert = table.insert
local remove = table.remove
local sort = table.sort
local format = string.format

local Concord = require("modules.concord.concord")
local Flux = require("modules.flux.flux")
local Log = require("modules.log.log")
Log.outfile = !(_LOG_OUTPUT)
Log.lovesave = true
local Semver = require("modules.semver.semver")
local Timer = require("modules.hump.timer")

local Worlds = require("worlds")
local current_world

local window_size = !(_GAME_SIZE)
local canvas_resize, state_init
local mid_canvas, bot_canvas, top_canvas, main_canvas
local supported_modes = love.window.getFullscreenModes()
local current_mode = 1

!if not _RELEASE then
local color_red = {1, 0, 0, 1}
local color_green = {0, 1, 0, 1}
local color_blue = {0, 0, 1, 1}
local base_font
!end

local this_version = ("%i.%i.%i"):format(unpack(!(_GAME_VERSION)))
local this_semver = Semver(this_version)

function love.load()
	Log.info(format("Starting... Game Version: %s", this_version))
	!if _NETWORK then
	Network.check_latest_version(this_semver)
	!end

	randomseed(time())
	love.math.setRandomSeed(love.timer.getTime())
	love.graphics.setDefaultFilter(!(_DEFAULT_FILTER), !(_DEFAULT_FILTER))
	insert(supported_modes, 1, { width = love.graphics.getWidth(), height = love.graphics.getHeight() })
	sort(supported_modes, function(a, b) return a.width * a.height < b.width * b.height end)
	for i = #supported_modes, 1, -1 do
		local mode = supported_modes[i]
		local s = min(love.graphics.getWidth()/mode.width, love.graphics.getHeight()/mode.height)
		if s < 1 then remove(supported_modes, i) end
	end
	current_mode = #supported_modes
	base_font = love.graphics.getFont()

	Info.initialize()
	canvas_resize()
	!if _RELEASE then
	current_world = Worlds.Splash
	!else
	current_world = Worlds.Splash
	-- current_world = Worlds.Menu
	!end
	Log.info("Starting scene: ", current_world.id)
	state_init()
	current_world:load()
end

function love.update(dt)
	Timer.update(dt)
	Flux.update(dt)
	current_world:update(dt)
end

function love.draw()
	love.graphics.setColor(1, 1, 1, 1)
	if current_world.top_draw then
		top_canvas:attach()
		current_world:top_draw(top_canvas)
		top_canvas:detach()
		top_canvas:render()
	end

	if current_world.game_draw then
		mid_canvas:attach()
		current_world:game_draw(mid_canvas)
		mid_canvas:detach()
		mid_canvas:render()
	end

	if current_world.bot_draw then
		bot_canvas:attach()
		current_world:bot_draw(bot_canvas)
		bot_canvas:detach()
		bot_canvas:render()
	end

	if current_world.draw then
		main_canvas:attach()
		current_world:draw(main_canvas)
		main_canvas:detach()
		main_canvas:render()
	end

	!if not _RELEASE then
	love.graphics.setFont(base_font)
	love.graphics.setColor(1, 0, 0, 1)
	love.graphics.print(love.timer.getFPS(), 8, 8)
	!end

	if not current_world.is_ready then
		Preloader.draw_loading()
	end
end

function love.keypressed(key)
	if key == "f" then
		G_window_resize()
	end

	!if not _RELEASE then
	if key == "`" then
		top_canvas.flags.draw_bounds = not top_canvas.flags.draw_bounds
		mid_canvas.flags.draw_bounds = not mid_canvas.flags.draw_bounds
		bot_canvas.flags.draw_bounds = not bot_canvas.flags.draw_bounds
		main_canvas.flags.draw_cross = not main_canvas.flags.draw_cross
	end
	!end

	if current_world.keypressed then
		current_world:keypressed(key)
	else
		Log.warn("No keypressed event for ", current_world.id)
	end
end

function love.keyreleased(key)
	if current_world.keyreleased then
		current_world:keyreleased(key)
	else
		Log.warn("No keyreleased event for ", current_world.id)
	end
end

function love.mousepressed(mx, my, mb)
	if current_world.mousepressed then
		current_world:mousepressed(mx, my, mb)
	else
		Log.warn("No mousepressed event for ", current_world.id)
	end
end

function love.mousereleased(mx, my, mb)
	if current_world.mousereleased then
		current_world:mousereleased(mx, my, mb)
	else
		Log.warn("No mousereleased event for ", current_world.id)
	end
end

function love.quit()
	Log.info("Quitting...")
end

function state_init()
	if current_world.canvases then
		current_world.canvases = {
			main_canvas = main_canvas,
			mid_canvas = mid_canvas,
			top_canvas = top_canvas,
			bot_canvas = bot_canvas
		}
	end
end

function state_switch(next_id)
	local str_err = format("State '%s' doest not exist in 'Worlds'", next_id)
	assert(Worlds[next_id], str_err)
	local prev_id = current_world.id
	current_world = Worlds[next_id]
	local str = format("Switched from %s to %s", prev_id, current_world.id)
	Log.trace(str)
	state_init()
	current_world:load()
end

canvas_resize = function()
	local game_size = !(_GAME_BASE_SIZE)
	local window_w = love.graphics.getWidth()
	local window_h = love.graphics.getHeight()
	local scale = min(window_w/game_size.x, window_h/game_size.y)

	local main_canvas_prop = {}
	main_canvas_prop.width = window_w
	main_canvas_prop.height = window_h
	main_canvas_prop.x = 0
	main_canvas_prop.y = 0
	main_canvas_prop.scale = 1

	local mid_canvas_prop = {}
	mid_canvas_prop.width = game_size.x * scale
	mid_canvas_prop.height = game_size.y * scale
	mid_canvas_prop.x = 0
	mid_canvas_prop.y = floor(window_h/2 - mid_canvas_prop.height/2)
	mid_canvas_prop.scale = scale

	local rem_height = window_h - mid_canvas_prop.height
	local top_canvas_prop = {}
	top_canvas_prop.width = window_w
	top_canvas_prop.height = floor(rem_height/2)
	top_canvas_prop.x = 0
	top_canvas_prop.y = 0
	top_canvas_prop.scale = scale

	local bot_canvas_prop = {}
	bot_canvas_prop.width = window_w
	bot_canvas_prop.height = floor(rem_height/2)
	bot_canvas_prop.x = 0
	bot_canvas_prop.y = floor(window_h/2 + mid_canvas_prop.height/2)
	bot_canvas_prop.scale = scale

	if main_canvas == nil then
		main_canvas = Canvas:new(main_canvas_prop)
		main_canvas.debug_color = color_red
	else main_canvas:set(main_canvas_prop)
	end

	if top_canvas == nil then
		top_canvas = Canvas:new(top_canvas_prop)
		top_canvas.debug_color = color_red
	else top_canvas:set(top_canvas_prop)
	end

	if mid_canvas == nil then
		mid_canvas = Canvas:new(mid_canvas_prop)
		mid_canvas.debug_color = color_green
	else mid_canvas:set(mid_canvas_prop)
	end

	if bot_canvas == nil then
		bot_canvas = Canvas:new(bot_canvas_prop)
		bot_canvas.debug_color = color_blue
	else bot_canvas:set(bot_canvas_prop)
	end
end

function G_window_resize(override_mode)
	current_mode = override_mode or (current_mode + 1)
	if current_mode > #supported_modes then
		current_mode = 1
	end
	local mode = supported_modes[current_mode]
	local scale = min(window_size.x/mode.width, window_size.y/mode.height)
	love.window.setMode(mode.width, mode.height)
	Log.info(format("Current Mode: [%i] %ix%i - scale:%f", current_mode, mode.width, mode.height, scale))
	canvas_resize()
end
