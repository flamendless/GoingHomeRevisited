--[[
Project: Going Home: Revisited
By: flamendless studio @flam8studio

Author: Brandon Blanker Lim-it @flamendless
Artist: Conrad Reyes @Shizzy619
Level Designer: Piolo Maurice Laudencia @piotato

Start Date: Tue Mar 17 18:42:00 PST 2020
--]]

require("modules.batteries"):export()

!if _PROF then
PROF_CAPTURE = true
JPROF = require("modules.jprof.jprof")
!end

local Flux = require("modules.flux.flux")
local Lily = require("modules.lily.lily")
local Log = require("modules.log.log")
Log.lovesave = true
require("modules.sdf").mount()
!if _DEV then
local Peeker = require("modules.peeker.peeker")
!end
local Timer = require("modules.hump.timer")
local TLE = require("modules.tle.timeline")

local Audio = require("audio")
local Config = require("config")
local ErrorHandler = require("error_handler")
love.errhand = ErrorHandler.callback
local GameStates = require("gamestates")
local Info = require("info")
local Inputs = require("inputs")
local NGrading = require("ngrading")
local Preloader = require("preloader")
local Save = require("save")
local Settings = require("settings")
local Shaders = require("shaders")
local WindowMode = require("window_mode")

!if _DEV then
require("modules.strict")
local DevTools = require("devtools")
!end

local font_preload = love.graphics.newFont("res/fonts/Jamboree.ttf", 32)
font_preload:setFilter($_FONT_FILTER, $_FONT_FILTER)
local function custom_loading_screen()
	local w, h = love.graphics.getDimensions()

	love.graphics.setColor(0, 0, 0, 0.5)
	love.graphics.rectangle("fill", 0, 0, w, h)

	local str_loading = string.format("LOADING: %i%%", Preloader.percent)
	local ox = font_preload:getWidth(str_loading) * 0.5
	local oy = font_preload:getHeight(str_loading) * 0.5

	love.graphics.setColor(1, 1, 1, 1)
	love.graphics.setFont(font_preload)
	love.graphics.print(str_loading, w * 0.5, h * 0.75, 0, 1, 1, ox, oy)
end

function love.load()
	@@profb("frame")
	@@profb("love load")

	Log.info("Starting... Game Version:", Config.this_version)
	Log.info(!("Commit: " .. _COMMIT_VERSION))

	love.math.setRandomSeed(love.timer.getTime())
	love.graphics.setDefaultFilter($_DEFAULT_FILTER, $_DEFAULT_FILTER)
	WindowMode.init()
	Shaders.init()
	Info.init()
	Save.init()
	Settings.init()
	Audio.init()
	Inputs.init()
	TLE.Attach()

	!if _DEV then
	-- GameStates.switch("Splash")
	-- GameStates.switch("Menu")
	-- GameStates.switch("Intro")
	-- GameStates.switch("Outside")
	-- GameStates.switch("StorageRoom")
	-- GameStates.switch("UtilityRoom")
	-- GameStates.switch("Kitchen")
	GameStates.switch("LivingRoom")

	DevTools.init()
	NGrading.dev_init()
	!else
	GameStates.switch("Splash")
	!end

	@@profe("love load")
	@@profe("frame")
end

function love.update(dt)
	@@profb("love.update")
	!if _DEV then
	Peeker.update(dt)
	!end

	Timer.update(dt)
	Flux.update(dt)
	GameStates.update(dt)
	Inputs.update()

	!if _DEV then
	DevTools.update(dt)
	!end

	@@profe("love.update")
end

function love.draw()
	@@profb("love.draw")
	!if _DEV then
	Peeker.attach()
	!end

	love.graphics.setColor(1, 1, 1, 1)
	GameStates.draw()

	if not GameStates.is_ready then
		custom_loading_screen()
	end

	!if _DEV then
	DevTools.draw()
	if DevTools.show_fps then
		love.graphics.setColor(1, 0, 0)
		love.graphics.setFont(font_preload)
		love.graphics.print(love.timer.getFPS())
		love.graphics.print($_MODE, love.graphics.getWidth() - font_preload:getWidth($_MODE))
	end
	DevTools.end_draw()
	!end

	!if _DEV then
	Peeker.detach()
	!end
	@@profe("love.draw")
end

function love.keypressed(key)
	!if _DEV then
	if key == "/" then
		if Peeker.get_status() then
			Peeker.stop(true)
		else
			Peeker.start({
				fps = 24,
				overlay = "circle", --or "text"
				post_clean_frames = true,
			})
		end
	end
	DevTools.keypressed(key)
	!end
	Inputs.keypressed(key)
	GameStates.keypressed(key)
end

function love.keyreleased(key)
	Inputs.keyreleased(key)
	GameStates.keyreleased(key)
end

!if _DEV then
function love.mousemoved(mx, my, dx, dy)
	!if _DEV then
	DevTools.mousemoved(mx, my, dx, dy)
	!end
	GameStates.mousemoved(mx, my, dx, dy)
end

function love.mousepressed(mx, my, mb)
	!if _DEV then
	DevTools.mousepressed(mx, my, mb)
	!end
	GameStates.mousepressed(mx, my, mb)
end

function love.mousereleased(mx, my, mb)
	!if _DEV then
	DevTools.mousereleased(mx, my, mb)
	!end
	GameStates.mousereleased(mx, my, mb)
end

function love.wheelmoved(wx, wy)
	!if _DEV then
	DevTools.wheelmoved(wx, wy)
	!end
end
!end

function love.quit()
	Lily.quit()
	Log.info("Quitting...")

	!if not _DEV and _LOG_SAVE then
	Log.quit($_LOG_OUTPUT)
	!end

	!if _PROF then
	JPROF.popAll()
	JPROF.write("prof.mpack")
	!end
end

function love.run()
	if love.load then love.load(love.arg.parseGameArguments(arg), arg) end
	if love.timer then love.timer.step() end
	local dt = 0
	-- Main loop time.
	return function()
		-- Process events.
		@@profb("frame")
		@@profb("love.run")

		if love.event then
			@@profb("love.event")
			love.event.pump()
			for name, a,b,c,d,e,f in love.event.poll() do
				@@profb(name)
				if name == "quit" then
					if not love.quit or not love.quit() then
						return a or 0
					end
				end
				love.handlers[name](a,b,c,d,e,f)
				@@profe(name)
			end
			@@profe("love.event")
		end

		if love.timer then dt = love.timer.step() end
		if love.update then love.update(dt) end
		if love.graphics and love.graphics.isActive() then
			love.graphics.origin()
			love.graphics.clear(love.graphics.getBackgroundColor())
			if love.draw then love.draw() end
			@@profb("present")
			love.graphics.present()
			@@profe("present")
		end
		@@profb("sleep")
		if love.timer then love.timer.sleep(0.001) end
		@@profe("sleep")
		@@profe("love.run")
		@@profe("frame")
	end
end
