!if _DEV then
local Slab = require("modules.slab")

local GameStates = require("gamestates")

local DevTools = {
	show = false,
}

local entity_list = {
	show = false,
	show_list = false,
	t_es = {},
	n_es_id = 0,
	title = "Entity List",
}
local stats = {
	show = true,
	stats = {},
	title = "Stats",
}
local systems_list = {
	show = false,
	title = "Systems List",
}

local list = {
	stats,
	entity_list,
	systems_list,
}

local getFPS = love.timer.getFPS

function DevTools.init()
	Slab.Initialize({"NoDocks"})
end

function DevTools.update(dt)
	if not DevTools.show then return end
	if not GameStates.current_state then return end
	Slab.Update(dt)

	Slab.BeginWindow("list", {Title = "DevTools"})
	for _, v in ipairs(list) do
		if Slab.CheckBox(v.show, v.title) then
			v.show = not v.show
		end
	end
	Slab.EndWindow()

	DevTools.draw_stats()
	DevTools.draw_entities_list()
	DevTools.draw_systems_list()
	GameStates.current_state.world:emit("debug_update", dt)
end

function DevTools.draw()
	if not DevTools.show then return end
	if not GameStates.current_state then return end
	GameStates.current_state.world:emit("debug_draw")
	Slab.Draw()
end

function DevTools.draw_stats()
	if not stats.show then return end
	stats.show = Slab.BeginWindow("stats", {
		Title = stats.title,
		IsOpen = stats.show,
	})
	Slab.Text("FPS: " .. getFPS())
	for k, v in pairs(stats.stats) do
		Slab.Text(k .. ": " .. v)
	end
	Slab.EndWindow()
end

function DevTools.draw_entities_list()
	if not entity_list.show then return end
	entity_list.show = Slab.BeginWindow("ent_list", {
		Title = entity_list.title,
		IsOpen = entity_list.show,
	})
	entity_list.t_es = GameStates.current_state.world:getEntities()
	entity_list.n_es_id = 0
	for _, e in ipairs(entity_list.t_es) do
		if e.id then entity_list.n_es_id = entity_list.n_es_id + 1 end
	end
	Slab.Text("# of entities: " .. #entity_list.t_es)
	Slab.Text("# of entities with id: " .. entity_list.n_es_id)

	if Slab.Button("Toggle List (with ID)") then
		entity_list.show_list = not entity_list.show_list
	end
	if entity_list.show_list then
		Slab.BeginLayout("layout_e_id", {
			Columns = 3,
		})
		local i = 1
		for _, e in ipairs(entity_list.t_es) do
			local id = e.id and e.id.value
			if id then
				Slab.SetLayoutColumn(i)
				local hidden = e.hidden
				if Slab.CheckBox(not hidden, id) then
					hidden = not hidden
					if hidden then e:give("hidden")
					else e:remove("hidden")
					end
				end
				i = i + 1
				if i > 3 then i = 1 end
			end
		end
		Slab.EndLayout()
	end
	Slab.EndWindow()
end

function DevTools.draw_systems_list()
	if not systems_list.show then return end
	systems_list.show = Slab.BeginWindow("systems", {
		Title = systems_list.title,
		IsOpen = systems_list.show,
	})
	Slab.BeginLayout("layout_systems", {Columns = 3})
	local i = 1
	for _, v in ipairs(GameStates.current_state.world:getSystems()) do
		Slab.SetLayoutColumn(i)
		if Slab.CheckBox(v.debug_show, v.debug_title) then
			v.debug_show = not v.debug_show
			v:setEnabled(v.debug_show)
		end
		i = i + 1
		if i > 3 then i = 1 end
	end
	Slab.EndLayout()
	Slab.EndWindow()
end

function DevTools.end_draw()
	if stats.show then
		stats.stats = love.graphics.getStats(stats.stats)
	end
end

function DevTools.keypressed(key)
	if key == "`" then
		DevTools.show = not DevTools.show
	elseif key == "r" then
		love.event.quit("restart")
	elseif key == "escape" then
		love.event.quit()
	end
end

return DevTools
!end
