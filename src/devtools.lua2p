!if _DEV then
local Slab = require("modules.slab")

local GameStates = require("gamestates")

local format = string.format

local DevTools = {
	show = false,
	flags = {
		ngrading = true,
		fog = false,
		movement = false,
		bump_collision = true,
		camera = true,
		fireflies = false,
		transform = false,
		log = true,
		bounding_box = true,
		glitch_shader_effect = false,
	},
}

local stats = {
	show = false,
	stats = {},
	title = "Stats",
}
local mouse = {
	show = true,
	title = "Mouse Info",
}
local entity_list = {
	show = false,
	show_list = false,
	t_es = {},
	n_es_id = 0,
	n_active = 0,
	title = "Entity List",
}
local systems_list = {
	show = false,
	title = "Systems List",
}
local debug_list = {
	show = true,
	title = "Debug List",
}

local list = {
	stats,
	mouse,
	entity_list,
	systems_list,
	debug_list,
}

local getFPS = love.timer.getFPS
local font = love.graphics.getFont()
local cols = 2

function DevTools.init()
	Slab.Initialize({"NoDocks"})
end

function DevTools.update(dt)
	if not DevTools.show then return end
	if not GameStates.world then return end
	@@profb("devtools_update")
	Slab.Update(dt)

	Slab.BeginWindow("list", {Title = "DevTools"})
	if Slab.CheckBox(DevTools.flags.ngrading, "NGrading") then
		DevTools.flags.ngrading = not DevTools.flags.ngrading
	end
	if Slab.CheckBox(DevTools.flags.fog, "Fog") then
		DevTools.flags.fog = not DevTools.flags.fog
	end
	for _, v in ipairs(list) do
		if Slab.CheckBox(v.show, v.title) then
			v.show = not v.show
		end
	end
	Slab.EndWindow()

	DevTools.draw_stats()
	DevTools.draw_mouse()
	DevTools.draw_entities_list()
	DevTools.draw_systems_list()
	DevTools.draw_debug_list()
	GameStates.world:emit("debug_update", dt)
	@@profe("devtools_update")
end

function DevTools.draw()
	if not DevTools.show then return end
	if not GameStates.world then return end

	@@profb("devtools_draw")
	love.graphics.setFont(font)
	if DevTools.camera then
		DevTools.camera:draw(function(l, t, w, h)
			GameStates.world:emit("debug_draw")
		end)
	else
		GameStates.world:emit("debug_draw")
	end
	Slab.Draw()
	@@profe("devtools_draw")
end

function DevTools.draw_stats()
	if not stats.show then return end
	stats.show = Slab.BeginWindow("stats", {
		Title = stats.title,
		IsOpen = stats.show,
	})
	Slab.Text("FPS: " .. getFPS())
	for k, v in pairs(stats.stats) do
		Slab.Text(k .. ": " .. v)
	end
	Slab.EndWindow()
end

function DevTools.draw_mouse()
	if not mouse.show then return end
	mouse.show = Slab.BeginWindow("mouse", {
		Title = mouse.title,
		IsOpen = mouse.show,
	})
	local mx, my = love.mouse.getPosition()
	local cx, cy = 0, 0
	local camera = DevTools.camera
	if camera then cx, cy = camera:toWorld(mx, my) end
	local str_m = format("Mouse: (%d, %d)", mx, my)
	local str_c = format("Camera: (%d, %d)", cx, cy)
	Slab.Text(str_m)
	Slab.Text(str_c)
	Slab.EndWindow()
end

function DevTools.draw_entities_list()
	if not entity_list.show then return end
	entity_list.show = Slab.BeginWindow("ent_list", {
		Title = entity_list.title,
		IsOpen = entity_list.show,
	})
	entity_list.t_es = GameStates.world:getEntities()
	entity_list.n_es_id = 0
	entity_list.n_active = 0
	for _, e in ipairs(entity_list.t_es) do
		if e.id then entity_list.n_es_id = entity_list.n_es_id + 1 end
		if not e.hidden then entity_list.n_active = entity_list.n_active + 1 end
	end
	Slab.Text("# of entities: " .. #entity_list.t_es)
	Slab.Text("# of entities with id: " .. entity_list.n_es_id)
	Slab.Text("# of active entities: " .. entity_list.n_active)

	if Slab.Button("Toggle List (with ID)") then
		entity_list.show_list = not entity_list.show_list
	end
	if entity_list.show_list then
		Slab.BeginLayout("layout_e_id", {
			Columns = cols,
		})
		local i = 1
		for _, e in ipairs(entity_list.t_es) do
			local id = e.id and e.id.value
			if id then
				Slab.SetLayoutColumn(i)
				local hidden = e.hidden
				if Slab.CheckBox(not hidden, id) then
					hidden = not hidden
					if hidden then e:give("hidden")
					else e:remove("hidden")
					end
				end
				i = i + 1
				if i > cols then i = 1 end
			end
		end
		Slab.EndLayout()
	end
	Slab.EndWindow()
end

function DevTools.draw_systems_list()
	if not systems_list.show then return end
	systems_list.show = Slab.BeginWindow("systems", {
		Title = systems_list.title,
		IsOpen = systems_list.show,
	})
	Slab.BeginLayout("layout_systems", {Columns = 3})
	local i = 1
	for _, v in ipairs(GameStates.world:getSystems()) do
		Slab.SetLayoutColumn(i)
		if Slab.CheckBox(v.debug_enabled, v.debug_title) then
			v.debug_enabled = not v.debug_enabled
			v:setEnabled(v.debug_enabled)
		end
		i = i + 1
		if i > 3 then i = 1 end
	end
	Slab.EndLayout()
	Slab.EndWindow()
end

function DevTools.draw_debug_list()
	if not debug_list.show then return end
	debug_list.show = Slab.BeginWindow("debug", {
		Title = debug_list.title,
		IsOpen = debug_list.show,
	})
	Slab.BeginLayout("layout_debug", {Columns = 2})
	local i = 1
	local states = GameStates.world:getSystems()
	for _, v in ipairs(states) do
		if v.debug_update or v.debug_draw then
			Slab.SetLayoutColumn(i)
			if Slab.CheckBox(v.debug_show, v.debug_title) then
				v.debug_show = not v.debug_show
			end
			i = i + 1
			if i > 2 then i = 1 end
		end
	end
	Slab.EndLayout()
	Slab.EndWindow()
end

function DevTools.end_draw()
	if stats.show then
		stats.stats = love.graphics.getStats(stats.stats)
	end
end

function DevTools.keypressed(key)
	if key == "`" then
		DevTools.show = not DevTools.show
		DevTools.flags.ngrading = not DevTools.show
	-- elseif key == "m" then
	-- 	GameStates.world:emit("save_game")
	-- elseif key == "l" then
	-- 	GameStates.world:emit("load_game")
	elseif key == "r" then
		love.event.quit("restart")
	elseif key == "escape" then
		love.event.quit()
	end
end

function DevTools.mousemoved(mx, my, dx, dy)
	if not GameStates.world then return end
	GameStates.world:emit("debug_mousemoved", mx, my, dx, dy)
end

function DevTools.mousepressed(mx, my, mb)
	if not GameStates.world then return end
	GameStates.world:emit("debug_mousepressed", mx, my, mb)
end

function DevTools.mousereleased(mx, my, mb)
	if not GameStates.world then return end
	GameStates.world:emit("debug_mousereleased", mx, my, mb)
end

function DevTools.wheelmoved(wx, wy)
	if not GameStates.world then return end
	GameStates.world:emit("debug_wheelmoved", wx, wy)
end

return DevTools
!end
