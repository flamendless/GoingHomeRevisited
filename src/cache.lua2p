local Log = require("modules.log.log")

local Cache = {
	entities = {},
	!if _CACHED_PRELOAD then
	resources = {},
	!end
}

function Cache.add_entity(e)
	@@assert(e.__isEntity)
	local id = e.id.value
	Cache.entities[id] = e
	Log.info(id, "added to cache")
end

function Cache.has_entity(e)
	return Cache.get_entity(e.id.value) ~= nil
end

function Cache.get_entity(id)
	@@assert(type(id) == "string")
	return Cache.entities[id]
end

function Cache.remove_entity(e)
	@@assert(e.__isEntity)
	local id = e.id.value
	if Cache.entities[id] then
		Cache.entities[id] = nil
		Log.info(id, "removed from cache")
	end
end

!if _CACHED_PRELOAD then
function Cache.has_resource(id)
	return Cache.resources[id] ~= nil
end

function Cache.clean_resources()
	tablex.clear(Cache.resources)
	@@assert(#Cache.resources == 0)
end

function Cache.manage_resources(resources, list, prev_res)
	@@assert(type(resources) == "table")
	@@assert(type(list) == "table")
	@@assert(type(prev_res) == "table")
	for kind, t in pairs(list) do
		local res = prev_res[kind]
		if res then
			!if _DEV then
			setmetatable(res, nil)
			!end
			for i = #t, 1, -1 do
				local id = t[i][1]
				if res[id] then
					Cache.resources[id] = res[id]
					resources[kind][id] = res[id]
					table.remove(list[kind], i)
				end
			end
		end
	end
end
!end

return Cache
